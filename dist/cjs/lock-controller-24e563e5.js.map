{"file":"lock-controller-24e563e5.js","mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,oBAAoB,GAAG,MAAM;AAC1C,IAAI,IAAI,WAAW,CAAC;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,MAAM,IAAI,GAAG,YAAY;AAC7B,QAAQ,MAAM,CAAC,GAAG,WAAW,CAAC;AAC9B,QAAQ,IAAI,OAAO,CAAC;AACpB,QAAQ,WAAW,GAAG,IAAI,OAAO,CAAC,CAAC,CAAC,MAAM,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;AACxD,QAAQ,IAAI,CAAC,KAAK,SAAS,EAAE;AAC7B,YAAY,MAAM,CAAC,CAAC;AACpB,SAAS;AACT,QAAQ,OAAO,OAAO,CAAC;AACvB,KAAK,CAAC;AACN,IAAI,OAAO;AACX,QAAQ,IAAI;AACZ,KAAK,CAAC;AACN;;;;","names":[],"sources":["node_modules/@ionic/core/dist/collection/utils/lock-controller.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\n/**\n * Creates a lock controller.\n *\n * Claiming a lock means that nothing else can acquire the lock until it is released.\n * This can momentarily prevent execution of code that needs to wait for the earlier code to finish.\n * For example, this can be used to prevent multiple transitions from occurring at the same time.\n */\nexport const createLockController = () => {\n    let waitPromise;\n    /**\n     * When lock() is called, the lock is claimed.\n     * Once a lock has been claimed, it cannot be claimed again until it is released.\n     * When this function gets resolved, the lock is released, allowing it to be claimed again.\n     *\n     * @example ```tsx\n     * const unlock = await this.lockController.lock();\n     * // do other stuff\n     * unlock();\n     * ```\n     */\n    const lock = async () => {\n        const p = waitPromise;\n        let resolve;\n        waitPromise = new Promise((r) => (resolve = r));\n        if (p !== undefined) {\n            await p;\n        }\n        return resolve;\n    };\n    return {\n        lock,\n    };\n};\n"],"version":3}