{"file":"ion-loading.entry.cjs.js","mappings":"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","names":["createAnimation","createDelegateController","createLockController","createTriggerController","config","ENABLE_HTML_CONTENT_DEFAULT","BACKDROP","prepareOverlay","getIonMode","setOverlayId","raf","present","dismiss","eventMethod","h","sanitizeDOMString","Host","getClassMap"],"sources":["node_modules/@ionic/core/dist/collection/components/loading/animations/ios.enter.js","node_modules/@ionic/core/dist/collection/components/loading/animations/ios.leave.js","node_modules/@ionic/core/dist/collection/components/loading/animations/md.enter.js","node_modules/@ionic/core/dist/collection/components/loading/animations/md.leave.js","node_modules/@ionic/core/dist/collection/components/loading/loading.ios.css?tag=ion-loading&mode=ios&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/loading/loading.md.css?tag=ion-loading&mode=md&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/loading/loading.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { createAnimation } from \"../../../utils/animation/animation\";\n/**\n * iOS Loading Enter Animation\n */\nexport const iosEnterAnimation = (baseEl) => {\n    const baseAnimation = createAnimation();\n    const backdropAnimation = createAnimation();\n    const wrapperAnimation = createAnimation();\n    backdropAnimation\n        .addElement(baseEl.querySelector('ion-backdrop'))\n        .fromTo('opacity', 0.01, 'var(--backdrop-opacity)')\n        .beforeStyles({\n        'pointer-events': 'none',\n    })\n        .afterClearStyles(['pointer-events']);\n    wrapperAnimation.addElement(baseEl.querySelector('.loading-wrapper')).keyframes([\n        { offset: 0, opacity: 0.01, transform: 'scale(1.1)' },\n        { offset: 1, opacity: 1, transform: 'scale(1)' },\n    ]);\n    return baseAnimation\n        .addElement(baseEl)\n        .easing('ease-in-out')\n        .duration(200)\n        .addAnimation([backdropAnimation, wrapperAnimation]);\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { createAnimation } from \"../../../utils/animation/animation\";\n/**\n * iOS Loading Leave Animation\n */\nexport const iosLeaveAnimation = (baseEl) => {\n    const baseAnimation = createAnimation();\n    const backdropAnimation = createAnimation();\n    const wrapperAnimation = createAnimation();\n    backdropAnimation.addElement(baseEl.querySelector('ion-backdrop')).fromTo('opacity', 'var(--backdrop-opacity)', 0);\n    wrapperAnimation.addElement(baseEl.querySelector('.loading-wrapper')).keyframes([\n        { offset: 0, opacity: 0.99, transform: 'scale(1)' },\n        { offset: 1, opacity: 0, transform: 'scale(0.9)' },\n    ]);\n    return baseAnimation\n        .addElement(baseEl)\n        .easing('ease-in-out')\n        .duration(200)\n        .addAnimation([backdropAnimation, wrapperAnimation]);\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { createAnimation } from \"../../../utils/animation/animation\";\n/**\n * Md Loading Enter Animation\n */\nexport const mdEnterAnimation = (baseEl) => {\n    const baseAnimation = createAnimation();\n    const backdropAnimation = createAnimation();\n    const wrapperAnimation = createAnimation();\n    backdropAnimation\n        .addElement(baseEl.querySelector('ion-backdrop'))\n        .fromTo('opacity', 0.01, 'var(--backdrop-opacity)')\n        .beforeStyles({\n        'pointer-events': 'none',\n    })\n        .afterClearStyles(['pointer-events']);\n    wrapperAnimation.addElement(baseEl.querySelector('.loading-wrapper')).keyframes([\n        { offset: 0, opacity: 0.01, transform: 'scale(1.1)' },\n        { offset: 1, opacity: 1, transform: 'scale(1)' },\n    ]);\n    return baseAnimation\n        .addElement(baseEl)\n        .easing('ease-in-out')\n        .duration(200)\n        .addAnimation([backdropAnimation, wrapperAnimation]);\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { createAnimation } from \"../../../utils/animation/animation\";\n/**\n * Md Loading Leave Animation\n */\nexport const mdLeaveAnimation = (baseEl) => {\n    const baseAnimation = createAnimation();\n    const backdropAnimation = createAnimation();\n    const wrapperAnimation = createAnimation();\n    backdropAnimation.addElement(baseEl.querySelector('ion-backdrop')).fromTo('opacity', 'var(--backdrop-opacity)', 0);\n    wrapperAnimation.addElement(baseEl.querySelector('.loading-wrapper')).keyframes([\n        { offset: 0, opacity: 0.99, transform: 'scale(1)' },\n        { offset: 1, opacity: 0, transform: 'scale(0.9)' },\n    ]);\n    return baseAnimation\n        .addElement(baseEl)\n        .easing('ease-in-out')\n        .duration(200)\n        .addAnimation([backdropAnimation, wrapperAnimation]);\n};\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the loading dialog\n   *\n   * @prop --min-width: Minimum width of the loading dialog\n   * @prop --width: Width of the loading dialog\n   * @prop --max-width: Maximum width of the loading dialog\n   *\n   * @prop --min-height: Minimum height of the loading dialog\n   * @prop --height: Height of the loading dialog\n   * @prop --max-height: Maximum height of the loading dialog\n   *\n   * @prop --spinner-color: Color of the loading spinner\n   *\n   * @prop --backdrop-opacity: Opacity of the backdrop\n   */\n  --min-width: auto;\n  --width: auto;\n  --min-height: auto;\n  --height: auto;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  position: fixed;\n  align-items: center;\n  justify-content: center;\n  outline: none;\n  font-family: var(--ion-font-family, inherit);\n  contain: strict;\n  touch-action: none;\n  user-select: none;\n  z-index: 1001;\n}\n\n:host(.overlay-hidden) {\n  display: none;\n}\n\n.loading-wrapper {\n  display: flex;\n  align-items: inherit;\n  justify-content: inherit;\n  width: var(--width);\n  min-width: var(--min-width);\n  max-width: var(--max-width);\n  height: var(--height);\n  min-height: var(--min-height);\n  max-height: var(--max-height);\n  background: var(--background);\n  opacity: 0;\n  z-index: 10;\n}\n\nion-spinner {\n  color: var(--spinner-color);\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --background: var(--ion-overlay-background-color, var(--ion-color-step-100, var(--ion-background-color-step-100, #f9f9f9)));\n  --max-width: 270px;\n  --max-height: 90%;\n  --spinner-color: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n  --backdrop-opacity: var(--ion-backdrop-opacity, 0.3);\n  color: var(--ion-text-color, #000);\n  font-size: 0.875rem;\n}\n\n.loading-wrapper {\n  border-radius: 8px;\n  -webkit-padding-start: 34px;\n  padding-inline-start: 34px;\n  -webkit-padding-end: 34px;\n  padding-inline-end: 34px;\n  padding-top: 24px;\n  padding-bottom: 24px;\n}\n\n@supports (backdrop-filter: blur(0)) {\n  :host(.loading-translucent) .loading-wrapper {\n    background-color: rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8);\n    backdrop-filter: saturate(180%) blur(20px);\n  }\n}\n.loading-content {\n  font-weight: bold;\n}\n\n.loading-spinner + .loading-content {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the loading dialog\n   *\n   * @prop --min-width: Minimum width of the loading dialog\n   * @prop --width: Width of the loading dialog\n   * @prop --max-width: Maximum width of the loading dialog\n   *\n   * @prop --min-height: Minimum height of the loading dialog\n   * @prop --height: Height of the loading dialog\n   * @prop --max-height: Maximum height of the loading dialog\n   *\n   * @prop --spinner-color: Color of the loading spinner\n   *\n   * @prop --backdrop-opacity: Opacity of the backdrop\n   */\n  --min-width: auto;\n  --width: auto;\n  --min-height: auto;\n  --height: auto;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  position: fixed;\n  align-items: center;\n  justify-content: center;\n  outline: none;\n  font-family: var(--ion-font-family, inherit);\n  contain: strict;\n  touch-action: none;\n  user-select: none;\n  z-index: 1001;\n}\n\n:host(.overlay-hidden) {\n  display: none;\n}\n\n.loading-wrapper {\n  display: flex;\n  align-items: inherit;\n  justify-content: inherit;\n  width: var(--width);\n  min-width: var(--min-width);\n  max-width: var(--max-width);\n  height: var(--height);\n  min-height: var(--min-height);\n  max-height: var(--max-height);\n  background: var(--background);\n  opacity: 0;\n  z-index: 10;\n}\n\nion-spinner {\n  color: var(--spinner-color);\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --background: var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2));\n  --max-width: 280px;\n  --max-height: 90%;\n  --spinner-color: var(--ion-color-primary, #0054e9);\n  --backdrop-opacity: var(--ion-backdrop-opacity, 0.32);\n  color: var(--ion-color-step-850, var(--ion-text-color-step-150, #262626));\n  font-size: 0.875rem;\n}\n\n.loading-wrapper {\n  border-radius: 2px;\n  -webkit-padding-start: 24px;\n  padding-inline-start: 24px;\n  -webkit-padding-end: 24px;\n  padding-inline-end: 24px;\n  padding-top: 24px;\n  padding-bottom: 24px;\n  box-shadow: 0 16px 20px rgba(0, 0, 0, 0.4);\n}\n\n.loading-spinner + .loading-content {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { ENABLE_HTML_CONTENT_DEFAULT } from \"../../utils/config\";\nimport { raf } from \"../../utils/helpers\";\nimport { createLockController } from \"../../utils/lock-controller\";\nimport { BACKDROP, dismiss, eventMethod, prepareOverlay, present, createDelegateController, createTriggerController, setOverlayId, } from \"../../utils/overlays\";\nimport { sanitizeDOMString } from \"../../utils/sanitization/index\";\nimport { getClassMap } from \"../../utils/theme\";\nimport { config } from \"../../global/config\";\nimport { getIonMode } from \"../../global/ionic-global\";\nimport { iosEnterAnimation } from \"./animations/ios.enter\";\nimport { iosLeaveAnimation } from \"./animations/ios.leave\";\nimport { mdEnterAnimation } from \"./animations/md.enter\";\nimport { mdLeaveAnimation } from \"./animations/md.leave\";\n// TODO(FW-2832): types\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\nexport class Loading {\n    constructor() {\n        this.delegateController = createDelegateController(this);\n        this.lockController = createLockController();\n        this.triggerController = createTriggerController();\n        this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n        this.presented = false;\n        this.onBackdropTap = () => {\n            this.dismiss(undefined, BACKDROP);\n        };\n        this.overlayIndex = undefined;\n        this.delegate = undefined;\n        this.hasController = false;\n        this.keyboardClose = true;\n        this.enterAnimation = undefined;\n        this.leaveAnimation = undefined;\n        this.message = undefined;\n        this.cssClass = undefined;\n        this.duration = 0;\n        this.backdropDismiss = false;\n        this.showBackdrop = true;\n        this.spinner = undefined;\n        this.translucent = false;\n        this.animated = true;\n        this.htmlAttributes = undefined;\n        this.isOpen = false;\n        this.trigger = undefined;\n    }\n    onIsOpenChange(newValue, oldValue) {\n        if (newValue === true && oldValue === false) {\n            this.present();\n        }\n        else if (newValue === false && oldValue === true) {\n            this.dismiss();\n        }\n    }\n    triggerChanged() {\n        const { trigger, el, triggerController } = this;\n        if (trigger) {\n            triggerController.addClickListener(el, trigger);\n        }\n    }\n    connectedCallback() {\n        prepareOverlay(this.el);\n        this.triggerChanged();\n    }\n    componentWillLoad() {\n        if (this.spinner === undefined) {\n            const mode = getIonMode(this);\n            this.spinner = config.get('loadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n        setOverlayId(this.el);\n    }\n    componentDidLoad() {\n        /**\n         * If loading indicator was rendered with isOpen=\"true\"\n         * then we should open loading indicator immediately.\n         */\n        if (this.isOpen === true) {\n            raf(() => this.present());\n        }\n        /**\n         * When binding values in frameworks such as Angular\n         * it is possible for the value to be set after the Web Component\n         * initializes but before the value watcher is set up in Stencil.\n         * As a result, the watcher callback may not be fired.\n         * We work around this by manually calling the watcher\n         * callback when the component has loaded and the watcher\n         * is configured.\n         */\n        this.triggerChanged();\n    }\n    disconnectedCallback() {\n        this.triggerController.removeClickListener();\n    }\n    /**\n     * Present the loading overlay after it has been created.\n     */\n    async present() {\n        const unlock = await this.lockController.lock();\n        await this.delegateController.attachViewToDom();\n        await present(this, 'loadingEnter', iosEnterAnimation, mdEnterAnimation);\n        if (this.duration > 0) {\n            this.durationTimeout = setTimeout(() => this.dismiss(), this.duration + 10);\n        }\n        unlock();\n    }\n    /**\n     * Dismiss the loading overlay after it has been presented.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the loading.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the loading.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     *\n     * This is a no-op if the overlay has not been presented yet. If you want\n     * to remove an overlay from the DOM that was never presented, use the\n     * [remove](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove) method.\n     */\n    async dismiss(data, role) {\n        const unlock = await this.lockController.lock();\n        if (this.durationTimeout) {\n            clearTimeout(this.durationTimeout);\n        }\n        const dismissed = await dismiss(this, data, role, 'loadingLeave', iosLeaveAnimation, mdLeaveAnimation);\n        if (dismissed) {\n            this.delegateController.removeViewFromDom();\n        }\n        unlock();\n        return dismissed;\n    }\n    /**\n     * Returns a promise that resolves when the loading did dismiss.\n     */\n    onDidDismiss() {\n        return eventMethod(this.el, 'ionLoadingDidDismiss');\n    }\n    /**\n     * Returns a promise that resolves when the loading will dismiss.\n     */\n    onWillDismiss() {\n        return eventMethod(this.el, 'ionLoadingWillDismiss');\n    }\n    renderLoadingMessage(msgId) {\n        const { customHTMLEnabled, message } = this;\n        if (customHTMLEnabled) {\n            return h(\"div\", { class: \"loading-content\", id: msgId, innerHTML: sanitizeDOMString(message) });\n        }\n        return (h(\"div\", { class: \"loading-content\", id: msgId }, message));\n    }\n    render() {\n        const { message, spinner, htmlAttributes, overlayIndex } = this;\n        const mode = getIonMode(this);\n        const msgId = `loading-${overlayIndex}-msg`;\n        /**\n         * If the message is defined, use that as the label.\n         * Otherwise, don't set aria-labelledby.\n         */\n        const ariaLabelledBy = message !== undefined ? msgId : null;\n        return (h(Host, Object.assign({ key: 'f48fc35c38f3c200f39a44f3e741c1676057248e', role: \"dialog\", \"aria-modal\": \"true\", \"aria-labelledby\": ariaLabelledBy, tabindex: \"-1\" }, htmlAttributes, { style: {\n                zIndex: `${40000 + this.overlayIndex}`,\n            }, onIonBackdropTap: this.onBackdropTap, class: Object.assign(Object.assign({}, getClassMap(this.cssClass)), { [mode]: true, 'overlay-hidden': true, 'loading-translucent': this.translucent }) }), h(\"ion-backdrop\", { key: 'e46058f693235c8ce5474df167595f6a80e4559d', visible: this.showBackdrop, tappable: this.backdropDismiss }), h(\"div\", { key: '2ecd77581a2f130616033b8a78fb9da9d508b588', tabindex: \"0\" }), h(\"div\", { key: '0243f93c41684f30c81623a8fbb533fd8f17b679', class: \"loading-wrapper ion-overlay-wrapper\" }, spinner && (h(\"div\", { key: '0643bc42b6e691580d29af27ea5a9fe395a6c5ce', class: \"loading-spinner\" }, h(\"ion-spinner\", { key: 'f0417802dfbcad6ab9903b84bad692eedd326c88', name: spinner, \"aria-hidden\": \"true\" }))), message !== undefined && this.renderLoadingMessage(msgId)), h(\"div\", { key: '3d3a256fe1074bda91cd09212460aa6460c4c723', tabindex: \"0\" })));\n    }\n    static get is() { return \"ion-loading\"; }\n    static get encapsulation() { return \"scoped\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"loading.ios.scss\"],\n            \"md\": [\"loading.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"loading.ios.css\"],\n            \"md\": [\"loading.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"overlayIndex\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number\",\n                    \"references\": {}\n                },\n                \"required\": true,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"\"\n                },\n                \"attribute\": \"overlay-index\",\n                \"reflect\": false\n            },\n            \"delegate\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"FrameworkDelegate\",\n                    \"resolved\": \"FrameworkDelegate | undefined\",\n                    \"references\": {\n                        \"FrameworkDelegate\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::FrameworkDelegate\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"\"\n                }\n            },\n            \"hasController\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"\"\n                },\n                \"attribute\": \"has-controller\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"keyboardClose\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the keyboard will be automatically dismissed when the overlay is presented.\"\n                },\n                \"attribute\": \"keyboard-close\",\n                \"reflect\": false,\n                \"defaultValue\": \"true\"\n            },\n            \"enterAnimation\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"AnimationBuilder\",\n                    \"resolved\": \"((baseEl: any, opts?: any) => Animation) | undefined\",\n                    \"references\": {\n                        \"AnimationBuilder\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::AnimationBuilder\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Animation to use when the loading indicator is presented.\"\n                }\n            },\n            \"leaveAnimation\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"AnimationBuilder\",\n                    \"resolved\": \"((baseEl: any, opts?: any) => Animation) | undefined\",\n                    \"references\": {\n                        \"AnimationBuilder\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::AnimationBuilder\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Animation to use when the loading indicator is dismissed.\"\n                }\n            },\n            \"message\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | IonicSafeString\",\n                    \"resolved\": \"IonicSafeString | string | undefined\",\n                    \"references\": {\n                        \"IonicSafeString\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/sanitization\",\n                            \"id\": \"src/utils/sanitization/index.ts::IonicSafeString\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Optional text content to display in the loading indicator.\\n\\nThis property accepts custom HTML as a string.\\nContent is parsed as plaintext by default.\\n`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config\\nbefore custom HTML can be used.\"\n                },\n                \"attribute\": \"message\",\n                \"reflect\": false\n            },\n            \"cssClass\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | string[]\",\n                    \"resolved\": \"string | string[] | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Additional classes to apply for custom CSS. If multiple classes are\\nprovided they should be separated by spaces.\"\n                },\n                \"attribute\": \"css-class\",\n                \"reflect\": false\n            },\n            \"duration\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Number of milliseconds to wait before dismissing the loading indicator.\"\n                },\n                \"attribute\": \"duration\",\n                \"reflect\": false,\n                \"defaultValue\": \"0\"\n            },\n            \"backdropDismiss\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the loading indicator will be dismissed when the backdrop is clicked.\"\n                },\n                \"attribute\": \"backdrop-dismiss\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"showBackdrop\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, a backdrop will be displayed behind the loading indicator.\"\n                },\n                \"attribute\": \"show-backdrop\",\n                \"reflect\": false,\n                \"defaultValue\": \"true\"\n            },\n            \"spinner\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"SpinnerTypes | null\",\n                    \"resolved\": \"\\\"bubbles\\\" | \\\"circles\\\" | \\\"circular\\\" | \\\"crescent\\\" | \\\"dots\\\" | \\\"lines\\\" | \\\"lines-sharp\\\" | \\\"lines-sharp-small\\\" | \\\"lines-small\\\" | null | undefined\",\n                    \"references\": {\n                        \"SpinnerTypes\": {\n                            \"location\": \"import\",\n                            \"path\": \"../spinner/spinner-configs\",\n                            \"id\": \"src/components/spinner/spinner-configs.ts::SpinnerTypes\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The name of the spinner to display.\"\n                },\n                \"attribute\": \"spinner\",\n                \"reflect\": false\n            },\n            \"translucent\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the loading indicator will be translucent.\\nOnly applies when the mode is `\\\"ios\\\"` and the device supports\\n[`backdrop-filter`](https://developer.mozilla.org/en-US/docs/Web/CSS/backdrop-filter#Browser_compatibility).\"\n                },\n                \"attribute\": \"translucent\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"animated\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the loading indicator will animate.\"\n                },\n                \"attribute\": \"animated\",\n                \"reflect\": false,\n                \"defaultValue\": \"true\"\n            },\n            \"htmlAttributes\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"{ [key: string]: any }\",\n                    \"resolved\": \"undefined | { [key: string]: any; }\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Additional attributes to pass to the loader.\"\n                }\n            },\n            \"isOpen\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the loading indicator will open. If `false`, the loading indicator will close.\\nUse this if you need finer grained control over presentation, otherwise\\njust use the loadingController or the `trigger` property.\\nNote: `isOpen` will not automatically be set back to `false` when\\nthe loading indicator dismisses. You will need to do that in your code.\"\n                },\n                \"attribute\": \"is-open\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"trigger\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | undefined\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"An ID corresponding to the trigger element that\\ncauses the loading indicator to open when clicked.\"\n                },\n                \"attribute\": \"trigger\",\n                \"reflect\": false\n            }\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"didPresent\",\n                \"name\": \"ionLoadingDidPresent\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted after the loading has presented.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"willPresent\",\n                \"name\": \"ionLoadingWillPresent\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted before the loading has presented.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"willDismiss\",\n                \"name\": \"ionLoadingWillDismiss\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted before the loading has dismissed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"OverlayEventDetail\",\n                    \"resolved\": \"OverlayEventDetail<any>\",\n                    \"references\": {\n                        \"OverlayEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/overlays-interface\",\n                            \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"didDismiss\",\n                \"name\": \"ionLoadingDidDismiss\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted after the loading has dismissed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"OverlayEventDetail\",\n                    \"resolved\": \"OverlayEventDetail<any>\",\n                    \"references\": {\n                        \"OverlayEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/overlays-interface\",\n                            \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"didPresentShorthand\",\n                \"name\": \"didPresent\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted after the loading indicator has presented.\\nShorthand for ionLoadingWillDismiss.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"willPresentShorthand\",\n                \"name\": \"willPresent\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted before the loading indicator has presented.\\nShorthand for ionLoadingWillPresent.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"willDismissShorthand\",\n                \"name\": \"willDismiss\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted before the loading indicator has dismissed.\\nShorthand for ionLoadingWillDismiss.\"\n                },\n                \"complexType\": {\n                    \"original\": \"OverlayEventDetail\",\n                    \"resolved\": \"OverlayEventDetail<any>\",\n                    \"references\": {\n                        \"OverlayEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/overlays-interface\",\n                            \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"didDismissShorthand\",\n                \"name\": \"didDismiss\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted after the loading indicator has dismissed.\\nShorthand for ionLoadingDidDismiss.\"\n                },\n                \"complexType\": {\n                    \"original\": \"OverlayEventDetail\",\n                    \"resolved\": \"OverlayEventDetail<any>\",\n                    \"references\": {\n                        \"OverlayEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/overlays-interface\",\n                            \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"present\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Present the loading overlay after it has been created.\",\n                    \"tags\": []\n                }\n            },\n            \"dismiss\": {\n                \"complexType\": {\n                    \"signature\": \"(data?: any, role?: string) => Promise<boolean>\",\n                    \"parameters\": [{\n                            \"name\": \"data\",\n                            \"type\": \"any\",\n                            \"docs\": \"Any data to emit in the dismiss events.\"\n                        }, {\n                            \"name\": \"role\",\n                            \"type\": \"string | undefined\",\n                            \"docs\": \"The role of the element that is dismissing the loading.\\nThis can be useful in a button handler for determining which button was\\nclicked to dismiss the loading.\\nSome examples include: ``\\\"cancel\\\"`, `\\\"destructive\\\"`, \\\"selected\\\"`, and `\\\"backdrop\\\"`.\\n\\nThis is a no-op if the overlay has not been presented yet. If you want\\nto remove an overlay from the DOM that was never presented, use the\\n[remove](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove) method.\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<boolean>\"\n                },\n                \"docs\": {\n                    \"text\": \"Dismiss the loading overlay after it has been presented.\",\n                    \"tags\": [{\n                            \"name\": \"param\",\n                            \"text\": \"data Any data to emit in the dismiss events.\"\n                        }, {\n                            \"name\": \"param\",\n                            \"text\": \"role The role of the element that is dismissing the loading.\\nThis can be useful in a button handler for determining which button was\\nclicked to dismiss the loading.\\nSome examples include: ``\\\"cancel\\\"`, `\\\"destructive\\\"`, \\\"selected\\\"`, and `\\\"backdrop\\\"`.\\n\\nThis is a no-op if the overlay has not been presented yet. If you want\\nto remove an overlay from the DOM that was never presented, use the\\n[remove](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove) method.\"\n                        }]\n                }\n            },\n            \"onDidDismiss\": {\n                \"complexType\": {\n                    \"signature\": \"<T = any>() => Promise<OverlayEventDetail<T>>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"OverlayEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/overlays-interface\",\n                            \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n                        },\n                        \"T\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::T\"\n                        }\n                    },\n                    \"return\": \"Promise<OverlayEventDetail<T>>\"\n                },\n                \"docs\": {\n                    \"text\": \"Returns a promise that resolves when the loading did dismiss.\",\n                    \"tags\": []\n                }\n            },\n            \"onWillDismiss\": {\n                \"complexType\": {\n                    \"signature\": \"<T = any>() => Promise<OverlayEventDetail<T>>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"OverlayEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/overlays-interface\",\n                            \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n                        },\n                        \"T\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::T\"\n                        }\n                    },\n                    \"return\": \"Promise<OverlayEventDetail<T>>\"\n                },\n                \"docs\": {\n                    \"text\": \"Returns a promise that resolves when the loading will dismiss.\",\n                    \"tags\": []\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"isOpen\",\n                \"methodName\": \"onIsOpenChange\"\n            }, {\n                \"propName\": \"trigger\",\n                \"methodName\": \"triggerChanged\"\n            }];\n    }\n}\n"],"version":3}