{"file":"ion-refresher-content.entry.cjs.js","mappings":"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","names":["config","ENABLE_HTML_CONTENT_DEFAULT","supportsRubberBandScrolling","getIonMode","arrowDown","h","sanitizeDOMString","SPINNERS","Host","caretBackSharp"],"sources":["node_modules/@ionic/core/dist/collection/components/refresher-content/refresher-content.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { ENABLE_HTML_CONTENT_DEFAULT } from \"../../utils/config\";\nimport { sanitizeDOMString } from \"../../utils/sanitization/index\";\nimport { arrowDown, caretBackSharp } from \"ionicons/icons\";\nimport { config } from \"../../global/config\";\nimport { getIonMode } from \"../../global/ionic-global\";\nimport { supportsRubberBandScrolling } from \"../refresher/refresher.utils\";\nimport { SPINNERS } from \"../spinner/spinner-configs\";\nexport class RefresherContent {\n    constructor() {\n        this.customHTMLEnabled = config.get('innerHTMLTemplatesEnabled', ENABLE_HTML_CONTENT_DEFAULT);\n        this.pullingIcon = undefined;\n        this.pullingText = undefined;\n        this.refreshingSpinner = undefined;\n        this.refreshingText = undefined;\n    }\n    componentWillLoad() {\n        if (this.pullingIcon === undefined) {\n            /**\n             * The native iOS refresher uses a spinner instead of\n             * an icon, so we need to see if this device supports\n             * the native iOS refresher.\n             */\n            const hasRubberBandScrolling = supportsRubberBandScrolling();\n            const mode = getIonMode(this);\n            const overflowRefresher = hasRubberBandScrolling ? 'lines' : arrowDown;\n            this.pullingIcon = config.get('refreshingIcon', mode === 'ios' && hasRubberBandScrolling ? config.get('spinner', overflowRefresher) : 'circular');\n        }\n        if (this.refreshingSpinner === undefined) {\n            const mode = getIonMode(this);\n            this.refreshingSpinner = config.get('refreshingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'circular'));\n        }\n    }\n    renderPullingText() {\n        const { customHTMLEnabled, pullingText } = this;\n        if (customHTMLEnabled) {\n            return h(\"div\", { class: \"refresher-pulling-text\", innerHTML: sanitizeDOMString(pullingText) });\n        }\n        return h(\"div\", { class: \"refresher-pulling-text\" }, pullingText);\n    }\n    renderRefreshingText() {\n        const { customHTMLEnabled, refreshingText } = this;\n        if (customHTMLEnabled) {\n            return h(\"div\", { class: \"refresher-refreshing-text\", innerHTML: sanitizeDOMString(refreshingText) });\n        }\n        return h(\"div\", { class: \"refresher-refreshing-text\" }, refreshingText);\n    }\n    render() {\n        const pullingIcon = this.pullingIcon;\n        const hasSpinner = pullingIcon != null && SPINNERS[pullingIcon] !== undefined;\n        const mode = getIonMode(this);\n        return (h(Host, { key: '19633bbcf02e3dba885d6bdcdaf2269bf4c8e2f5', class: mode }, h(\"div\", { key: '28922e434a55a6cac0476fe2bee56941ce0d1c02', class: \"refresher-pulling\" }, this.pullingIcon && hasSpinner && (h(\"div\", { key: 'fe575bf996021884677e9b23a3215d63caf894f5', class: \"refresher-pulling-icon\" }, h(\"div\", { key: '59fe12297fd95bc33b8df8cd35316e2a1c084d91', class: \"spinner-arrow-container\" }, h(\"ion-spinner\", { key: 'af9cc013ae04945c140b2865610ca73edb52ab48', name: this.pullingIcon, paused: true }), mode === 'md' && this.pullingIcon === 'circular' && (h(\"div\", { key: '34df66ad1b0f706a0532957251aa2c20bf4587d8', class: \"arrow-container\" }, h(\"ion-icon\", { key: 'ffdb5c123e606b823491c6c51cc2b497f62581bb', icon: caretBackSharp, \"aria-hidden\": \"true\" })))))), this.pullingIcon && !hasSpinner && (h(\"div\", { key: 'ac3a2032bb969264d20fa057e9123441005d7a9d', class: \"refresher-pulling-icon\" }, h(\"ion-icon\", { key: 'd969d10915548e72aae289b52154366f3dd39b31', icon: this.pullingIcon, lazy: false, \"aria-hidden\": \"true\" }))), this.pullingText !== undefined && this.renderPullingText()), h(\"div\", { key: 'a8f854f81a94812d7bef8ce088331d94f49ff53d', class: \"refresher-refreshing\" }, this.refreshingSpinner && (h(\"div\", { key: 'a1f646945370e40c844d62bc0c647443ae9dfbe7', class: \"refresher-refreshing-icon\" }, h(\"ion-spinner\", { key: 'ab3ff4047769b6436e222b46d193c1e8b23e2fce', name: this.refreshingSpinner }))), this.refreshingText !== undefined && this.renderRefreshingText())));\n    }\n    static get is() { return \"ion-refresher-content\"; }\n    static get properties() {\n        return {\n            \"pullingIcon\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"SpinnerTypes | string | null\",\n                    \"resolved\": \"null | string | undefined\",\n                    \"references\": {\n                        \"SpinnerTypes\": {\n                            \"location\": \"import\",\n                            \"path\": \"../spinner/spinner-configs\",\n                            \"id\": \"src/components/spinner/spinner-configs.ts::SpinnerTypes\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A static icon or a spinner to display when you begin to pull down.\\nA spinner name can be provided to gradually show tick marks\\nwhen pulling down on iOS devices.\"\n                },\n                \"attribute\": \"pulling-icon\",\n                \"reflect\": false\n            },\n            \"pullingText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | IonicSafeString\",\n                    \"resolved\": \"IonicSafeString | string | undefined\",\n                    \"references\": {\n                        \"IonicSafeString\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/sanitization\",\n                            \"id\": \"src/utils/sanitization/index.ts::IonicSafeString\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The text you want to display when you begin to pull down.\\n`pullingText` can accept either plaintext or HTML as a string.\\nTo display characters normally reserved for HTML, they\\nmust be escaped. For example `<Ionic>` would become\\n`&lt;Ionic&gt;`\\n\\nFor more information: [Security Documentation](https://ionicframework.com/docs/faq/security)\\n\\nContent is parsed as plaintext by default.\\n`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config\\nbefore custom HTML can be used.\"\n                },\n                \"attribute\": \"pulling-text\",\n                \"reflect\": false\n            },\n            \"refreshingSpinner\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"SpinnerTypes | null\",\n                    \"resolved\": \"\\\"bubbles\\\" | \\\"circles\\\" | \\\"circular\\\" | \\\"crescent\\\" | \\\"dots\\\" | \\\"lines\\\" | \\\"lines-sharp\\\" | \\\"lines-sharp-small\\\" | \\\"lines-small\\\" | null | undefined\",\n                    \"references\": {\n                        \"SpinnerTypes\": {\n                            \"location\": \"import\",\n                            \"path\": \"../spinner/spinner-configs\",\n                            \"id\": \"src/components/spinner/spinner-configs.ts::SpinnerTypes\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"An animated SVG spinner that shows when refreshing begins\"\n                },\n                \"attribute\": \"refreshing-spinner\",\n                \"reflect\": false\n            },\n            \"refreshingText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | IonicSafeString\",\n                    \"resolved\": \"IonicSafeString | string | undefined\",\n                    \"references\": {\n                        \"IonicSafeString\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/sanitization\",\n                            \"id\": \"src/utils/sanitization/index.ts::IonicSafeString\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The text you want to display when performing a refresh.\\n`refreshingText` can accept either plaintext or HTML as a string.\\nTo display characters normally reserved for HTML, they\\nmust be escaped. For example `<Ionic>` would become\\n`&lt;Ionic&gt;`\\n\\nFor more information: [Security Documentation](https://ionicframework.com/docs/faq/security)\\n\\nContent is parsed as plaintext by default.\\n`innerHTMLTemplatesEnabled` must be set to `true` in the Ionic config\\nbefore custom HTML can be used.\"\n                },\n                \"attribute\": \"refreshing-text\",\n                \"reflect\": false\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n}\n"],"version":3}