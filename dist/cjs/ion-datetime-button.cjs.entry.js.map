{"file":"ion-datetime-button.entry.cjs.js","mappings":"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","names":["parseDate","getToday","getHourCycle","getLocalizedDateTime","getLocalizedTime","printIonError","addEventListener","componentOnReady","getIonMode","h","Host","createColorClasses"],"sources":["node_modules/@ionic/core/dist/collection/components/datetime-button/datetime-button.ios.css?tag=ion-datetime-button&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/datetime-button/datetime-button.md.css?tag=ion-datetime-button&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/datetime-button/datetime-button.js"],"sourcesContent":["/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n}\n\n:host button {\n  border-radius: 8px;\n  -webkit-margin-start: 2px;\n  margin-inline-start: 2px;\n  -webkit-margin-end: 2px;\n  margin-inline-end: 2px;\n  margin-top: 0px;\n  margin-bottom: 0px;\n  position: relative;\n  transition: 150ms color ease-in-out;\n  border: none;\n  background: var(--ion-color-step-300, var(--ion-background-color-step-300, #edeef0));\n  color: var(--ion-text-color, #000);\n  font-family: inherit;\n  font-size: 1rem;\n  cursor: pointer;\n  overflow: hidden;\n  appearance: none;\n}\n\n:host(.time-active) #time-button,\n:host(.date-active) #date-button {\n  color: var(--ion-color-base);\n}\n\n:host(.datetime-button-disabled) {\n  pointer-events: none;\n}\n\n:host(.datetime-button-disabled) button {\n  opacity: 0.4;\n}\n\n:host button {\n  -webkit-padding-start: 13px;\n  padding-inline-start: 13px;\n  -webkit-padding-end: 13px;\n  padding-inline-end: 13px;\n  padding-top: 7px;\n  padding-bottom: 7px;\n}\n\n:host button.ion-activated {\n  color: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n}\n\n:host button {\n  border-radius: 8px;\n  -webkit-margin-start: 2px;\n  margin-inline-start: 2px;\n  -webkit-margin-end: 2px;\n  margin-inline-end: 2px;\n  margin-top: 0px;\n  margin-bottom: 0px;\n  position: relative;\n  transition: 150ms color ease-in-out;\n  border: none;\n  background: var(--ion-color-step-300, var(--ion-background-color-step-300, #edeef0));\n  color: var(--ion-text-color, #000);\n  font-family: inherit;\n  font-size: 1rem;\n  cursor: pointer;\n  overflow: hidden;\n  appearance: none;\n}\n\n:host(.time-active) #time-button,\n:host(.date-active) #date-button {\n  color: var(--ion-color-base);\n}\n\n:host(.datetime-button-disabled) {\n  pointer-events: none;\n}\n\n:host(.datetime-button-disabled) button {\n  opacity: 0.4;\n}\n\n:host button {\n  -webkit-padding-start: 12px;\n  padding-inline-start: 12px;\n  -webkit-padding-end: 12px;\n  padding-inline-end: 12px;\n  padding-top: 6px;\n  padding-bottom: 6px;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { componentOnReady, addEventListener } from \"../../utils/helpers\";\nimport { printIonError } from \"../../utils/logging/index\";\nimport { createColorClasses } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\nimport { getToday } from \"../datetime/utils/data\";\nimport { getLocalizedDateTime, getLocalizedTime } from \"../datetime/utils/format\";\nimport { getHourCycle } from \"../datetime/utils/helpers\";\nimport { parseDate } from \"../datetime/utils/parse\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot date-target - Content displayed inside of the date button.\n * @slot time-target - Content displayed inside of the time button.\n *\n * @part native - The native HTML button that wraps the slotted text.\n */\nexport class DatetimeButton {\n    constructor() {\n        this.datetimeEl = null;\n        this.overlayEl = null;\n        /**\n         * Accepts one or more string values and converts\n         * them to DatetimeParts. This is done so datetime-button\n         * can work with an array internally and not need\n         * to keep checking if the datetime value is `string` or `string[]`.\n         */\n        this.getParsedDateValues = (value) => {\n            if (value === undefined || value === null) {\n                return [];\n            }\n            if (Array.isArray(value)) {\n                return value;\n            }\n            return [value];\n        };\n        /**\n         * Check the value property on the linked\n         * ion-datetime and then format it according\n         * to the locale specified on ion-datetime.\n         */\n        this.setDateTimeText = () => {\n            var _a, _b, _c, _d, _e;\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            const { value, locale, formatOptions, hourCycle, preferWheel, multiple, titleSelectedDatesFormatter } = datetimeEl;\n            const parsedValues = this.getParsedDateValues(value);\n            /**\n             * Both ion-datetime and ion-datetime-button default\n             * to today's date and time if no value is set.\n             */\n            const parsedDatetimes = parseDate(parsedValues.length > 0 ? parsedValues : [getToday()]);\n            if (!parsedDatetimes) {\n                return;\n            }\n            /**\n             * If developers incorrectly use multiple=\"true\"\n             * with non \"date\" datetimes, then just select\n             * the first value so the interface does\n             * not appear broken. Datetime will provide a\n             * warning in the console.\n             */\n            const firstParsedDatetime = parsedDatetimes[0];\n            const computedHourCycle = getHourCycle(locale, hourCycle);\n            this.dateText = this.timeText = undefined;\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_a = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _a !== void 0 ? _a : { month: 'short', day: 'numeric', year: 'numeric' });\n                    const timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle, formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time);\n                    if (preferWheel) {\n                        this.dateText = `${dateText} ${timeText}`;\n                    }\n                    else {\n                        this.dateText = dateText;\n                        this.timeText = timeText;\n                    }\n                    break;\n                case 'date':\n                    if (multiple && parsedValues.length !== 1) {\n                        let headerText = `${parsedValues.length} days`; // default/fallback for multiple selection\n                        if (titleSelectedDatesFormatter !== undefined) {\n                            try {\n                                headerText = titleSelectedDatesFormatter(parsedValues);\n                            }\n                            catch (e) {\n                                printIonError('Exception in provided `titleSelectedDatesFormatter`: ', e);\n                            }\n                        }\n                        this.dateText = headerText;\n                    }\n                    else {\n                        this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_b = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _b !== void 0 ? _b : { month: 'short', day: 'numeric', year: 'numeric' });\n                    }\n                    break;\n                case 'time':\n                    this.timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle, formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time);\n                    break;\n                case 'month-year':\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_c = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _c !== void 0 ? _c : { month: 'long', year: 'numeric' });\n                    break;\n                case 'month':\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_d = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) !== null && _d !== void 0 ? _d : { month: 'long' });\n                    break;\n                case 'year':\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_e = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) !== null && _e !== void 0 ? _e : { year: 'numeric' });\n                    break;\n            }\n        };\n        /**\n         * Waits for the ion-datetime to re-render.\n         * This is needed in order to correctly position\n         * a popover relative to the trigger element.\n         */\n        this.waitForDatetimeChanges = async () => {\n            const { datetimeEl } = this;\n            if (!datetimeEl) {\n                return Promise.resolve();\n            }\n            return new Promise((resolve) => {\n                addEventListener(datetimeEl, 'ionRender', resolve, { once: true });\n            });\n        };\n        this.handleDateClick = async (ev) => {\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            let needsPresentationChange = false;\n            /**\n             * When clicking the date button,\n             * we need to make sure that only a date\n             * picker is displayed. For presentation styles\n             * that display content other than a date picker,\n             * we need to update the presentation style.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const needsChange = datetimeEl.presentation !== 'date';\n                    /**\n                     * The date+time wheel picker\n                     * shows date and time together,\n                     * so do not adjust the presentation\n                     * in that case.\n                     */\n                    if (!datetimeEl.preferWheel && needsChange) {\n                        datetimeEl.presentation = 'date';\n                        needsPresentationChange = true;\n                    }\n                    break;\n            }\n            /**\n             * Track which button was clicked\n             * so that it can have the correct\n             * activated styles applied when\n             * the modal/popover containing\n             * the datetime is opened.\n             */\n            this.selectedButton = 'date';\n            this.presentOverlay(ev, needsPresentationChange, this.dateTargetEl);\n        };\n        this.handleTimeClick = (ev) => {\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            let needsPresentationChange = false;\n            /**\n             * When clicking the time button,\n             * we need to make sure that only a time\n             * picker is displayed. For presentation styles\n             * that display content other than a time picker,\n             * we need to update the presentation style.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const needsChange = datetimeEl.presentation !== 'time';\n                    if (needsChange) {\n                        datetimeEl.presentation = 'time';\n                        needsPresentationChange = true;\n                    }\n                    break;\n            }\n            /**\n             * Track which button was clicked\n             * so that it can have the correct\n             * activated styles applied when\n             * the modal/popover containing\n             * the datetime is opened.\n             */\n            this.selectedButton = 'time';\n            this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\n        };\n        /**\n         * If the datetime is presented in an\n         * overlay, the datetime and overlay\n         * should be appropriately sized.\n         * These classes provide default sizing values\n         * that developers can customize.\n         * The goal is to provide an overlay that is\n         * reasonably sized with a datetime that\n         * fills the entire container.\n         */\n        this.presentOverlay = async (ev, needsPresentationChange, triggerEl) => {\n            const { overlayEl } = this;\n            if (!overlayEl) {\n                return;\n            }\n            if (overlayEl.tagName === 'ION-POPOVER') {\n                /**\n                 * When the presentation on datetime changes,\n                 * we need to wait for the component to re-render\n                 * otherwise the computed width/height of the\n                 * popover content will be wrong, causing\n                 * the popover to not align with the trigger element.\n                 */\n                if (needsPresentationChange) {\n                    await this.waitForDatetimeChanges();\n                }\n                /**\n                 * We pass the trigger button element\n                 * so that the popover aligns with the individual\n                 * button that was clicked, not the component container.\n                 */\n                overlayEl.present(Object.assign(Object.assign({}, ev), { detail: {\n                        ionShadowTarget: triggerEl,\n                    } }));\n            }\n            else {\n                overlayEl.present();\n            }\n        };\n        this.datetimePresentation = 'date-time';\n        this.dateText = undefined;\n        this.timeText = undefined;\n        this.datetimeActive = false;\n        this.selectedButton = undefined;\n        this.color = 'primary';\n        this.disabled = false;\n        this.datetime = undefined;\n    }\n    async componentWillLoad() {\n        const { datetime } = this;\n        if (!datetime) {\n            printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', this.el);\n            return;\n        }\n        const datetimeEl = (this.datetimeEl = document.getElementById(datetime));\n        if (!datetimeEl) {\n            printIonError(`No ion-datetime instance found for ID '${datetime}'.`, this.el);\n            return;\n        }\n        /**\n         * The element reference must be an ion-datetime. Print an error\n         * if a non-datetime element was provided.\n         */\n        if (datetimeEl.tagName !== 'ION-DATETIME') {\n            printIonError(`Expected an ion-datetime instance for ID '${datetime}' but received '${datetimeEl.tagName.toLowerCase()}' instead.`, datetimeEl);\n            return;\n        }\n        /**\n         * Since the datetime can be used in any context (overlays, accordion, etc)\n         * we track when it is visible to determine when it is active.\n         * This informs which button is highlighted as well as the\n         * aria-expanded state.\n         */\n        const io = new IntersectionObserver((entries) => {\n            const ev = entries[0];\n            this.datetimeActive = ev.isIntersecting;\n        }, {\n            threshold: 0.01,\n        });\n        io.observe(datetimeEl);\n        /**\n         * Get a reference to any modal/popover\n         * the datetime is being used in so we can\n         * correctly size it when it is presented.\n         */\n        const overlayEl = (this.overlayEl = datetimeEl.closest('ion-modal, ion-popover'));\n        /**\n         * The .ion-datetime-button-overlay class contains\n         * styles that allow any modal/popover to be\n         * sized according to the dimensions of the datetime.\n         * If developers want a smaller/larger overlay all they need\n         * to do is change the width/height of the datetime.\n         * Additionally, this lets us avoid having to set\n         * explicit widths on each variant of datetime.\n         */\n        if (overlayEl) {\n            overlayEl.classList.add('ion-datetime-button-overlay');\n        }\n        componentOnReady(datetimeEl, () => {\n            const datetimePresentation = (this.datetimePresentation = datetimeEl.presentation || 'date-time');\n            /**\n             * Set the initial display\n             * in the rendered buttons.\n             *\n             * From there, we need to listen\n             * for ionChange to be emitted\n             * from datetime so we know when\n             * to re-render the displayed\n             * text in the buttons.\n             */\n            this.setDateTimeText();\n            addEventListener(datetimeEl, 'ionValueChange', this.setDateTimeText);\n            /**\n             * Configure the initial selected button\n             * in the event that the datetime is displayed\n             * without clicking one of the datetime buttons.\n             * For example, a datetime could be expanded\n             * in an accordion. In this case users only\n             * need to click the accordion header to show\n             * the datetime.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'date':\n                case 'month-year':\n                case 'month':\n                case 'year':\n                    this.selectedButton = 'date';\n                    break;\n                case 'time-date':\n                case 'time':\n                    this.selectedButton = 'time';\n                    break;\n            }\n        });\n    }\n    render() {\n        const { color, dateText, timeText, selectedButton, datetimeActive, disabled } = this;\n        const mode = getIonMode(this);\n        return (h(Host, { key: '26e606af6f067a5774db37ed41387ffebb941777', class: createColorClasses(color, {\n                [mode]: true,\n                [`${selectedButton}-active`]: datetimeActive,\n                ['datetime-button-disabled']: disabled,\n            }) }, dateText && (h(\"button\", { key: '6b7aa66a15b4a6d89d411e40586de28a2ac9f343', class: \"ion-activatable\", id: \"date-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleDateClick, disabled: disabled, part: \"native\", ref: (el) => (this.dateTargetEl = el) }, h(\"slot\", { key: 'd42f34fd167be34386319e7ea788c2ab03c90b87', name: \"date-target\" }, dateText), mode === 'md' && h(\"ion-ripple-effect\", { key: '47dd34f3c2799064cac7a5fe25440ecc043950f0' }))), timeText && (h(\"button\", { key: 'd77424a20fae320654774c7bfc8a8e2369d3afe3', class: \"ion-activatable\", id: \"time-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleTimeClick, disabled: disabled, part: \"native\", ref: (el) => (this.timeTargetEl = el) }, h(\"slot\", { key: 'ac088a78141bb53f2efd48dd7745f8954c92378b', name: \"time-target\" }, timeText), mode === 'md' && h(\"ion-ripple-effect\", { key: 'b3a58ddfd28b9396e2518ffd62a045ec13d8b9d0' })))));\n    }\n    static get is() { return \"ion-datetime-button\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"datetime-button.ios.scss\"],\n            \"md\": [\"datetime-button.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"datetime-button.ios.css\"],\n            \"md\": [\"datetime-button.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true,\n                \"defaultValue\": \"'primary'\"\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the button.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"datetime\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The ID of the `ion-datetime` instance\\nassociated with the datetime button.\"\n                },\n                \"attribute\": \"datetime\",\n                \"reflect\": false\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"datetimePresentation\": {},\n            \"dateText\": {},\n            \"timeText\": {},\n            \"datetimeActive\": {},\n            \"selectedButton\": {}\n        };\n    }\n    static get elementRef() { return \"el\"; }\n}\n"],"version":3}