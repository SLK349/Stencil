{"file":"watch-options-b75d9664.js","mappings":";;AAAA;AACA;AACA;AACY,MAAC,eAAe,GAAG,CAAC,WAAW,EAAE,OAAO,EAAE,QAAQ,KAAK;AACnE,IAAI,IAAI,OAAO,gBAAgB,KAAK,WAAW,EAAE;AACjD,QAAQ,OAAO;AACf,KAAK;AACL,IAAI,MAAM,QAAQ,GAAG,IAAI,gBAAgB,CAAC,CAAC,YAAY,KAAK;AAC5D,QAAQ,QAAQ,CAAC,iBAAiB,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC;AAC3D,KAAK,CAAC,CAAC;AACP,IAAI,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE;AAClC,QAAQ,SAAS,EAAE,IAAI;AACvB,QAAQ,OAAO,EAAE,IAAI;AACrB,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,QAAQ,CAAC;AACpB,EAAE;AACF,MAAM,iBAAiB,GAAG,CAAC,YAAY,EAAE,OAAO,KAAK;AACrD,IAAI,IAAI,SAAS,CAAC;AAClB,IAAI,YAAY,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK;AAClC;AACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACxD,YAAY,SAAS,GAAG,iBAAiB,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,SAAS,CAAC;AACnF,SAAS;AACT,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,SAAS,CAAC;AACrB,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,iBAAiB,GAAG,CAAC,IAAI,EAAE,OAAO,KAAK;AACpD;AACA;AACA;AACA;AACA,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,CAAC,EAAE;AAC7B,QAAQ,OAAO,SAAS,CAAC;AACzB,KAAK;AACL;AACA,IAAI,MAAM,EAAE,GAAG,IAAI,CAAC;AACpB,IAAI,MAAM,OAAO,GAAG,EAAE,CAAC,OAAO,KAAK,OAAO,CAAC,WAAW,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;AAC3G,IAAI,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,KAAK,CAAC,CAAC;AACrD,CAAC;;;;","names":[],"sources":["node_modules/@ionic/core/dist/collection/utils/watch-options.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nexport const watchForOptions = (containerEl, tagName, onChange) => {\n    if (typeof MutationObserver === 'undefined') {\n        return;\n    }\n    const mutation = new MutationObserver((mutationList) => {\n        onChange(getSelectedOption(mutationList, tagName));\n    });\n    mutation.observe(containerEl, {\n        childList: true,\n        subtree: true,\n    });\n    return mutation;\n};\nconst getSelectedOption = (mutationList, tagName) => {\n    let newOption;\n    mutationList.forEach((mut) => {\n        // eslint-disable-next-line @typescript-eslint/prefer-for-of\n        for (let i = 0; i < mut.addedNodes.length; i++) {\n            newOption = findCheckedOption(mut.addedNodes[i], tagName) || newOption;\n        }\n    });\n    return newOption;\n};\n/**\n * The \"value\" key is only set on some components such as ion-select-option.\n * As a result, we create a default union type of HTMLElement and the \"value\" key.\n * However, implementers are required to provide the appropriate component type\n * such as HTMLIonSelectOptionElement.\n */\nexport const findCheckedOption = (node, tagName) => {\n    /**\n     * https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType\n     * The above check ensures \"node\" is an Element (nodeType 1).\n     */\n    if (node.nodeType !== 1) {\n        return undefined;\n    }\n    // HTMLElement inherits from Element, so we cast \"el\" as T.\n    const el = node;\n    const options = el.tagName === tagName.toUpperCase() ? [el] : Array.from(el.querySelectorAll(tagName));\n    return options.find((o) => o.value === el.value);\n};\n"],"version":3}