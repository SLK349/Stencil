{"file":"ion-app.entry.js","mappings":"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","names":[],"sources":["node_modules/@ionic/core/dist/collection/components/app/app.css?tag=ion-app","node_modules/@ionic/core/dist/collection/components/app/app.js"],"sourcesContent":["html.plt-mobile ion-app {\n  user-select: none;\n}\n\n/**\n * This works around a WebKit issue\n * where user-select: none was causing\n * contenteditable to not be selectable,\n * even though inputs and textareas are selectable.\n */\nhtml.plt-mobile ion-app [contenteditable] {\n  user-select: text;\n}\n\nion-app.force-statusbar-padding {\n  --ion-safe-area-top: 20px;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Build, Host, h } from \"@stencil/core\";\nimport { shouldUseCloseWatcher } from \"../../utils/hardware-back-button\";\nimport { printIonWarning } from \"../../utils/logging/index\";\nimport { isPlatform } from \"../../utils/platform\";\nimport { config } from \"../../global/config\";\nimport { getIonMode } from \"../../global/ionic-global\";\nexport class App {\n    componentDidLoad() {\n        if (Build.isBrowser) {\n            rIC(async () => {\n                const isHybrid = isPlatform(window, 'hybrid');\n                if (!config.getBoolean('_testing')) {\n                    import('../../utils/tap-click').then((module) => module.startTapClick(config));\n                }\n                if (config.getBoolean('statusTap', isHybrid)) {\n                    import('../../utils/status-tap').then((module) => module.startStatusTap());\n                }\n                if (config.getBoolean('inputShims', needInputShims())) {\n                    /**\n                     * needInputShims() ensures that only iOS and Android\n                     * platforms proceed into this block.\n                     */\n                    const platform = isPlatform(window, 'ios') ? 'ios' : 'android';\n                    import('../../utils/input-shims/input-shims').then((module) => module.startInputShims(config, platform));\n                }\n                const hardwareBackButtonModule = await import('../../utils/hardware-back-button');\n                const supportsHardwareBackButtonEvents = isHybrid || shouldUseCloseWatcher();\n                if (config.getBoolean('hardwareBackButton', supportsHardwareBackButtonEvents)) {\n                    hardwareBackButtonModule.startHardwareBackButton();\n                }\n                else {\n                    /**\n                     * If an app sets hardwareBackButton: false and experimentalCloseWatcher: true\n                     * then the close watcher will not be used.\n                     */\n                    if (shouldUseCloseWatcher()) {\n                        printIonWarning('experimentalCloseWatcher was set to `true`, but hardwareBackButton was set to `false`. Both config options must be `true` for the Close Watcher API to be used.');\n                    }\n                    hardwareBackButtonModule.blockHardwareBackButton();\n                }\n                if (typeof window !== 'undefined') {\n                    import('../../utils/keyboard/keyboard').then((module) => module.startKeyboardAssist(window));\n                }\n                import('../../utils/focus-visible').then((module) => (this.focusVisible = module.startFocusVisible()));\n            });\n        }\n    }\n    /**\n     * @internal\n     * Used to set focus on an element that uses `ion-focusable`.\n     * Do not use this if focusing the element as a result of a keyboard\n     * event as the focus utility should handle this for us. This method\n     * should be used when we want to programmatically focus an element as\n     * a result of another user action. (Ex: We focus the first element\n     * inside of a popover when the user presents it, but the popover is not always\n     * presented as a result of keyboard action.)\n     */\n    async setFocus(elements) {\n        if (this.focusVisible) {\n            this.focusVisible.setFocus(elements);\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { key: 'a562850f242d9d45573e35efdd4bd178254677ef', class: {\n                [mode]: true,\n                'ion-page': true,\n                'force-statusbar-padding': config.getBoolean('_forceStatusbarPadding'),\n            } }));\n    }\n    static get is() { return \"ion-app\"; }\n    static get originalStyleUrls() {\n        return {\n            \"$\": [\"app.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"$\": [\"app.css\"]\n        };\n    }\n    static get methods() {\n        return {\n            \"setFocus\": {\n                \"complexType\": {\n                    \"signature\": \"(elements: HTMLElement[]) => Promise<void>\",\n                    \"parameters\": [{\n                            \"name\": \"elements\",\n                            \"type\": \"HTMLElement[]\",\n                            \"docs\": \"\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"HTMLElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLElement\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"\",\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": \"Used to set focus on an element that uses `ion-focusable`.\\nDo not use this if focusing the element as a result of a keyboard\\nevent as the focus utility should handle this for us. This method\\nshould be used when we want to programmatically focus an element as\\na result of another user action. (Ex: We focus the first element\\ninside of a popover when the user presents it, but the popover is not always\\npresented as a result of keyboard action.)\"\n                        }]\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n}\nconst needInputShims = () => {\n    /**\n     * iOS always needs input shims\n     */\n    const needsShimsIOS = isPlatform(window, 'ios') && isPlatform(window, 'mobile');\n    if (needsShimsIOS) {\n        return true;\n    }\n    /**\n     * Android only needs input shims when running\n     * in the browser and only if the browser is using the\n     * new Chrome 108+ resize behavior: https://developer.chrome.com/blog/viewport-resize-behavior/\n     */\n    const isAndroidMobileWeb = isPlatform(window, 'android') && isPlatform(window, 'mobileweb');\n    if (isAndroidMobileWeb) {\n        return true;\n    }\n    return false;\n};\nconst rIC = (callback) => {\n    if ('requestIdleCallback' in window) {\n        window.requestIdleCallback(callback);\n    }\n    else {\n        setTimeout(callback, 32);\n    }\n};\n"],"version":3}