{"version":3,"names":["searchbarIosCss","IonSearchbarIosStyle0","searchbarMdCss","IonSearchbarMdStyle0","Searchbar","constructor","hostRef","this","isCancelVisible","shouldAlignLeft","inputId","searchbarIds","inheritedAttributes","onClearInput","async","shouldFocus","ionClear","emit","Promise","resolve","setTimeout","value","getValue","emitInputChange","focused","setFocus","focusedValue","onCancelSearchbar","ev","preventDefault","stopPropagation","ionCancel","emitValueChange","nativeInput","blur","onInput","input","target","onChange","onBlur","ionBlur","positionElements","undefined","onFocus","ionFocus","noAnimate","color","animated","autocapitalize","autocomplete","autocorrect","cancelButtonIcon","config","get","arrowBackSharp","cancelButtonText","clearIcon","debounce","disabled","inputmode","enterkeyhint","maxlength","minlength","name","placeholder","searchIcon","showCancelButton","showClearButton","spellcheck","type","onLangChanged","newValue","Object","assign","lang","forceUpdate","onDirChanged","dir","debounceChanged","ionInput","originalIonInput","debounceEvent","valueChanged","inputEl","showCancelButtonChanged","requestAnimationFrame","connectedCallback","emitStyle","componentWillLoad","inheritAttributes","el","componentDidLoad","ionStyle","searchbar","focus","getInputElement","componentOnReady","event","toString","ionChange","prevAlignLeft","mode","getIonMode","trim","positionPlaceholder","positionCancelButton","rtl","isRTL","iconEl","shadowRoot","querySelector","removeAttribute","doc","document","tempSpan","createElement","innerText","body","appendChild","raf","textWidth","offsetWidth","remove","inputLeft","iconLeft","clientWidth","style","paddingRight","marginRight","paddingLeft","marginLeft","cancelButton","shouldShowCancel","shouldShowCancelButton","cancelStyle","offset","hasValue","shouldShowClearButton","render","getBoolean","closeCircle","closeSharp","searchOutline","searchSharp","h","key","tabIndex","onMouseDown","onTouchStart","class","icon","lazy","Host","role","createColorClasses","ref","inputMode","enterKeyHint","minLength","maxLength","autoCapitalize","autoComplete","autoCorrect","onPointerDown","onClick"],"sources":["node_modules/@ionic/core/dist/collection/components/searchbar/searchbar.ios.css?tag=ion-searchbar&mode=ios&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/searchbar/searchbar.md.css?tag=ion-searchbar&mode=md&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/searchbar/searchbar.js"],"sourcesContent":["/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the searchbar input\n   * @prop --box-shadow: Box shadow of the searchbar input\n   * @prop --border-radius: Border radius of the searchbar input\n   * @prop --cancel-button-color: Color of the searchbar cancel button\n   * @prop --clear-button-color: Color of the searchbar clear button\n   * @prop --color: Color of the searchbar text\n   * @prop --icon-color: Color of the searchbar icon\n   * @prop --placeholder-color: Color of the searchbar placeholder\n   * @prop --placeholder-font-style: Font style of the searchbar placeholder\n   * @prop --placeholder-font-weight: Font weight of the searchbar placeholder\n   * @prop --placeholder-opacity: Opacity of the searchbar placeholder\n   */\n  --placeholder-color: initial;\n  --placeholder-font-style: initial;\n  --placeholder-font-weight: initial;\n  --placeholder-opacity: var(--ion-placeholder-opacity, 0.6);\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  display: flex;\n  position: relative;\n  align-items: center;\n  width: 100%;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  box-sizing: border-box;\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-contrast);\n}\n\n:host(.ion-color) .searchbar-input {\n  background: var(--ion-color-base);\n}\n\n:host(.ion-color) .searchbar-clear-button,\n:host(.ion-color) .searchbar-cancel-button,\n:host(.ion-color) .searchbar-search-icon {\n  color: inherit;\n}\n\n.searchbar-search-icon {\n  color: var(--icon-color);\n  pointer-events: none;\n}\n\n.searchbar-input-container {\n  display: block;\n  position: relative;\n  flex-shrink: 1;\n  width: 100%;\n}\n\n.searchbar-input {\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  border-radius: var(--border-radius);\n  display: block;\n  width: 100%;\n  min-height: inherit;\n  border: 0;\n  outline: none;\n  background: var(--background);\n  font-family: inherit;\n  box-shadow: var(--box-shadow);\n  box-sizing: border-box;\n  appearance: none;\n}\n.searchbar-input::placeholder {\n  color: var(--placeholder-color);\n  font-family: inherit;\n  font-style: var(--placeholder-font-style);\n  font-weight: var(--placeholder-font-weight);\n  opacity: var(--placeholder-opacity);\n}\n.searchbar-input::-webkit-search-cancel-button, .searchbar-input::-ms-clear {\n  display: none;\n}\n\n.searchbar-cancel-button {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  display: none;\n  height: 100%;\n  border: 0;\n  outline: none;\n  color: var(--cancel-button-color);\n  cursor: pointer;\n  appearance: none;\n}\n\n.searchbar-cancel-button > div {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n}\n\n.searchbar-clear-button {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  display: none;\n  min-height: 0;\n  outline: none;\n  color: var(--clear-button-color);\n  appearance: none;\n}\n\n/**\n * Normally, we would not want to use :focus\n * here because that would mean tapping the button\n * on mobile would focus it (and keep it focused).\n * However, the clear button always disappears after\n * being activated, so we never get to that state.\n */\n.searchbar-clear-button:focus {\n  opacity: 0.5;\n}\n\n:host(.searchbar-has-value.searchbar-should-show-clear) .searchbar-clear-button {\n  display: block;\n}\n\n:host(.searchbar-disabled) {\n  cursor: default;\n  opacity: 0.4;\n  pointer-events: none;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --background: rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.07);\n  --border-radius: 10px;\n  --box-shadow: none;\n  --cancel-button-color: var(--ion-color-primary, #0054e9);\n  --clear-button-color: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n  --color: var(--ion-text-color, #000);\n  --icon-color: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n  -webkit-padding-start: 12px;\n  padding-inline-start: 12px;\n  -webkit-padding-end: 12px;\n  padding-inline-end: 12px;\n  padding-top: 12px;\n  padding-bottom: 12px;\n  min-height: 60px;\n  contain: content;\n}\n\n.searchbar-input-container {\n  min-height: 36px;\n}\n\n.searchbar-search-icon {\n  -webkit-margin-start: calc(50% - 60px);\n  margin-inline-start: calc(50% - 60px);\n  top: 0;\n  position: absolute;\n  width: 1.375rem;\n  height: 100%;\n  contain: strict;\n}\n.searchbar-search-icon {\n  inset-inline-start: 5px;\n}\n\n.searchbar-input {\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: 6px;\n  padding-bottom: 6px;\n  height: 100%;\n  font-size: 1.0625rem;\n  font-weight: 400;\n  contain: strict;\n}\n\n/**\n * We should only account for the clear button\n * if the clear button is actually visible. Otherwise\n * long text in an input can get cut off when it does not need to.\n */\n:host(.searchbar-has-value.searchbar-should-show-clear) .searchbar-input {\n  -webkit-padding-start: 1.75rem;\n  padding-inline-start: 1.75rem;\n  -webkit-padding-end: 1.75rem;\n  padding-inline-end: 1.75rem;\n}\n\n.searchbar-clear-button {\n  top: 0;\n  background-position: center;\n  position: absolute;\n  width: 1.875rem;\n  height: 100%;\n  border: 0;\n  background-color: transparent;\n}\n.searchbar-clear-button {\n  inset-inline-end: 0;\n}\n\n.searchbar-clear-icon {\n  width: 1.125rem;\n  height: 100%;\n}\n\n.searchbar-cancel-button {\n  -webkit-padding-start: 12px;\n  padding-inline-start: 12px;\n  -webkit-padding-end: 0;\n  padding-inline-end: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  flex-shrink: 0;\n  background-color: transparent;\n  font-size: 17px;\n}\n\n:host(.searchbar-left-aligned) .searchbar-search-icon {\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n}\n\n:host(.searchbar-left-aligned) .searchbar-input {\n  -webkit-padding-start: 1.875rem;\n  padding-inline-start: 1.875rem;\n}\n\n:host(.searchbar-has-focus) .searchbar-cancel-button,\n:host(.searchbar-should-show-cancel) .searchbar-cancel-button,\n:host(.searchbar-animated) .searchbar-cancel-button {\n  display: block;\n}\n\n:host(.searchbar-animated) .searchbar-search-icon,\n:host(.searchbar-animated) .searchbar-input {\n  transition: all 300ms ease;\n}\n\n:host(.searchbar-animated.searchbar-has-focus) .searchbar-cancel-button,\n:host(.searchbar-animated.searchbar-should-show-cancel) .searchbar-cancel-button {\n  opacity: 1;\n  pointer-events: auto;\n}\n\n:host(.searchbar-animated) .searchbar-cancel-button {\n  -webkit-margin-end: -100%;\n  margin-inline-end: -100%;\n  transform: translate3d(0,  0,  0);\n  transition: all 300ms ease;\n  opacity: 0;\n  pointer-events: none;\n}\n\n:host(.searchbar-no-animate) .searchbar-search-icon,\n:host(.searchbar-no-animate) .searchbar-input,\n:host(.searchbar-no-animate) .searchbar-cancel-button {\n  transition-duration: 0ms;\n}\n\n:host(.ion-color) .searchbar-cancel-button {\n  color: var(--ion-color-base);\n}\n\n@media (any-hover: hover) {\n  :host(.ion-color) .searchbar-cancel-button:hover {\n    color: var(--ion-color-tint);\n  }\n}\n:host-context(ion-toolbar) {\n  padding-top: 1px;\n  padding-bottom: 15px;\n  min-height: 52px;\n}\n\n:host-context(ion-toolbar.ion-color):not(.ion-color) {\n  color: inherit;\n}\n\n:host-context(ion-toolbar.ion-color):not(.ion-color) .searchbar-cancel-button {\n  color: currentColor;\n}\n\n:host-context(ion-toolbar.ion-color) .searchbar-search-icon {\n  color: currentColor;\n  opacity: 0.5;\n}\n\n:host-context(ion-toolbar.ion-color):not(.ion-color) .searchbar-input {\n  background: rgba(var(--ion-color-contrast-rgb), 0.07);\n  color: currentColor;\n}\n\n:host-context(ion-toolbar.ion-color):not(.ion-color) .searchbar-clear-button {\n  color: currentColor;\n  opacity: 0.5;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the searchbar input\n   * @prop --box-shadow: Box shadow of the searchbar input\n   * @prop --border-radius: Border radius of the searchbar input\n   * @prop --cancel-button-color: Color of the searchbar cancel button\n   * @prop --clear-button-color: Color of the searchbar clear button\n   * @prop --color: Color of the searchbar text\n   * @prop --icon-color: Color of the searchbar icon\n   * @prop --placeholder-color: Color of the searchbar placeholder\n   * @prop --placeholder-font-style: Font style of the searchbar placeholder\n   * @prop --placeholder-font-weight: Font weight of the searchbar placeholder\n   * @prop --placeholder-opacity: Opacity of the searchbar placeholder\n   */\n  --placeholder-color: initial;\n  --placeholder-font-style: initial;\n  --placeholder-font-weight: initial;\n  --placeholder-opacity: var(--ion-placeholder-opacity, 0.6);\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  display: flex;\n  position: relative;\n  align-items: center;\n  width: 100%;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  box-sizing: border-box;\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-contrast);\n}\n\n:host(.ion-color) .searchbar-input {\n  background: var(--ion-color-base);\n}\n\n:host(.ion-color) .searchbar-clear-button,\n:host(.ion-color) .searchbar-cancel-button,\n:host(.ion-color) .searchbar-search-icon {\n  color: inherit;\n}\n\n.searchbar-search-icon {\n  color: var(--icon-color);\n  pointer-events: none;\n}\n\n.searchbar-input-container {\n  display: block;\n  position: relative;\n  flex-shrink: 1;\n  width: 100%;\n}\n\n.searchbar-input {\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  border-radius: var(--border-radius);\n  display: block;\n  width: 100%;\n  min-height: inherit;\n  border: 0;\n  outline: none;\n  background: var(--background);\n  font-family: inherit;\n  box-shadow: var(--box-shadow);\n  box-sizing: border-box;\n  appearance: none;\n}\n.searchbar-input::placeholder {\n  color: var(--placeholder-color);\n  font-family: inherit;\n  font-style: var(--placeholder-font-style);\n  font-weight: var(--placeholder-font-weight);\n  opacity: var(--placeholder-opacity);\n}\n.searchbar-input::-webkit-search-cancel-button, .searchbar-input::-ms-clear {\n  display: none;\n}\n\n.searchbar-cancel-button {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  display: none;\n  height: 100%;\n  border: 0;\n  outline: none;\n  color: var(--cancel-button-color);\n  cursor: pointer;\n  appearance: none;\n}\n\n.searchbar-cancel-button > div {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n}\n\n.searchbar-clear-button {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  display: none;\n  min-height: 0;\n  outline: none;\n  color: var(--clear-button-color);\n  appearance: none;\n}\n\n/**\n * Normally, we would not want to use :focus\n * here because that would mean tapping the button\n * on mobile would focus it (and keep it focused).\n * However, the clear button always disappears after\n * being activated, so we never get to that state.\n */\n.searchbar-clear-button:focus {\n  opacity: 0.5;\n}\n\n:host(.searchbar-has-value.searchbar-should-show-clear) .searchbar-clear-button {\n  display: block;\n}\n\n:host(.searchbar-disabled) {\n  cursor: default;\n  opacity: 0.4;\n  pointer-events: none;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --background: var(--ion-background-color, #fff);\n  --border-radius: 2px;\n  --box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\n  --cancel-button-color: var(--ion-color-step-900, var(--ion-text-color-step-100, #1a1a1a));\n  --clear-button-color: initial;\n  --color: var(--ion-color-step-850, var(--ion-text-color-step-150, #262626));\n  --icon-color: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n  -webkit-padding-start: 8px;\n  padding-inline-start: 8px;\n  -webkit-padding-end: 8px;\n  padding-inline-end: 8px;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  background: inherit;\n}\n\n.searchbar-search-icon {\n  top: 11px;\n  width: 1.3125rem;\n  height: 1.3125rem;\n}\n.searchbar-search-icon {\n  inset-inline-start: 16px;\n}\n\n.searchbar-cancel-button {\n  /**\n   * The left edge of the cancel button\n   * should align with the left edge\n   * of the back button if the searchbar\n   * is used in a toolbar.\n   */\n  top: 0;\n  background-color: transparent;\n  font-size: 1.5em;\n}\n.searchbar-cancel-button {\n  inset-inline-start: 9px;\n}\n\n.searchbar-search-icon,\n.searchbar-cancel-button {\n  position: absolute;\n}\n\n.searchbar-search-icon.ion-activated,\n.searchbar-cancel-button.ion-activated {\n  background-color: transparent;\n}\n\n.searchbar-input {\n  -webkit-padding-start: 3.4375rem;\n  padding-inline-start: 3.4375rem;\n  -webkit-padding-end: 3.4375rem;\n  padding-inline-end: 3.4375rem;\n  padding-top: 0.375rem;\n  padding-bottom: 0.375rem;\n  background-position: left 8px center;\n  height: auto;\n  font-size: 1rem;\n  font-weight: 400;\n  line-height: 30px;\n}\n:host-context([dir=rtl]) .searchbar-input {\n  background-position: right 8px center;\n}\n\n[dir=rtl] .searchbar-input {\n  background-position: right 8px center;\n}\n\n@supports selector(:dir(rtl)) {\n  .searchbar-input:dir(rtl) {\n    background-position: right 8px center;\n  }\n}\n\n.searchbar-clear-button {\n  top: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  position: absolute;\n  height: 100%;\n  border: 0;\n  background-color: transparent;\n}\n.searchbar-clear-button {\n  inset-inline-end: 13px;\n}\n\n.searchbar-clear-button.ion-activated {\n  background-color: transparent;\n}\n\n.searchbar-clear-icon {\n  width: 1.375rem;\n  height: 100%;\n}\n\n:host(.searchbar-has-focus) .searchbar-search-icon {\n  display: block;\n}\n\n:host(.searchbar-has-focus) .searchbar-cancel-button,\n:host(.searchbar-should-show-cancel) .searchbar-cancel-button {\n  display: block;\n}\n\n:host(.searchbar-has-focus) .searchbar-cancel-button + .searchbar-search-icon,\n:host(.searchbar-should-show-cancel) .searchbar-cancel-button + .searchbar-search-icon {\n  display: none;\n}\n\n:host-context(ion-toolbar) {\n  -webkit-padding-start: 7px;\n  padding-inline-start: 7px;\n  -webkit-padding-end: 7px;\n  padding-inline-end: 7px;\n  padding-top: 3px;\n  padding-bottom: 3px;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, forceUpdate, h } from \"@stencil/core\";\nimport { debounceEvent, raf, componentOnReady, inheritAttributes } from \"../../utils/helpers\";\nimport { isRTL } from \"../../utils/rtl/index\";\nimport { createColorClasses } from \"../../utils/theme\";\nimport { arrowBackSharp, closeCircle, closeSharp, searchOutline, searchSharp } from \"ionicons/icons\";\nimport { config } from \"../../global/config\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\nexport class Searchbar {\n    constructor() {\n        this.isCancelVisible = false;\n        this.shouldAlignLeft = true;\n        this.inputId = `ion-searchbar-${searchbarIds++}`;\n        this.inheritedAttributes = {};\n        /**\n         * Clears the input field and triggers the control change.\n         */\n        this.onClearInput = async (shouldFocus) => {\n            this.ionClear.emit();\n            return new Promise((resolve) => {\n                // setTimeout() fixes https://github.com/ionic-team/ionic/issues/7527\n                // wait for 4 frames\n                setTimeout(() => {\n                    const value = this.getValue();\n                    if (value !== '') {\n                        this.value = '';\n                        this.emitInputChange();\n                        /**\n                         * When tapping clear button\n                         * ensure input is focused after\n                         * clearing input so users\n                         * can quickly start typing.\n                         */\n                        if (shouldFocus && !this.focused) {\n                            this.setFocus();\n                            /**\n                             * The setFocus call above will clear focusedValue,\n                             * but ionChange will never have gotten a chance to\n                             * fire. Manually revert focusedValue so onBlur can\n                             * compare against what was in the box before the clear.\n                             */\n                            this.focusedValue = value;\n                        }\n                    }\n                    resolve();\n                }, 16 * 4);\n            });\n        };\n        /**\n         * Clears the input field and tells the input to blur since\n         * the clearInput function doesn't want the input to blur\n         * then calls the custom cancel function if the user passed one in.\n         */\n        this.onCancelSearchbar = async (ev) => {\n            if (ev) {\n                ev.preventDefault();\n                ev.stopPropagation();\n            }\n            this.ionCancel.emit();\n            // get cached values before clearing the input\n            const value = this.getValue();\n            const focused = this.focused;\n            await this.onClearInput();\n            /**\n             * If there used to be something in the box, and we weren't focused\n             * beforehand (meaning no blur fired that would already handle this),\n             * manually fire ionChange.\n             */\n            if (value && !focused) {\n                this.emitValueChange(ev);\n            }\n            if (this.nativeInput) {\n                this.nativeInput.blur();\n            }\n        };\n        /**\n         * Update the Searchbar input value when the input changes\n         */\n        this.onInput = (ev) => {\n            const input = ev.target;\n            if (input) {\n                this.value = input.value;\n            }\n            this.emitInputChange(ev);\n        };\n        this.onChange = (ev) => {\n            this.emitValueChange(ev);\n        };\n        /**\n         * Sets the Searchbar to not focused and checks if it should align left\n         * based on whether there is a value in the searchbar or not.\n         */\n        this.onBlur = (ev) => {\n            this.focused = false;\n            this.ionBlur.emit();\n            this.positionElements();\n            if (this.focusedValue !== this.value) {\n                this.emitValueChange(ev);\n            }\n            this.focusedValue = undefined;\n        };\n        /**\n         * Sets the Searchbar to focused and active on input focus.\n         */\n        this.onFocus = () => {\n            this.focused = true;\n            this.focusedValue = this.value;\n            this.ionFocus.emit();\n            this.positionElements();\n        };\n        this.focused = false;\n        this.noAnimate = true;\n        this.color = undefined;\n        this.animated = false;\n        this.autocapitalize = 'off';\n        this.autocomplete = 'off';\n        this.autocorrect = 'off';\n        this.cancelButtonIcon = config.get('backButtonIcon', arrowBackSharp);\n        this.cancelButtonText = 'Cancel';\n        this.clearIcon = undefined;\n        this.debounce = undefined;\n        this.disabled = false;\n        this.inputmode = undefined;\n        this.enterkeyhint = undefined;\n        this.maxlength = undefined;\n        this.minlength = undefined;\n        this.name = this.inputId;\n        this.placeholder = 'Search';\n        this.searchIcon = undefined;\n        this.showCancelButton = 'never';\n        this.showClearButton = 'always';\n        this.spellcheck = false;\n        this.type = 'search';\n        this.value = '';\n    }\n    /**\n     * lang and dir are globally enumerated attributes.\n     * As a result, creating these as properties\n     * can have unintended side effects. Instead, we\n     * listen for attribute changes and inherit them\n     * to the inner `<input>` element.\n     */\n    onLangChanged(newValue) {\n        this.inheritedAttributes = Object.assign(Object.assign({}, this.inheritedAttributes), { lang: newValue });\n        forceUpdate(this);\n    }\n    onDirChanged(newValue) {\n        this.inheritedAttributes = Object.assign(Object.assign({}, this.inheritedAttributes), { dir: newValue });\n        forceUpdate(this);\n    }\n    debounceChanged() {\n        const { ionInput, debounce, originalIonInput } = this;\n        /**\n         * If debounce is undefined, we have to manually revert the ionInput emitter in case\n         * debounce used to be set to a number. Otherwise, the event would stay debounced.\n         */\n        this.ionInput = debounce === undefined ? originalIonInput !== null && originalIonInput !== void 0 ? originalIonInput : ionInput : debounceEvent(ionInput, debounce);\n    }\n    valueChanged() {\n        const inputEl = this.nativeInput;\n        const value = this.getValue();\n        if (inputEl && inputEl.value !== value) {\n            inputEl.value = value;\n        }\n    }\n    showCancelButtonChanged() {\n        requestAnimationFrame(() => {\n            this.positionElements();\n            forceUpdate(this);\n        });\n    }\n    connectedCallback() {\n        this.emitStyle();\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = Object.assign({}, inheritAttributes(this.el, ['lang', 'dir']));\n    }\n    componentDidLoad() {\n        this.originalIonInput = this.ionInput;\n        this.positionElements();\n        this.debounceChanged();\n        setTimeout(() => {\n            this.noAnimate = false;\n        }, 300);\n    }\n    emitStyle() {\n        this.ionStyle.emit({\n            searchbar: true,\n        });\n    }\n    /**\n     * Sets focus on the native `input` in `ion-searchbar`. Use this method instead of the global\n     * `input.focus()`.\n     *\n     * Developers who wish to focus an input when a page enters\n     * should call `setFocus()` in the `ionViewDidEnter()` lifecycle method.\n     *\n     * Developers who wish to focus an input when an overlay is presented\n     * should call `setFocus` after `didPresent` has resolved.\n     *\n     * See [managing focus](/docs/developing/managing-focus) for more information.\n     */\n    async setFocus() {\n        if (this.nativeInput) {\n            this.nativeInput.focus();\n        }\n    }\n    /**\n     * Returns the native `<input>` element used under the hood.\n     */\n    async getInputElement() {\n        /**\n         * If this gets called in certain early lifecycle hooks (ex: Vue onMounted),\n         * nativeInput won't be defined yet with the custom elements build, so wait for it to load in.\n         */\n        if (!this.nativeInput) {\n            await new Promise((resolve) => componentOnReady(this.el, resolve));\n        }\n        return Promise.resolve(this.nativeInput);\n    }\n    /**\n     * Emits an `ionChange` event.\n     *\n     * This API should be called for user committed changes.\n     * This API should not be used for external value changes.\n     */\n    emitValueChange(event) {\n        const { value } = this;\n        // Checks for both null and undefined values\n        const newValue = value == null ? value : value.toString();\n        // Emitting a value change should update the internal state for tracking the focused value\n        this.focusedValue = newValue;\n        this.ionChange.emit({ value: newValue, event });\n    }\n    /**\n     * Emits an `ionInput` event.\n     */\n    emitInputChange(event) {\n        const { value } = this;\n        this.ionInput.emit({ value, event });\n    }\n    /**\n     * Positions the input search icon, placeholder, and the cancel button\n     * based on the input value and if it is focused. (ios only)\n     */\n    positionElements() {\n        const value = this.getValue();\n        const prevAlignLeft = this.shouldAlignLeft;\n        const mode = getIonMode(this);\n        const shouldAlignLeft = !this.animated || value.trim() !== '' || !!this.focused;\n        this.shouldAlignLeft = shouldAlignLeft;\n        if (mode !== 'ios') {\n            return;\n        }\n        if (prevAlignLeft !== shouldAlignLeft) {\n            this.positionPlaceholder();\n        }\n        if (this.animated) {\n            this.positionCancelButton();\n        }\n    }\n    /**\n     * Positions the input placeholder\n     */\n    positionPlaceholder() {\n        const inputEl = this.nativeInput;\n        if (!inputEl) {\n            return;\n        }\n        const rtl = isRTL(this.el);\n        const iconEl = (this.el.shadowRoot || this.el).querySelector('.searchbar-search-icon');\n        if (this.shouldAlignLeft) {\n            inputEl.removeAttribute('style');\n            iconEl.removeAttribute('style');\n        }\n        else {\n            // Create a dummy span to get the placeholder width\n            const doc = document;\n            const tempSpan = doc.createElement('span');\n            tempSpan.innerText = this.placeholder || '';\n            doc.body.appendChild(tempSpan);\n            // Get the width of the span then remove it\n            raf(() => {\n                const textWidth = tempSpan.offsetWidth;\n                tempSpan.remove();\n                // Calculate the input padding\n                const inputLeft = 'calc(50% - ' + textWidth / 2 + 'px)';\n                // Calculate the icon margin\n                /**\n                 * We take the icon width to account\n                 * for any text scales applied to the icon\n                 * such as Dynamic Type on iOS as well as 8px\n                 * of padding.\n                 */\n                const iconLeft = 'calc(50% - ' + (textWidth / 2 + iconEl.clientWidth + 8) + 'px)';\n                // Set the input padding start and icon margin start\n                if (rtl) {\n                    inputEl.style.paddingRight = inputLeft;\n                    iconEl.style.marginRight = iconLeft;\n                }\n                else {\n                    inputEl.style.paddingLeft = inputLeft;\n                    iconEl.style.marginLeft = iconLeft;\n                }\n            });\n        }\n    }\n    /**\n     * Show the iOS Cancel button on focus, hide it offscreen otherwise\n     */\n    positionCancelButton() {\n        const rtl = isRTL(this.el);\n        const cancelButton = (this.el.shadowRoot || this.el).querySelector('.searchbar-cancel-button');\n        const shouldShowCancel = this.shouldShowCancelButton();\n        if (cancelButton !== null && shouldShowCancel !== this.isCancelVisible) {\n            const cancelStyle = cancelButton.style;\n            this.isCancelVisible = shouldShowCancel;\n            if (shouldShowCancel) {\n                if (rtl) {\n                    cancelStyle.marginLeft = '0';\n                }\n                else {\n                    cancelStyle.marginRight = '0';\n                }\n            }\n            else {\n                const offset = cancelButton.offsetWidth;\n                if (offset > 0) {\n                    if (rtl) {\n                        cancelStyle.marginLeft = -offset + 'px';\n                    }\n                    else {\n                        cancelStyle.marginRight = -offset + 'px';\n                    }\n                }\n            }\n        }\n    }\n    getValue() {\n        return this.value || '';\n    }\n    hasValue() {\n        return this.getValue() !== '';\n    }\n    /**\n     * Determines whether or not the cancel button should be visible onscreen.\n     * Cancel button should be shown if one of two conditions applies:\n     * 1. `showCancelButton` is set to `always`.\n     * 2. `showCancelButton` is set to `focus`, and the searchbar has been focused.\n     */\n    shouldShowCancelButton() {\n        if (this.showCancelButton === 'never' || (this.showCancelButton === 'focus' && !this.focused)) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * Determines whether or not the clear button should be visible onscreen.\n     * Clear button should be shown if one of two conditions applies:\n     * 1. `showClearButton` is set to `always`.\n     * 2. `showClearButton` is set to `focus`, and the searchbar has been focused.\n     */\n    shouldShowClearButton() {\n        if (this.showClearButton === 'never' || (this.showClearButton === 'focus' && !this.focused)) {\n            return false;\n        }\n        return true;\n    }\n    render() {\n        const { cancelButtonText, autocapitalize } = this;\n        const animated = this.animated && config.getBoolean('animated', true);\n        const mode = getIonMode(this);\n        const clearIcon = this.clearIcon || (mode === 'ios' ? closeCircle : closeSharp);\n        const searchIcon = this.searchIcon || (mode === 'ios' ? searchOutline : searchSharp);\n        const shouldShowCancelButton = this.shouldShowCancelButton();\n        const cancelButton = this.showCancelButton !== 'never' && (h(\"button\", { key: '753b11f41484edcb2714aa81be8bc7bc0370cb2e', \"aria-label\": cancelButtonText, \"aria-hidden\": shouldShowCancelButton ? undefined : 'true', type: \"button\", tabIndex: mode === 'ios' && !shouldShowCancelButton ? -1 : undefined, onMouseDown: this.onCancelSearchbar, onTouchStart: this.onCancelSearchbar, class: \"searchbar-cancel-button\" }, h(\"div\", { key: 'e42fe29767fb06a5e4f9060c3f8a47b040528e4f', \"aria-hidden\": \"true\" }, mode === 'md' ? (h(\"ion-icon\", { \"aria-hidden\": \"true\", mode: mode, icon: this.cancelButtonIcon, lazy: false })) : (cancelButtonText))));\n        return (h(Host, { key: 'da667148dc3300f4a8473315d04e6560194f51dc', role: \"search\", \"aria-disabled\": this.disabled ? 'true' : null, class: createColorClasses(this.color, {\n                [mode]: true,\n                'searchbar-animated': animated,\n                'searchbar-disabled': this.disabled,\n                'searchbar-no-animate': animated && this.noAnimate,\n                'searchbar-has-value': this.hasValue(),\n                'searchbar-left-aligned': this.shouldAlignLeft,\n                'searchbar-has-focus': this.focused,\n                'searchbar-should-show-clear': this.shouldShowClearButton(),\n                'searchbar-should-show-cancel': this.shouldShowCancelButton(),\n            }) }, h(\"div\", { key: 'b1a28467d41dd989e6aee10c7c9fb70a7c1534f1', class: \"searchbar-input-container\" }, h(\"input\", Object.assign({ key: '4983f67966f79b2846c1369c7feaa0c568bc3025', \"aria-label\": \"search text\", disabled: this.disabled, ref: (el) => (this.nativeInput = el), class: \"searchbar-input\", inputMode: this.inputmode, enterKeyHint: this.enterkeyhint, name: this.name, onInput: this.onInput, onChange: this.onChange, onBlur: this.onBlur, onFocus: this.onFocus, minLength: this.minlength, maxLength: this.maxlength, placeholder: this.placeholder, type: this.type, value: this.getValue(), autoCapitalize: autocapitalize === 'default' ? undefined : autocapitalize, autoComplete: this.autocomplete, autoCorrect: this.autocorrect, spellcheck: this.spellcheck }, this.inheritedAttributes)), mode === 'md' && cancelButton, h(\"ion-icon\", { key: 'b6576522762a83a7d9977f312dce433c2aaa2490', \"aria-hidden\": \"true\", mode: mode, icon: searchIcon, lazy: false, class: \"searchbar-search-icon\" }), h(\"button\", { key: 'c460a3be7ffed2ddf4b08f64ea4ec6843586a726', \"aria-label\": \"reset\", type: \"button\", \"no-blur\": true, class: \"searchbar-clear-button\", onPointerDown: (ev) => {\n                /**\n                 * This prevents mobile browsers from\n                 * blurring the input when the clear\n                 * button is activated.\n                 */\n                ev.preventDefault();\n            }, onClick: () => this.onClearInput(true) }, h(\"ion-icon\", { key: 'e2e5dcdeca46d2588642e7b9f05d396f6e0332a9', \"aria-hidden\": \"true\", mode: mode, icon: clearIcon, lazy: false, class: \"searchbar-clear-icon\" }))), mode === 'ios' && cancelButton));\n    }\n    static get is() { return \"ion-searchbar\"; }\n    static get encapsulation() { return \"scoped\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"searchbar.ios.scss\"],\n            \"md\": [\"searchbar.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"searchbar.ios.css\"],\n            \"md\": [\"searchbar.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"animated\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, enable searchbar animation.\"\n                },\n                \"attribute\": \"animated\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"autocapitalize\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\\nAvailable options: `\\\"off\\\"`, `\\\"none\\\"`, `\\\"on\\\"`, `\\\"sentences\\\"`, `\\\"words\\\"`, `\\\"characters\\\"`.\"\n                },\n                \"attribute\": \"autocapitalize\",\n                \"reflect\": false,\n                \"defaultValue\": \"'off'\"\n            },\n            \"autocomplete\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"AutocompleteTypes\",\n                    \"resolved\": \"\\\"name\\\" | \\\"email\\\" | \\\"tel\\\" | \\\"url\\\" | \\\"on\\\" | \\\"off\\\" | \\\"honorific-prefix\\\" | \\\"given-name\\\" | \\\"additional-name\\\" | \\\"family-name\\\" | \\\"honorific-suffix\\\" | \\\"nickname\\\" | \\\"username\\\" | \\\"new-password\\\" | \\\"current-password\\\" | \\\"one-time-code\\\" | \\\"organization-title\\\" | \\\"organization\\\" | \\\"street-address\\\" | \\\"address-line1\\\" | \\\"address-line2\\\" | \\\"address-line3\\\" | \\\"address-level4\\\" | \\\"address-level3\\\" | \\\"address-level2\\\" | \\\"address-level1\\\" | \\\"country\\\" | \\\"country-name\\\" | \\\"postal-code\\\" | \\\"cc-name\\\" | \\\"cc-given-name\\\" | \\\"cc-additional-name\\\" | \\\"cc-family-name\\\" | \\\"cc-number\\\" | \\\"cc-exp\\\" | \\\"cc-exp-month\\\" | \\\"cc-exp-year\\\" | \\\"cc-csc\\\" | \\\"cc-type\\\" | \\\"transaction-currency\\\" | \\\"transaction-amount\\\" | \\\"language\\\" | \\\"bday\\\" | \\\"bday-day\\\" | \\\"bday-month\\\" | \\\"bday-year\\\" | \\\"sex\\\" | \\\"tel-country-code\\\" | \\\"tel-national\\\" | \\\"tel-area-code\\\" | \\\"tel-local\\\" | \\\"tel-extension\\\" | \\\"impp\\\" | \\\"photo\\\"\",\n                    \"references\": {\n                        \"AutocompleteTypes\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::AutocompleteTypes\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Set the input's autocomplete property.\"\n                },\n                \"attribute\": \"autocomplete\",\n                \"reflect\": false,\n                \"defaultValue\": \"'off'\"\n            },\n            \"autocorrect\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'on' | 'off'\",\n                    \"resolved\": \"\\\"off\\\" | \\\"on\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Set the input's autocorrect property.\"\n                },\n                \"attribute\": \"autocorrect\",\n                \"reflect\": false,\n                \"defaultValue\": \"'off'\"\n            },\n            \"cancelButtonIcon\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Set the cancel button icon. Only applies to `md` mode.\\nDefaults to `arrow-back-sharp`.\"\n                },\n                \"attribute\": \"cancel-button-icon\",\n                \"reflect\": false,\n                \"defaultValue\": \"config.get('backButtonIcon', arrowBackSharp) as string\"\n            },\n            \"cancelButtonText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Set the the cancel button text. Only applies to `ios` mode.\"\n                },\n                \"attribute\": \"cancel-button-text\",\n                \"reflect\": false,\n                \"defaultValue\": \"'Cancel'\"\n            },\n            \"clearIcon\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Set the clear icon. Defaults to `close-circle` for `ios` and `close-sharp` for `md`.\"\n                },\n                \"attribute\": \"clear-icon\",\n                \"reflect\": false\n            },\n            \"debounce\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Set the amount of time, in milliseconds, to wait to trigger the `ionInput` event after each keystroke.\"\n                },\n                \"attribute\": \"debounce\",\n                \"reflect\": false\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the input.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"inputmode\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'\",\n                    \"resolved\": \"\\\"decimal\\\" | \\\"email\\\" | \\\"none\\\" | \\\"numeric\\\" | \\\"search\\\" | \\\"tel\\\" | \\\"text\\\" | \\\"url\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A hint to the browser for which keyboard to display.\\nPossible values: `\\\"none\\\"`, `\\\"text\\\"`, `\\\"tel\\\"`, `\\\"url\\\"`,\\n`\\\"email\\\"`, `\\\"numeric\\\"`, `\\\"decimal\\\"`, and `\\\"search\\\"`.\"\n                },\n                \"attribute\": \"inputmode\",\n                \"reflect\": false\n            },\n            \"enterkeyhint\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'\",\n                    \"resolved\": \"\\\"done\\\" | \\\"enter\\\" | \\\"go\\\" | \\\"next\\\" | \\\"previous\\\" | \\\"search\\\" | \\\"send\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A hint to the browser for which enter key to display.\\nPossible values: `\\\"enter\\\"`, `\\\"done\\\"`, `\\\"go\\\"`, `\\\"next\\\"`,\\n`\\\"previous\\\"`, `\\\"search\\\"`, and `\\\"send\\\"`.\"\n                },\n                \"attribute\": \"enterkeyhint\",\n                \"reflect\": false\n            },\n            \"maxlength\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"This attribute specifies the maximum number of characters that the user can enter.\"\n                },\n                \"attribute\": \"maxlength\",\n                \"reflect\": false\n            },\n            \"minlength\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"This attribute specifies the minimum number of characters that the user can enter.\"\n                },\n                \"attribute\": \"minlength\",\n                \"reflect\": false\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If used in a form, set the name of the control, which is submitted with the form data.\"\n                },\n                \"attribute\": \"name\",\n                \"reflect\": false,\n                \"defaultValue\": \"this.inputId\"\n            },\n            \"placeholder\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Set the input's placeholder.\\n`placeholder` can accept either plaintext or HTML as a string.\\nTo display characters normally reserved for HTML, they\\nmust be escaped. For example `<Ionic>` would become\\n`&lt;Ionic&gt;`\\n\\nFor more information: [Security Documentation](https://ionicframework.com/docs/faq/security)\"\n                },\n                \"attribute\": \"placeholder\",\n                \"reflect\": false,\n                \"defaultValue\": \"'Search'\"\n            },\n            \"searchIcon\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The icon to use as the search icon. Defaults to `search-outline` in\\n`ios` mode and `search-sharp` in `md` mode.\"\n                },\n                \"attribute\": \"search-icon\",\n                \"reflect\": false\n            },\n            \"showCancelButton\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'never' | 'focus' | 'always'\",\n                    \"resolved\": \"\\\"always\\\" | \\\"focus\\\" | \\\"never\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Sets the behavior for the cancel button. Defaults to `\\\"never\\\"`.\\nSetting to `\\\"focus\\\"` shows the cancel button on focus.\\nSetting to `\\\"never\\\"` hides the cancel button.\\nSetting to `\\\"always\\\"` shows the cancel button regardless\\nof focus state.\"\n                },\n                \"attribute\": \"show-cancel-button\",\n                \"reflect\": false,\n                \"defaultValue\": \"'never'\"\n            },\n            \"showClearButton\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'never' | 'focus' | 'always'\",\n                    \"resolved\": \"\\\"always\\\" | \\\"focus\\\" | \\\"never\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Sets the behavior for the clear button. Defaults to `\\\"focus\\\"`.\\nSetting to `\\\"focus\\\"` shows the clear button on focus if the\\ninput is not empty.\\nSetting to `\\\"never\\\"` hides the clear button.\\nSetting to `\\\"always\\\"` shows the clear button regardless\\nof focus state, but only if the input is not empty.\"\n                },\n                \"attribute\": \"show-clear-button\",\n                \"reflect\": false,\n                \"defaultValue\": \"'always'\"\n            },\n            \"spellcheck\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, enable spellcheck on the input.\"\n                },\n                \"attribute\": \"spellcheck\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"type\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'text' | 'password' | 'email' | 'number' | 'search' | 'tel' | 'url'\",\n                    \"resolved\": \"\\\"email\\\" | \\\"number\\\" | \\\"password\\\" | \\\"search\\\" | \\\"tel\\\" | \\\"text\\\" | \\\"url\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Set the type of the input.\"\n                },\n                \"attribute\": \"type\",\n                \"reflect\": false,\n                \"defaultValue\": \"'search'\"\n            },\n            \"value\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"string | null\",\n                    \"resolved\": \"null | string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"the value of the searchbar.\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false,\n                \"defaultValue\": \"''\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"focused\": {},\n            \"noAnimate\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionInput\",\n                \"name\": \"ionInput\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the `value` of the `ion-searchbar` element has changed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"SearchbarInputEventDetail\",\n                    \"resolved\": \"SearchbarInputEventDetail\",\n                    \"references\": {\n                        \"SearchbarInputEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./searchbar-interface\",\n                            \"id\": \"src/components/searchbar/searchbar-interface.ts::SearchbarInputEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionChange\",\n                \"name\": \"ionChange\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The `ionChange` event is fired for `<ion-searchbar>` elements when the user\\nmodifies the element's value. Unlike the `ionInput` event, the `ionChange`\\nevent is not necessarily fired for each alteration to an element's value.\\n\\nThe `ionChange` event is fired when the value has been committed\\nby the user. This can happen when the element loses focus or\\nwhen the \\\"Enter\\\" key is pressed. `ionChange` can also fire\\nwhen clicking the clear or cancel buttons.\"\n                },\n                \"complexType\": {\n                    \"original\": \"SearchbarChangeEventDetail\",\n                    \"resolved\": \"SearchbarChangeEventDetail\",\n                    \"references\": {\n                        \"SearchbarChangeEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./searchbar-interface\",\n                            \"id\": \"src/components/searchbar/searchbar-interface.ts::SearchbarChangeEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionCancel\",\n                \"name\": \"ionCancel\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the cancel button is clicked.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionClear\",\n                \"name\": \"ionClear\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the clear input button is clicked.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionBlur\",\n                \"name\": \"ionBlur\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the input loses focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionFocus\",\n                \"name\": \"ionFocus\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the input has focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionStyle\",\n                \"name\": \"ionStyle\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Emitted when the styles change.\"\n                },\n                \"complexType\": {\n                    \"original\": \"StyleEventDetail\",\n                    \"resolved\": \"StyleEventDetail\",\n                    \"references\": {\n                        \"StyleEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::StyleEventDetail\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"setFocus\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Sets focus on the native `input` in `ion-searchbar`. Use this method instead of the global\\n`input.focus()`.\\n\\nDevelopers who wish to focus an input when a page enters\\nshould call `setFocus()` in the `ionViewDidEnter()` lifecycle method.\\n\\nDevelopers who wish to focus an input when an overlay is presented\\nshould call `setFocus` after `didPresent` has resolved.\\n\\nSee [managing focus](/docs/developing/managing-focus) for more information.\",\n                    \"tags\": []\n                }\n            },\n            \"getInputElement\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<HTMLInputElement>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"HTMLInputElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLInputElement\"\n                        }\n                    },\n                    \"return\": \"Promise<HTMLInputElement>\"\n                },\n                \"docs\": {\n                    \"text\": \"Returns the native `<input>` element used under the hood.\",\n                    \"tags\": []\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"lang\",\n                \"methodName\": \"onLangChanged\"\n            }, {\n                \"propName\": \"dir\",\n                \"methodName\": \"onDirChanged\"\n            }, {\n                \"propName\": \"debounce\",\n                \"methodName\": \"debounceChanged\"\n            }, {\n                \"propName\": \"value\",\n                \"methodName\": \"valueChanged\"\n            }, {\n                \"propName\": \"showCancelButton\",\n                \"methodName\": \"showCancelButtonChanged\"\n            }];\n    }\n}\nlet searchbarIds = 0;\n"],"mappings":"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"}