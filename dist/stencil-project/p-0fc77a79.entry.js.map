{"version":3,"names":["checkboxIosCss","IonCheckboxIosStyle0","checkboxMdCss","IonCheckboxMdStyle0","Checkbox","constructor","hostRef","this","inputId","checkboxIds","inheritedAttributes","setChecked","state","isChecked","checked","ionChange","emit","value","toggleChecked","ev","preventDefault","setFocus","indeterminate","onFocus","ionFocus","onBlur","ionBlur","onClick","disabled","color","undefined","name","labelPlacement","justify","alignment","componentWillLoad","Object","assign","inheritAriaAttributes","el","focusEl","focus","render","getSVGPath","mode","getIonMode","path","renderHiddenInput","h","Host","key","class","createColorClasses","hostContext","interactive","type","id","onChange","ref","textContent","part","viewBox","d","itemIosCss","IonItemIosStyle0","itemMdCss","IonItemMdStyle0","Item","labelColorStyles","itemStyles","Map","inheritedAriaAttributes","multipleInputs","focusable","button","detail","detailIcon","chevronForward","download","href","rel","lines","routerAnimation","routerDirection","target","buttonChanged","isFocusable","labelColorChanged","itemStyle","stopPropagation","tagName","updatedStyles","newStyles","childStyles","get","hasStyleChange","keys","forEach","itemKey","length","set","forceUpdate","connectedCallback","hasStartEl","inheritAttributes","componentDidLoad","raf","setMultipleInputs","covers","querySelectorAll","inputs","clickables","isClickable","hasCover","canActivate","focusableChild","querySelector","startEl","classList","add","getFirstInteractive","controls","clickable","TagType","attrs","clickFn","firstInteractive","openURL","composedPath","isTrusted","clickedWithinShadowRoot","shadowRoot","contains","click","showDetail","ariaDisabled","inList","firstInteractiveNeedsPointerCursor","includes","item","document","dir","role","icon","lazy","labelIosCss","IonLabelIosStyle0","labelMdCss","IonLabelMdStyle0","Label","inRange","position","noAnimate","closest","emitStyle","emitColor","setTimeout","colorChanged","positionChanged","ionColor","ionStyle","label","listIosCss","IonListIosStyle0","listMdCss","IonListMdStyle0","List","inset","closeSlidingItems","closeOpened","listHeaderIosCss","IonListHeaderIosStyle0","listHeaderMdCss","IonListHeaderMdStyle0","ListHeader","radioIosCss","IonRadioIosStyle0","radioMdCss","IonRadioMdStyle0","Radio","radioButtonIds","radioGroup","updateState","compareWith","radioGroupValue","isOptionSelected","allowEmptySelection","buttonTabindex","valueChanged","setButtonTabindex","addEventListener","disconnectedCallback","removeEventListener","hasLabel","renderRadioControl","inItem","tabindex","RadioGroup","radioGroupIds","labelId","setRadioTabindex","radios","getRadios","first","find","radio","selectedRadio","currentValue","newValue","emitValueChange","ionValueChange","header","Array","from","event","onKeydown","inSelectPopover","filter","index","findIndex","current","next","previousValue"],"sources":["node_modules/@ionic/core/dist/collection/components/checkbox/checkbox.ios.css?tag=ion-checkbox&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/checkbox/checkbox.md.css?tag=ion-checkbox&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/checkbox/checkbox.js","node_modules/@ionic/core/dist/collection/components/item/item.ios.css?tag=ion-item&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/item/item.md.css?tag=ion-item&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/item/item.js","node_modules/@ionic/core/dist/collection/components/label/label.ios.css?tag=ion-label&mode=ios&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/label/label.md.css?tag=ion-label&mode=md&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/label/label.js","node_modules/@ionic/core/dist/collection/components/list/list.ios.css?tag=ion-list&mode=ios","node_modules/@ionic/core/dist/collection/components/list/list.md.css?tag=ion-list&mode=md","node_modules/@ionic/core/dist/collection/components/list/list.js","node_modules/@ionic/core/dist/collection/components/list-header/list-header.ios.css?tag=ion-list-header&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/list-header/list-header.md.css?tag=ion-list-header&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/list-header/list-header.js","node_modules/@ionic/core/dist/collection/components/radio/radio.ios.css?tag=ion-radio&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/radio/radio.md.css?tag=ion-radio&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/radio/radio.js","node_modules/@ionic/core/dist/collection/components/radio-group/radio-group.js"],"sourcesContent":["/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --size: Size of the checkbox icon\n   *\n   * @prop --checkbox-background: Background of the checkbox icon\n   * @prop --checkbox-background-checked: Background of the checkbox icon when checked\n   *\n   * @prop --border-color: Border color of the checkbox icon\n   * @prop --border-radius: Border radius of the checkbox icon\n   * @prop --border-width: Border width of the checkbox icon\n   * @prop --border-style: Border style of the checkbox icon\n   * @prop --border-color-checked: Border color of the checkbox icon when checked\n   *\n   * @prop --transition: Transition of the checkbox icon\n   *\n   * @prop --checkmark-color: Color of the checkbox checkmark when checked\n   * @prop --checkmark-width: Stroke width of the checkbox checkmark\n   */\n  --checkbox-background-checked: var(--ion-color-primary, #0054e9);\n  --border-color-checked: var(--ion-color-primary, #0054e9);\n  --checkmark-color: var(--ion-color-primary-contrast, #fff);\n  --transition: none;\n  display: inline-block;\n  position: relative;\n  cursor: pointer;\n  user-select: none;\n  z-index: 2;\n}\n\n:host(.in-item) {\n  flex: 1 1 0;\n  width: 100%;\n  height: 100%;\n}\n\n/**\n * Checkbox can be slotted\n * in components such as item and\n * toolbar which is why we do not\n * limit the below behavior to just ion-item.\n */\n:host([slot=start]),\n:host([slot=end]) {\n  width: auto;\n}\n\n:host(.ion-color) {\n  --checkbox-background-checked: var(--ion-color-base);\n  --border-color-checked: var(--ion-color-base);\n  --checkmark-color: var(--ion-color-contrast);\n}\n\n.checkbox-wrapper {\n  display: flex;\n  flex-grow: 1;\n  align-items: center;\n  height: inherit;\n  cursor: inherit;\n}\n\n.label-text-wrapper {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n:host(.in-item) .label-text-wrapper {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n:host(.in-item.checkbox-label-placement-stacked) .label-text-wrapper {\n  margin-top: 10px;\n  margin-bottom: 16px;\n}\n\n:host(.in-item.checkbox-label-placement-stacked) .native-wrapper {\n  margin-bottom: 10px;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden {\n  display: none;\n}\n\ninput {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  clip: rect(0 0 0 0);\n  opacity: 0;\n  overflow: hidden;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n.native-wrapper {\n  display: flex;\n  align-items: center;\n}\n\n.checkbox-icon {\n  border-radius: var(--border-radius);\n  position: relative;\n  width: var(--size);\n  height: var(--size);\n  transition: var(--transition);\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  background: var(--checkbox-background);\n  box-sizing: border-box;\n}\n\n.checkbox-icon path {\n  fill: none;\n  stroke: var(--checkmark-color);\n  stroke-width: var(--checkmark-width);\n  opacity: 0;\n}\n\n:host(.checkbox-justify-space-between) .checkbox-wrapper {\n  justify-content: space-between;\n}\n\n:host(.checkbox-justify-start) .checkbox-wrapper {\n  justify-content: start;\n}\n\n:host(.checkbox-justify-end) .checkbox-wrapper {\n  justify-content: end;\n}\n\n:host(.checkbox-alignment-start) .checkbox-wrapper {\n  align-items: start;\n}\n\n:host(.checkbox-alignment-center) .checkbox-wrapper {\n  align-items: center;\n}\n\n/**\n * Label is on the left of the checkbox in LTR and\n * on the right in RTL.\n */\n:host(.checkbox-label-placement-start) .checkbox-wrapper {\n  flex-direction: row;\n}\n\n:host(.checkbox-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the checkbox should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n/**\n * Label is on the right of the checkbox in LTR and\n * on the left in RTL.\n */\n:host(.checkbox-label-placement-end) .checkbox-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the checkbox should be on the start\n * when the label sits at the end.\n */\n:host(.checkbox-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n}\n\n:host(.checkbox-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the checkbox should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n/**\n * Label is on the left of the checkbox in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.checkbox-label-placement-fixed) .label-text-wrapper {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n/**\n * Label is on top of the checkbox.\n */\n:host(.checkbox-label-placement-stacked) .checkbox-wrapper {\n  flex-direction: column;\n}\n\n:host(.checkbox-label-placement-stacked) .label-text-wrapper {\n  transform: scale(0.75);\n  /**\n   * The margin between the label and\n   * the checkbox should be on the bottom\n   * when the label sits at the top.\n   */\n  margin-left: 0;\n  margin-right: 0;\n  margin-bottom: 16px;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the checkbox.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n:host(.checkbox-label-placement-stacked.checkbox-alignment-start) .label-text-wrapper {\n  transform-origin: left top;\n}\n:host-context([dir=rtl]):host(.checkbox-label-placement-stacked.checkbox-alignment-start) .label-text-wrapper, :host-context([dir=rtl]).checkbox-label-placement-stacked.checkbox-alignment-start .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.checkbox-label-placement-stacked.checkbox-alignment-start:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n:host(.checkbox-label-placement-stacked.checkbox-alignment-center) .label-text-wrapper {\n  transform-origin: center top;\n}\n:host-context([dir=rtl]):host(.checkbox-label-placement-stacked.checkbox-alignment-center) .label-text-wrapper, :host-context([dir=rtl]).checkbox-label-placement-stacked.checkbox-alignment-center .label-text-wrapper {\n  transform-origin: calc(100% - center) top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.checkbox-label-placement-stacked.checkbox-alignment-center:dir(rtl)) .label-text-wrapper {\n    transform-origin: calc(100% - center) top;\n  }\n}\n\n:host(.checkbox-checked) .checkbox-icon,\n:host(.checkbox-indeterminate) .checkbox-icon {\n  border-color: var(--border-color-checked);\n  background: var(--checkbox-background-checked);\n}\n\n:host(.checkbox-checked) .checkbox-icon path,\n:host(.checkbox-indeterminate) .checkbox-icon path {\n  opacity: 1;\n}\n\n:host(.checkbox-disabled) {\n  pointer-events: none;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --border-radius: 50%;\n  --border-width: 0.125rem;\n  --border-style: solid;\n  --border-color: rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.23);\n  --checkbox-background: var(--ion-item-background, var(--ion-background-color, #fff));\n  --size: min(1.375rem, 55.836px);\n  --checkmark-width: 1.5px;\n}\n\n:host(.checkbox-disabled) {\n  opacity: 0.3;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --size: Size of the checkbox icon\n   *\n   * @prop --checkbox-background: Background of the checkbox icon\n   * @prop --checkbox-background-checked: Background of the checkbox icon when checked\n   *\n   * @prop --border-color: Border color of the checkbox icon\n   * @prop --border-radius: Border radius of the checkbox icon\n   * @prop --border-width: Border width of the checkbox icon\n   * @prop --border-style: Border style of the checkbox icon\n   * @prop --border-color-checked: Border color of the checkbox icon when checked\n   *\n   * @prop --transition: Transition of the checkbox icon\n   *\n   * @prop --checkmark-color: Color of the checkbox checkmark when checked\n   * @prop --checkmark-width: Stroke width of the checkbox checkmark\n   */\n  --checkbox-background-checked: var(--ion-color-primary, #0054e9);\n  --border-color-checked: var(--ion-color-primary, #0054e9);\n  --checkmark-color: var(--ion-color-primary-contrast, #fff);\n  --transition: none;\n  display: inline-block;\n  position: relative;\n  cursor: pointer;\n  user-select: none;\n  z-index: 2;\n}\n\n:host(.in-item) {\n  flex: 1 1 0;\n  width: 100%;\n  height: 100%;\n}\n\n/**\n * Checkbox can be slotted\n * in components such as item and\n * toolbar which is why we do not\n * limit the below behavior to just ion-item.\n */\n:host([slot=start]),\n:host([slot=end]) {\n  width: auto;\n}\n\n:host(.ion-color) {\n  --checkbox-background-checked: var(--ion-color-base);\n  --border-color-checked: var(--ion-color-base);\n  --checkmark-color: var(--ion-color-contrast);\n}\n\n.checkbox-wrapper {\n  display: flex;\n  flex-grow: 1;\n  align-items: center;\n  height: inherit;\n  cursor: inherit;\n}\n\n.label-text-wrapper {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n:host(.in-item) .label-text-wrapper {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n:host(.in-item.checkbox-label-placement-stacked) .label-text-wrapper {\n  margin-top: 10px;\n  margin-bottom: 16px;\n}\n\n:host(.in-item.checkbox-label-placement-stacked) .native-wrapper {\n  margin-bottom: 10px;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden {\n  display: none;\n}\n\ninput {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  clip: rect(0 0 0 0);\n  opacity: 0;\n  overflow: hidden;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n.native-wrapper {\n  display: flex;\n  align-items: center;\n}\n\n.checkbox-icon {\n  border-radius: var(--border-radius);\n  position: relative;\n  width: var(--size);\n  height: var(--size);\n  transition: var(--transition);\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  background: var(--checkbox-background);\n  box-sizing: border-box;\n}\n\n.checkbox-icon path {\n  fill: none;\n  stroke: var(--checkmark-color);\n  stroke-width: var(--checkmark-width);\n  opacity: 0;\n}\n\n:host(.checkbox-justify-space-between) .checkbox-wrapper {\n  justify-content: space-between;\n}\n\n:host(.checkbox-justify-start) .checkbox-wrapper {\n  justify-content: start;\n}\n\n:host(.checkbox-justify-end) .checkbox-wrapper {\n  justify-content: end;\n}\n\n:host(.checkbox-alignment-start) .checkbox-wrapper {\n  align-items: start;\n}\n\n:host(.checkbox-alignment-center) .checkbox-wrapper {\n  align-items: center;\n}\n\n/**\n * Label is on the left of the checkbox in LTR and\n * on the right in RTL.\n */\n:host(.checkbox-label-placement-start) .checkbox-wrapper {\n  flex-direction: row;\n}\n\n:host(.checkbox-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the checkbox should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n/**\n * Label is on the right of the checkbox in LTR and\n * on the left in RTL.\n */\n:host(.checkbox-label-placement-end) .checkbox-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the checkbox should be on the start\n * when the label sits at the end.\n */\n:host(.checkbox-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n}\n\n:host(.checkbox-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the checkbox should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n/**\n * Label is on the left of the checkbox in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.checkbox-label-placement-fixed) .label-text-wrapper {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n/**\n * Label is on top of the checkbox.\n */\n:host(.checkbox-label-placement-stacked) .checkbox-wrapper {\n  flex-direction: column;\n}\n\n:host(.checkbox-label-placement-stacked) .label-text-wrapper {\n  transform: scale(0.75);\n  /**\n   * The margin between the label and\n   * the checkbox should be on the bottom\n   * when the label sits at the top.\n   */\n  margin-left: 0;\n  margin-right: 0;\n  margin-bottom: 16px;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the checkbox.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n:host(.checkbox-label-placement-stacked.checkbox-alignment-start) .label-text-wrapper {\n  transform-origin: left top;\n}\n:host-context([dir=rtl]):host(.checkbox-label-placement-stacked.checkbox-alignment-start) .label-text-wrapper, :host-context([dir=rtl]).checkbox-label-placement-stacked.checkbox-alignment-start .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.checkbox-label-placement-stacked.checkbox-alignment-start:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n:host(.checkbox-label-placement-stacked.checkbox-alignment-center) .label-text-wrapper {\n  transform-origin: center top;\n}\n:host-context([dir=rtl]):host(.checkbox-label-placement-stacked.checkbox-alignment-center) .label-text-wrapper, :host-context([dir=rtl]).checkbox-label-placement-stacked.checkbox-alignment-center .label-text-wrapper {\n  transform-origin: calc(100% - center) top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.checkbox-label-placement-stacked.checkbox-alignment-center:dir(rtl)) .label-text-wrapper {\n    transform-origin: calc(100% - center) top;\n  }\n}\n\n:host(.checkbox-checked) .checkbox-icon,\n:host(.checkbox-indeterminate) .checkbox-icon {\n  border-color: var(--border-color-checked);\n  background: var(--checkbox-background-checked);\n}\n\n:host(.checkbox-checked) .checkbox-icon path,\n:host(.checkbox-indeterminate) .checkbox-icon path {\n  opacity: 1;\n}\n\n:host(.checkbox-disabled) {\n  pointer-events: none;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --border-radius: calc(var(--size) * .125);\n  --border-width: 2px;\n  --border-style: solid;\n  --border-color: rgb(var(--ion-text-color-rgb, 0, 0, 0), 0.6);\n  --checkmark-width: 3;\n  --checkbox-background: var(--ion-item-background, var(--ion-background-color, #fff));\n  --transition: background 180ms cubic-bezier(0.4, 0, 0.2, 1);\n  --size: 18px;\n}\n\n.checkbox-icon path {\n  stroke-dasharray: 30;\n  stroke-dashoffset: 30;\n}\n\n:host(.checkbox-checked) .checkbox-icon path,\n:host(.checkbox-indeterminate) .checkbox-icon path {\n  stroke-dashoffset: 0;\n  transition: stroke-dashoffset 90ms linear 90ms;\n}\n\n:host(.checkbox-disabled) .label-text-wrapper {\n  opacity: 0.38;\n}\n\n:host(.checkbox-disabled) .native-wrapper {\n  opacity: 0.63;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { inheritAriaAttributes, renderHiddenInput } from \"../../utils/helpers\";\nimport { createColorClasses, hostContext } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot - The label text to associate with the checkbox. Use the \"labelPlacement\" property to control where the label is placed relative to the checkbox.\n *\n * @part container - The container for the checkbox mark.\n * @part label - The label text describing the checkbox.\n * @part mark - The checkmark used to indicate the checked state.\n */\nexport class Checkbox {\n    constructor() {\n        this.inputId = `ion-cb-${checkboxIds++}`;\n        this.inheritedAttributes = {};\n        /**\n         * Sets the checked property and emits\n         * the ionChange event. Use this to update the\n         * checked state in response to user-generated\n         * actions such as a click.\n         */\n        this.setChecked = (state) => {\n            const isChecked = (this.checked = state);\n            this.ionChange.emit({\n                checked: isChecked,\n                value: this.value,\n            });\n        };\n        this.toggleChecked = (ev) => {\n            ev.preventDefault();\n            this.setFocus();\n            this.setChecked(!this.checked);\n            this.indeterminate = false;\n        };\n        this.onFocus = () => {\n            this.ionFocus.emit();\n        };\n        this.onBlur = () => {\n            this.ionBlur.emit();\n        };\n        this.onClick = (ev) => {\n            if (this.disabled) {\n                return;\n            }\n            this.toggleChecked(ev);\n        };\n        this.color = undefined;\n        this.name = this.inputId;\n        this.checked = false;\n        this.indeterminate = false;\n        this.disabled = false;\n        this.value = 'on';\n        this.labelPlacement = 'start';\n        this.justify = 'space-between';\n        this.alignment = 'center';\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = Object.assign({}, inheritAriaAttributes(this.el));\n    }\n    setFocus() {\n        if (this.focusEl) {\n            this.focusEl.focus();\n        }\n    }\n    render() {\n        const { color, checked, disabled, el, getSVGPath, indeterminate, inheritedAttributes, inputId, justify, labelPlacement, name, value, alignment, } = this;\n        const mode = getIonMode(this);\n        const path = getSVGPath(mode, indeterminate);\n        renderHiddenInput(true, el, name, checked ? value : '', disabled);\n        return (h(Host, { key: '52064869f18f6762802a783ba9ee37433d2a2981', \"aria-checked\": indeterminate ? 'mixed' : `${checked}`, class: createColorClasses(color, {\n                [mode]: true,\n                'in-item': hostContext('ion-item', el),\n                'checkbox-checked': checked,\n                'checkbox-disabled': disabled,\n                'checkbox-indeterminate': indeterminate,\n                interactive: true,\n                [`checkbox-justify-${justify}`]: true,\n                [`checkbox-alignment-${alignment}`]: true,\n                [`checkbox-label-placement-${labelPlacement}`]: true,\n            }), onClick: this.onClick }, h(\"label\", { key: '800b3521fe809423b9eee7ab9d220255cc6ffdff', class: \"checkbox-wrapper\" }, h(\"input\", Object.assign({ key: '3e254b29bb1fc3951691a255a20cfd65360be510', type: \"checkbox\", checked: checked ? true : undefined, disabled: disabled, id: inputId, onChange: this.toggleChecked, onFocus: () => this.onFocus(), onBlur: () => this.onBlur(), ref: (focusEl) => (this.focusEl = focusEl) }, inheritedAttributes)), h(\"div\", { key: '19ff4b1115c3bc9c2ceed045fbc4e970f77d9e0d', class: {\n                'label-text-wrapper': true,\n                'label-text-wrapper-hidden': el.textContent === '',\n            }, part: \"label\" }, h(\"slot\", { key: 'e4f07b55826fb1b3a80e0428873fbdf06bf92978' })), h(\"div\", { key: '5134cf088c93f36b00d3848b573a148f2d9fb806', class: \"native-wrapper\" }, h(\"svg\", { key: 'd00733f071d6da47e1a6e5c89cb6aab1a7b0ef74', class: \"checkbox-icon\", viewBox: \"0 0 24 24\", part: \"container\" }, path)))));\n    }\n    getSVGPath(mode, indeterminate) {\n        let path = indeterminate ? (h(\"path\", { d: \"M6 12L18 12\", part: \"mark\" })) : (h(\"path\", { d: \"M5.9,12.5l3.8,3.8l8.8-8.8\", part: \"mark\" }));\n        if (mode === 'md') {\n            path = indeterminate ? (h(\"path\", { d: \"M2 12H22\", part: \"mark\" })) : (h(\"path\", { d: \"M1.73,12.91 8.1,19.28 22.79,4.59\", part: \"mark\" }));\n        }\n        return path;\n    }\n    static get is() { return \"ion-checkbox\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"checkbox.ios.scss\"],\n            \"md\": [\"checkbox.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"checkbox.ios.css\"],\n            \"md\": [\"checkbox.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The name of the control, which is submitted with the form data.\"\n                },\n                \"attribute\": \"name\",\n                \"reflect\": false,\n                \"defaultValue\": \"this.inputId\"\n            },\n            \"checked\": {\n                \"type\": \"boolean\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the checkbox is selected.\"\n                },\n                \"attribute\": \"checked\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"indeterminate\": {\n                \"type\": \"boolean\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the checkbox will visually appear as indeterminate.\"\n                },\n                \"attribute\": \"indeterminate\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the checkbox.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"value\": {\n                \"type\": \"any\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"any | null\",\n                    \"resolved\": \"any\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The value of the checkbox does not mean if it's checked or not, use the `checked`\\nproperty for that.\\n\\nThe value of a checkbox is analogous to the value of an `<input type=\\\"checkbox\\\">`,\\nit's only used when the checkbox participates in a native `<form>`.\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false,\n                \"defaultValue\": \"'on'\"\n            },\n            \"labelPlacement\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'end' | 'fixed' | 'stacked'\",\n                    \"resolved\": \"\\\"end\\\" | \\\"fixed\\\" | \\\"stacked\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Where to place the label relative to the checkbox.\\n`\\\"start\\\"`: The label will appear to the left of the checkbox in LTR and to the right in RTL.\\n`\\\"end\\\"`: The label will appear to the right of the checkbox in LTR and to the left in RTL.\\n`\\\"fixed\\\"`: The label has the same behavior as `\\\"start\\\"` except it also has a fixed width. Long text will be truncated with ellipses (\\\"...\\\").\\n`\\\"stacked\\\"`: The label will appear above the checkbox regardless of the direction. The alignment of the label can be controlled with the `alignment` property.\"\n                },\n                \"attribute\": \"label-placement\",\n                \"reflect\": false,\n                \"defaultValue\": \"'start'\"\n            },\n            \"justify\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'end' | 'space-between'\",\n                    \"resolved\": \"\\\"end\\\" | \\\"space-between\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"How to pack the label and checkbox within a line.\\n`\\\"start\\\"`: The label and checkbox will appear on the left in LTR and\\non the right in RTL.\\n`\\\"end\\\"`: The label and checkbox will appear on the right in LTR and\\non the left in RTL.\\n`\\\"space-between\\\"`: The label and checkbox will appear on opposite\\nends of the line with space between the two elements.\"\n                },\n                \"attribute\": \"justify\",\n                \"reflect\": false,\n                \"defaultValue\": \"'space-between'\"\n            },\n            \"alignment\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'center'\",\n                    \"resolved\": \"\\\"center\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"How to control the alignment of the checkbox and label on the cross axis.\\n`\\\"start\\\"`: The label and control will appear on the left of the cross axis in LTR, and on the right side in RTL.\\n`\\\"center\\\"`: The label and control will appear at the center of the cross axis in both LTR and RTL.\"\n                },\n                \"attribute\": \"alignment\",\n                \"reflect\": false,\n                \"defaultValue\": \"'center'\"\n            }\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionChange\",\n                \"name\": \"ionChange\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the checked property has changed\\nas a result of a user action such as a click.\\nThis event will not emit when programmatically\\nsetting the checked property.\"\n                },\n                \"complexType\": {\n                    \"original\": \"CheckboxChangeEventDetail\",\n                    \"resolved\": \"CheckboxChangeEventDetail<any>\",\n                    \"references\": {\n                        \"CheckboxChangeEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./checkbox-interface\",\n                            \"id\": \"src/components/checkbox/checkbox-interface.ts::CheckboxChangeEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionFocus\",\n                \"name\": \"ionFocus\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the checkbox has focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionBlur\",\n                \"name\": \"ionBlur\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the checkbox loses focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get elementRef() { return \"el\"; }\n}\nlet checkboxIds = 0;\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the item\n   * @prop --background-activated: Background of the item when pressed. Note: setting this will interfere with the Material Design ripple.\n   * @prop --background-activated-opacity: Opacity of the item background when pressed\n   * @prop --background-focused: Background of the item when focused with the tab key\n   * @prop --background-focused-opacity: Opacity of the item background when focused with the tab key\n   * @prop --background-hover: Background of the item on hover\n   * @prop --background-hover-opacity: Opacity of the background of the item on hover\n   *\n   * @prop --border-color: Color of the item border\n   * @prop --border-radius: Radius of the item border\n   * @prop --border-style: Style of the item border\n   * @prop --border-width: Width of the item border\n   *\n   * @prop --color: Color of the item\n   * @prop --color-activated: Color of the item when pressed\n   * @prop --color-focused: Color of the item when focused with the tab key\n   * @prop --color-hover: Color of the item on hover\n   *\n   * @prop --detail-icon-color: Color of the item detail icon\n   * @prop --detail-icon-opacity: Opacity of the item detail icon\n   * @prop --detail-icon-font-size: Font size of the item detail icon\n   *\n   * @prop --inner-border-width: Width of the item inner border\n   * @prop --inner-box-shadow: Box shadow of the item inner\n   * @prop --inner-padding-top: Top padding of the item inner\n   * @prop --inner-padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner\n   * @prop --inner-padding-bottom: Bottom padding of the item inner\n   * @prop --inner-padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner\n   *\n   * @prop --min-height: Minimum height of the item\n   *\n   * @prop --padding-bottom: Bottom padding of the item\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item\n   * @prop --padding-top: Top padding of the item\n   *\n   * @prop --transition: Transition of the item\n   *\n   * @prop --ripple-color: Color of the item ripple effect\n   *\n   */\n  --border-radius: 0px;\n  --border-width: 0px;\n  --border-style: solid;\n  --padding-top: 0px;\n  --padding-bottom: 0px;\n  --padding-end: 0px;\n  --padding-start: 0px;\n  --inner-border-width: 0px;\n  --inner-padding-top: 0px;\n  --inner-padding-bottom: 0px;\n  --inner-padding-start: 0px;\n  --inner-padding-end: 0px;\n  --inner-box-shadow: none;\n  --detail-icon-color: initial;\n  --detail-icon-font-size: 1.25em;\n  --detail-icon-opacity: 0.25;\n  --color-activated: var(--color);\n  --color-focused: var(--color);\n  --color-hover: var(--color);\n  --ripple-color: currentColor;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  display: block;\n  position: relative;\n  align-items: center;\n  justify-content: space-between;\n  outline: none;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  text-align: initial;\n  text-decoration: none;\n  overflow: hidden;\n  box-sizing: border-box;\n}\n\n:host(.ion-color) .item-native {\n  background: var(--ion-color-base);\n  color: var(--ion-color-contrast);\n}\n\n:host(.ion-color) .item-native,\n:host(.ion-color) .item-inner {\n  border-color: var(--ion-color-shade);\n}\n\n:host(.ion-activated) .item-native {\n  color: var(--color-activated);\n}\n:host(.ion-activated) .item-native::after {\n  background: var(--background-activated);\n  opacity: var(--background-activated-opacity);\n}\n\n:host(.ion-color.ion-activated) .item-native {\n  color: var(--ion-color-contrast);\n}\n\n:host(.ion-focused) .item-native {\n  color: var(--color-focused);\n}\n:host(.ion-focused) .item-native::after {\n  background: var(--background-focused);\n  opacity: var(--background-focused-opacity);\n}\n\n:host(.ion-color.ion-focused) .item-native {\n  color: var(--ion-color-contrast);\n}\n:host(.ion-color.ion-focused) .item-native::after {\n  background: var(--ion-color-contrast);\n}\n\n@media (any-hover: hover) {\n  :host(.ion-activatable:not(.ion-focused):hover) .item-native {\n    color: var(--color-hover);\n  }\n  :host(.ion-activatable:not(.ion-focused):hover) .item-native::after {\n    background: var(--background-hover);\n    opacity: var(--background-hover-opacity);\n  }\n  :host(.ion-color.ion-activatable:not(.ion-focused):hover) .item-native {\n    color: var(--ion-color-contrast);\n  }\n  :host(.ion-color.ion-activatable:not(.ion-focused):hover) .item-native::after {\n    background: var(--ion-color-contrast);\n  }\n}\n:host(.item-control-needs-pointer-cursor) {\n  cursor: pointer;\n}\n\n:host(.item-interactive-disabled:not(.item-multiple-inputs)) {\n  cursor: default;\n  pointer-events: none;\n}\n\n:host(.item-disabled) {\n  cursor: default;\n  opacity: 0.3;\n  pointer-events: none;\n}\n\n.item-native {\n  border-radius: var(--border-radius);\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  /* stylelint-disable */\n  padding-right: var(--padding-end);\n  padding-left: calc(var(--padding-start) + var(--ion-safe-area-left, 0px));\n  /* stylelint-enable */\n  display: flex;\n  position: relative;\n  align-items: inherit;\n  justify-content: inherit;\n  width: 100%;\n  min-height: var(--min-height);\n  transition: var(--transition);\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  outline: none;\n  background: var(--background);\n  overflow: inherit;\n  z-index: 1;\n  box-sizing: border-box;\n}\n:host-context([dir=rtl]) .item-native {\n  padding-right: calc(var(--padding-start) + var(--ion-safe-area-right, 0px));\n  padding-left: var(--padding-end);\n}\n\n[dir=rtl] .item-native {\n  padding-right: calc(var(--padding-start) + var(--ion-safe-area-right, 0px));\n  padding-left: var(--padding-end);\n}\n\n@supports selector(:dir(rtl)) {\n  .item-native:dir(rtl) {\n    padding-right: calc(var(--padding-start) + var(--ion-safe-area-right, 0px));\n    padding-left: var(--padding-end);\n  }\n}\n\n.item-native::-moz-focus-inner {\n  border: 0;\n}\n\n.item-native::after {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  content: \"\";\n  opacity: 0;\n  transition: var(--transition);\n  z-index: -1;\n}\n\nbutton,\na {\n  cursor: pointer;\n  user-select: none;\n  -webkit-user-drag: none;\n}\n\n.item-inner {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-top: var(--inner-padding-top);\n  padding-bottom: var(--inner-padding-bottom);\n  /* stylelint-disable */\n  padding-right: calc(var(--ion-safe-area-right, 0px) + var(--inner-padding-end));\n  padding-left: var(--inner-padding-start);\n  /* stylelint-enable */\n  display: flex;\n  position: relative;\n  flex: 1;\n  flex-direction: inherit;\n  align-items: inherit;\n  align-self: stretch;\n  min-height: inherit;\n  border-width: var(--inner-border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  box-shadow: var(--inner-box-shadow);\n  overflow: inherit;\n  box-sizing: border-box;\n}\n:host-context([dir=rtl]) .item-inner {\n  padding-right: var(--inner-padding-start);\n  padding-left: calc(var(--ion-safe-area-left, 0px) + var(--inner-padding-end));\n}\n\n[dir=rtl] .item-inner {\n  padding-right: var(--inner-padding-start);\n  padding-left: calc(var(--ion-safe-area-left, 0px) + var(--inner-padding-end));\n}\n\n@supports selector(:dir(rtl)) {\n  .item-inner:dir(rtl) {\n    padding-right: var(--inner-padding-start);\n    padding-left: calc(var(--ion-safe-area-left, 0px) + var(--inner-padding-end));\n  }\n}\n\n.item-detail-icon {\n  /**\n   * IonItem applies its own end padding. However,\n   * all IonIcons have the same bounding box meaning\n   * there may be white space for narrow icons. As\n   * a result, the white space gives the appearance\n   * that there is too much end margin. We move the default\n   * chevron icon over to account for this extra whitespace.\n   */\n  -webkit-margin-start: calc(var(--inner-padding-end) / 2);\n  margin-inline-start: calc(var(--inner-padding-end) / 2);\n  -webkit-margin-end: -6px;\n  margin-inline-end: -6px;\n  color: var(--detail-icon-color);\n  font-size: var(--detail-icon-font-size);\n  opacity: var(--detail-icon-opacity);\n}\n\n::slotted(ion-icon) {\n  font-size: 1.6em;\n}\n\n::slotted(ion-button) {\n  --margin-top: 0;\n  --margin-bottom: 0;\n  --margin-start: 0;\n  --margin-end: 0;\n  z-index: 1;\n}\n\n::slotted(ion-label:not([slot=end])) {\n  flex: 1;\n  width: min-content;\n  /**\n   * We allow labels in the default\n   * slot to grow. However, we do not\n   * want them to grow indefinitely.\n   */\n  max-width: 100%;\n}\n\n:host(.item-input) {\n  align-items: center;\n}\n\n.input-wrapper {\n  display: flex;\n  flex: 1;\n  flex-direction: inherit;\n  align-items: inherit;\n  align-self: stretch;\n  text-overflow: ellipsis;\n  overflow: inherit;\n  box-sizing: border-box;\n}\n\n:host(.item-label-stacked),\n:host(.item-label-floating) {\n  align-items: start;\n}\n\n:host(.item-label-stacked) .input-wrapper,\n:host(.item-label-floating) .input-wrapper {\n  flex: 1;\n  flex-direction: column;\n}\n\n:host(.item-multiple-inputs) ::slotted(ion-checkbox),\n:host(.item-multiple-inputs) ::slotted(ion-datetime),\n:host(.item-multiple-inputs) ::slotted(ion-radio) {\n  position: relative;\n}\n\n:host(.item-textarea) {\n  align-items: stretch;\n}\n\n::slotted(ion-reorder[slot]) {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\nion-ripple-effect {\n  color: var(--ripple-color);\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --min-height: 44px;\n  --transition: background-color 200ms linear, opacity 200ms linear;\n  --padding-start: 16px;\n  --inner-padding-end: 16px;\n  --inner-border-width: 0px 0px 0.55px 0px;\n  --background: var(--ion-item-background, var(--ion-background-color, #fff));\n  /**\n   * The active/focus states need\n   * to be the opposite of the background color\n   * so there is enough contrast. The background\n   * defaults to var(--ion-background-color), so we\n   * default to var(--ion-text-color) which will give us\n   * the opposite color.\n   * i.e. if var(--ion-background-color) is #000\n   * then var(--ion-text-color) will be #fff.\n   */\n  --background-activated: var(--ion-text-color, #000);\n  --background-focused: var(--ion-text-color, #000);\n  --background-hover: currentColor;\n  --background-activated-opacity: .12;\n  --background-focused-opacity: .15;\n  --background-hover-opacity: .04;\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, var(--ion-background-color-step-250, #c8c7cc))));\n  --color: var(--ion-item-color, var(--ion-text-color, #000));\n  font-size: 1rem;\n}\n\n:host(.ion-activated) {\n  --transition: none;\n}\n\n:host(.ion-color.ion-focused) .item-native::after {\n  background: #000;\n  opacity: 0.15;\n}\n\n:host(.ion-color.ion-activated) .item-native::after {\n  background: #000;\n  opacity: 0.12;\n}\n\n:host(.item-lines-full) {\n  --border-width: 0px 0px 0.55px 0px;\n}\n\n:host(.item-lines-inset) {\n  --inner-border-width: 0px 0px 0.55px 0px;\n}\n\n:host(.item-lines-inset),\n:host(.item-lines-none) {\n  --border-width: 0px;\n}\n\n:host(.item-lines-full),\n:host(.item-lines-none) {\n  --inner-border-width: 0px;\n}\n\n::slotted([slot=start]) {\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 2px;\n  margin-bottom: 2px;\n}\n\n::slotted(ion-icon[slot=start]),\n::slotted(ion-icon[slot=end]) {\n  margin-top: 7px;\n  margin-bottom: 7px;\n}\n\n::slotted(ion-toggle[slot=start]),\n::slotted(ion-toggle[slot=end]) {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n:host(.item-label-stacked) ::slotted([slot=end]),\n:host(.item-label-floating) ::slotted([slot=end]) {\n  margin-top: 7px;\n  margin-bottom: 7px;\n}\n\n::slotted(.button-small) {\n  --padding-top: 1px;\n  --padding-bottom: 1px;\n  --padding-start: .5em;\n  --padding-end: .5em;\n  min-height: 24px;\n  font-size: 0.8125rem;\n}\n\n::slotted(ion-avatar) {\n  width: 36px;\n  height: 36px;\n}\n\n::slotted(ion-thumbnail) {\n  --size: 56px;\n}\n\n::slotted(ion-avatar[slot=end]),\n::slotted(ion-thumbnail[slot=end]) {\n  -webkit-margin-start: 8px;\n  margin-inline-start: 8px;\n  -webkit-margin-end: 8px;\n  margin-inline-end: 8px;\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n\n:host(.item-radio) ::slotted(ion-label),\n:host(.item-toggle) ::slotted(ion-label) {\n  -webkit-margin-start: 0px;\n  margin-inline-start: 0px;\n}\n\n::slotted(ion-label) {\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 8px;\n  margin-inline-end: 8px;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n:host(.item-label-floating),\n:host(.item-label-stacked) {\n  --min-height: 68px;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the item\n   * @prop --background-activated: Background of the item when pressed. Note: setting this will interfere with the Material Design ripple.\n   * @prop --background-activated-opacity: Opacity of the item background when pressed\n   * @prop --background-focused: Background of the item when focused with the tab key\n   * @prop --background-focused-opacity: Opacity of the item background when focused with the tab key\n   * @prop --background-hover: Background of the item on hover\n   * @prop --background-hover-opacity: Opacity of the background of the item on hover\n   *\n   * @prop --border-color: Color of the item border\n   * @prop --border-radius: Radius of the item border\n   * @prop --border-style: Style of the item border\n   * @prop --border-width: Width of the item border\n   *\n   * @prop --color: Color of the item\n   * @prop --color-activated: Color of the item when pressed\n   * @prop --color-focused: Color of the item when focused with the tab key\n   * @prop --color-hover: Color of the item on hover\n   *\n   * @prop --detail-icon-color: Color of the item detail icon\n   * @prop --detail-icon-opacity: Opacity of the item detail icon\n   * @prop --detail-icon-font-size: Font size of the item detail icon\n   *\n   * @prop --inner-border-width: Width of the item inner border\n   * @prop --inner-box-shadow: Box shadow of the item inner\n   * @prop --inner-padding-top: Top padding of the item inner\n   * @prop --inner-padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item inner\n   * @prop --inner-padding-bottom: Bottom padding of the item inner\n   * @prop --inner-padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item inner\n   *\n   * @prop --min-height: Minimum height of the item\n   *\n   * @prop --padding-bottom: Bottom padding of the item\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the item\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the item\n   * @prop --padding-top: Top padding of the item\n   *\n   * @prop --transition: Transition of the item\n   *\n   * @prop --ripple-color: Color of the item ripple effect\n   *\n   */\n  --border-radius: 0px;\n  --border-width: 0px;\n  --border-style: solid;\n  --padding-top: 0px;\n  --padding-bottom: 0px;\n  --padding-end: 0px;\n  --padding-start: 0px;\n  --inner-border-width: 0px;\n  --inner-padding-top: 0px;\n  --inner-padding-bottom: 0px;\n  --inner-padding-start: 0px;\n  --inner-padding-end: 0px;\n  --inner-box-shadow: none;\n  --detail-icon-color: initial;\n  --detail-icon-font-size: 1.25em;\n  --detail-icon-opacity: 0.25;\n  --color-activated: var(--color);\n  --color-focused: var(--color);\n  --color-hover: var(--color);\n  --ripple-color: currentColor;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  display: block;\n  position: relative;\n  align-items: center;\n  justify-content: space-between;\n  outline: none;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  text-align: initial;\n  text-decoration: none;\n  overflow: hidden;\n  box-sizing: border-box;\n}\n\n:host(.ion-color) .item-native {\n  background: var(--ion-color-base);\n  color: var(--ion-color-contrast);\n}\n\n:host(.ion-color) .item-native,\n:host(.ion-color) .item-inner {\n  border-color: var(--ion-color-shade);\n}\n\n:host(.ion-activated) .item-native {\n  color: var(--color-activated);\n}\n:host(.ion-activated) .item-native::after {\n  background: var(--background-activated);\n  opacity: var(--background-activated-opacity);\n}\n\n:host(.ion-color.ion-activated) .item-native {\n  color: var(--ion-color-contrast);\n}\n\n:host(.ion-focused) .item-native {\n  color: var(--color-focused);\n}\n:host(.ion-focused) .item-native::after {\n  background: var(--background-focused);\n  opacity: var(--background-focused-opacity);\n}\n\n:host(.ion-color.ion-focused) .item-native {\n  color: var(--ion-color-contrast);\n}\n:host(.ion-color.ion-focused) .item-native::after {\n  background: var(--ion-color-contrast);\n}\n\n@media (any-hover: hover) {\n  :host(.ion-activatable:not(.ion-focused):hover) .item-native {\n    color: var(--color-hover);\n  }\n  :host(.ion-activatable:not(.ion-focused):hover) .item-native::after {\n    background: var(--background-hover);\n    opacity: var(--background-hover-opacity);\n  }\n  :host(.ion-color.ion-activatable:not(.ion-focused):hover) .item-native {\n    color: var(--ion-color-contrast);\n  }\n  :host(.ion-color.ion-activatable:not(.ion-focused):hover) .item-native::after {\n    background: var(--ion-color-contrast);\n  }\n}\n:host(.item-control-needs-pointer-cursor) {\n  cursor: pointer;\n}\n\n:host(.item-interactive-disabled:not(.item-multiple-inputs)) {\n  cursor: default;\n  pointer-events: none;\n}\n\n:host(.item-disabled) {\n  cursor: default;\n  opacity: 0.3;\n  pointer-events: none;\n}\n\n.item-native {\n  border-radius: var(--border-radius);\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  /* stylelint-disable */\n  padding-right: var(--padding-end);\n  padding-left: calc(var(--padding-start) + var(--ion-safe-area-left, 0px));\n  /* stylelint-enable */\n  display: flex;\n  position: relative;\n  align-items: inherit;\n  justify-content: inherit;\n  width: 100%;\n  min-height: var(--min-height);\n  transition: var(--transition);\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  outline: none;\n  background: var(--background);\n  overflow: inherit;\n  z-index: 1;\n  box-sizing: border-box;\n}\n:host-context([dir=rtl]) .item-native {\n  padding-right: calc(var(--padding-start) + var(--ion-safe-area-right, 0px));\n  padding-left: var(--padding-end);\n}\n\n[dir=rtl] .item-native {\n  padding-right: calc(var(--padding-start) + var(--ion-safe-area-right, 0px));\n  padding-left: var(--padding-end);\n}\n\n@supports selector(:dir(rtl)) {\n  .item-native:dir(rtl) {\n    padding-right: calc(var(--padding-start) + var(--ion-safe-area-right, 0px));\n    padding-left: var(--padding-end);\n  }\n}\n\n.item-native::-moz-focus-inner {\n  border: 0;\n}\n\n.item-native::after {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  content: \"\";\n  opacity: 0;\n  transition: var(--transition);\n  z-index: -1;\n}\n\nbutton,\na {\n  cursor: pointer;\n  user-select: none;\n  -webkit-user-drag: none;\n}\n\n.item-inner {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-top: var(--inner-padding-top);\n  padding-bottom: var(--inner-padding-bottom);\n  /* stylelint-disable */\n  padding-right: calc(var(--ion-safe-area-right, 0px) + var(--inner-padding-end));\n  padding-left: var(--inner-padding-start);\n  /* stylelint-enable */\n  display: flex;\n  position: relative;\n  flex: 1;\n  flex-direction: inherit;\n  align-items: inherit;\n  align-self: stretch;\n  min-height: inherit;\n  border-width: var(--inner-border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  box-shadow: var(--inner-box-shadow);\n  overflow: inherit;\n  box-sizing: border-box;\n}\n:host-context([dir=rtl]) .item-inner {\n  padding-right: var(--inner-padding-start);\n  padding-left: calc(var(--ion-safe-area-left, 0px) + var(--inner-padding-end));\n}\n\n[dir=rtl] .item-inner {\n  padding-right: var(--inner-padding-start);\n  padding-left: calc(var(--ion-safe-area-left, 0px) + var(--inner-padding-end));\n}\n\n@supports selector(:dir(rtl)) {\n  .item-inner:dir(rtl) {\n    padding-right: var(--inner-padding-start);\n    padding-left: calc(var(--ion-safe-area-left, 0px) + var(--inner-padding-end));\n  }\n}\n\n.item-detail-icon {\n  /**\n   * IonItem applies its own end padding. However,\n   * all IonIcons have the same bounding box meaning\n   * there may be white space for narrow icons. As\n   * a result, the white space gives the appearance\n   * that there is too much end margin. We move the default\n   * chevron icon over to account for this extra whitespace.\n   */\n  -webkit-margin-start: calc(var(--inner-padding-end) / 2);\n  margin-inline-start: calc(var(--inner-padding-end) / 2);\n  -webkit-margin-end: -6px;\n  margin-inline-end: -6px;\n  color: var(--detail-icon-color);\n  font-size: var(--detail-icon-font-size);\n  opacity: var(--detail-icon-opacity);\n}\n\n::slotted(ion-icon) {\n  font-size: 1.6em;\n}\n\n::slotted(ion-button) {\n  --margin-top: 0;\n  --margin-bottom: 0;\n  --margin-start: 0;\n  --margin-end: 0;\n  z-index: 1;\n}\n\n::slotted(ion-label:not([slot=end])) {\n  flex: 1;\n  width: min-content;\n  /**\n   * We allow labels in the default\n   * slot to grow. However, we do not\n   * want them to grow indefinitely.\n   */\n  max-width: 100%;\n}\n\n:host(.item-input) {\n  align-items: center;\n}\n\n.input-wrapper {\n  display: flex;\n  flex: 1;\n  flex-direction: inherit;\n  align-items: inherit;\n  align-self: stretch;\n  text-overflow: ellipsis;\n  overflow: inherit;\n  box-sizing: border-box;\n}\n\n:host(.item-label-stacked),\n:host(.item-label-floating) {\n  align-items: start;\n}\n\n:host(.item-label-stacked) .input-wrapper,\n:host(.item-label-floating) .input-wrapper {\n  flex: 1;\n  flex-direction: column;\n}\n\n:host(.item-multiple-inputs) ::slotted(ion-checkbox),\n:host(.item-multiple-inputs) ::slotted(ion-datetime),\n:host(.item-multiple-inputs) ::slotted(ion-radio) {\n  position: relative;\n}\n\n:host(.item-textarea) {\n  align-items: stretch;\n}\n\n::slotted(ion-reorder[slot]) {\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\nion-ripple-effect {\n  color: var(--ripple-color);\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --min-height: 48px;\n  --background: var(--ion-item-background, var(--ion-background-color, #fff));\n  --background-activated: transparent;\n  --background-focused: currentColor;\n  --background-hover: currentColor;\n  --background-activated-opacity: 0;\n  --background-focused-opacity: .12;\n  --background-hover-opacity: .04;\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));\n  --color: var(--ion-item-color, var(--ion-text-color, #000));\n  --transition: opacity 15ms linear, background-color 15ms linear;\n  --padding-start: 16px;\n  --inner-padding-end: 16px;\n  --inner-border-width: 0 0 1px 0;\n  font-size: 1rem;\n  font-weight: normal;\n  text-transform: none;\n}\n\n:host(.ion-color.ion-activated) .item-native::after {\n  background: transparent;\n}\n\n:host(.item-interactive) {\n  --border-width: 0 0 1px 0;\n  --inner-border-width: 0;\n}\n\n:host(.item-lines-full) {\n  --border-width: 0 0 1px 0;\n}\n\n:host(.item-lines-inset) {\n  --inner-border-width: 0 0 1px 0;\n}\n\n:host(.item-lines-inset),\n:host(.item-lines-none) {\n  --border-width: 0;\n}\n\n:host(.item-lines-full),\n:host(.item-lines-none) {\n  --inner-border-width: 0;\n}\n\n:host(.item-multi-line) ::slotted([slot=start]),\n:host(.item-multi-line) ::slotted([slot=end]) {\n  margin-top: 16px;\n  margin-bottom: 16px;\n  align-self: flex-start;\n}\n\n::slotted([slot=start]) {\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n::slotted([slot=end]) {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n}\n\n::slotted(ion-icon) {\n  color: rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.54);\n  font-size: 1.5em;\n}\n\n:host(.ion-color) ::slotted(ion-icon) {\n  color: var(--ion-color-contrast);\n}\n\n::slotted(ion-icon[slot]) {\n  margin-top: 12px;\n  margin-bottom: 12px;\n}\n\n::slotted(ion-icon[slot=start]) {\n  -webkit-margin-end: 32px;\n  margin-inline-end: 32px;\n}\n\n::slotted(ion-icon[slot=end]) {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n}\n\n::slotted(ion-toggle[slot=start]),\n::slotted(ion-toggle[slot=end]) {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n::slotted(ion-note) {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  align-self: flex-start;\n  font-size: 0.6875rem;\n}\n\n::slotted(ion-note[slot]) {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 18px;\n  padding-bottom: 10px;\n}\n\n::slotted(ion-avatar) {\n  width: 40px;\n  height: 40px;\n}\n\n::slotted(ion-thumbnail) {\n  --size: 56px;\n}\n\n::slotted(ion-avatar),\n::slotted(ion-thumbnail) {\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n\n::slotted(ion-avatar[slot=start]),\n::slotted(ion-thumbnail[slot=start]) {\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n::slotted(ion-avatar[slot=end]),\n::slotted(ion-thumbnail[slot=end]) {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n}\n\n::slotted(ion-label) {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n:host(.item-label-stacked) ::slotted([slot=end]),\n:host(.item-label-floating) ::slotted([slot=end]) {\n  margin-top: 7px;\n  margin-bottom: 7px;\n}\n\n:host(.item-toggle) ::slotted(ion-label),\n:host(.item-radio) ::slotted(ion-label) {\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n}\n\n::slotted(.button-small) {\n  --padding-top: 2px;\n  --padding-bottom: 2px;\n  --padding-start: .6em;\n  --padding-end: .6em;\n  min-height: 25px;\n  font-size: 0.75rem;\n}\n\n:host(.item-label-floating),\n:host(.item-label-stacked) {\n  --min-height: 55px;\n}\n\n:host(.ion-focused:not(.ion-color)) ::slotted(.label-stacked),\n:host(.ion-focused:not(.ion-color)) ::slotted(.label-floating),\n:host(.item-has-focus:not(.ion-color)) ::slotted(.label-stacked),\n:host(.item-has-focus:not(.ion-color)) ::slotted(.label-floating) {\n  color: var(--ion-color-primary, #0054e9);\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, forceUpdate, h } from \"@stencil/core\";\nimport { inheritAttributes, raf } from \"../../utils/helpers\";\nimport { createColorClasses, hostContext, openURL } from \"../../utils/theme\";\nimport { chevronForward } from \"ionicons/icons\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot - Content is placed between the named slots if provided without a slot.\n * @slot start - Content is placed to the left of the item text in LTR, and to the right in RTL.\n * @slot end - Content is placed to the right of the item text in LTR, and to the left in RTL.\n *\n * @part native - The native HTML button, anchor or div element that wraps all child elements.\n * @part detail-icon - The chevron icon for the item. Only applies when `detail=\"true\"`.\n */\nexport class Item {\n    constructor() {\n        this.labelColorStyles = {};\n        this.itemStyles = new Map();\n        this.inheritedAriaAttributes = {};\n        this.multipleInputs = false;\n        this.focusable = true;\n        this.color = undefined;\n        this.button = false;\n        this.detail = undefined;\n        this.detailIcon = chevronForward;\n        this.disabled = false;\n        this.download = undefined;\n        this.href = undefined;\n        this.rel = undefined;\n        this.lines = undefined;\n        this.routerAnimation = undefined;\n        this.routerDirection = 'forward';\n        this.target = undefined;\n        this.type = 'button';\n    }\n    buttonChanged() {\n        // Update the focusable option when the button option is changed\n        this.focusable = this.isFocusable();\n    }\n    labelColorChanged(ev) {\n        const { color } = this;\n        // There will be a conflict with item color if\n        // we apply the label color to item, so we ignore\n        // the label color if the user sets a color on item\n        if (color === undefined) {\n            this.labelColorStyles = ev.detail;\n        }\n    }\n    itemStyle(ev) {\n        ev.stopPropagation();\n        const tagName = ev.target.tagName;\n        const updatedStyles = ev.detail;\n        const newStyles = {};\n        const childStyles = this.itemStyles.get(tagName) || {};\n        let hasStyleChange = false;\n        Object.keys(updatedStyles).forEach((key) => {\n            if (updatedStyles[key]) {\n                const itemKey = `item-${key}`;\n                if (!childStyles[itemKey]) {\n                    hasStyleChange = true;\n                }\n                newStyles[itemKey] = true;\n            }\n        });\n        if (!hasStyleChange && Object.keys(newStyles).length !== Object.keys(childStyles).length) {\n            hasStyleChange = true;\n        }\n        if (hasStyleChange) {\n            this.itemStyles.set(tagName, newStyles);\n            forceUpdate(this);\n        }\n    }\n    connectedCallback() {\n        this.hasStartEl();\n    }\n    componentWillLoad() {\n        this.inheritedAriaAttributes = inheritAttributes(this.el, ['aria-label']);\n    }\n    componentDidLoad() {\n        raf(() => {\n            this.setMultipleInputs();\n            this.focusable = this.isFocusable();\n        });\n    }\n    // If the item contains multiple clickable elements and/or inputs, then the item\n    // should not have a clickable input cover over the entire item to prevent\n    // interfering with their individual click events\n    setMultipleInputs() {\n        // The following elements have a clickable cover that is relative to the entire item\n        const covers = this.el.querySelectorAll('ion-checkbox, ion-datetime, ion-select, ion-radio');\n        // The following elements can accept focus alongside the previous elements\n        // therefore if these elements are also a child of item, we don't want the\n        // input cover on top of those interfering with their clicks\n        const inputs = this.el.querySelectorAll('ion-input, ion-range, ion-searchbar, ion-segment, ion-textarea, ion-toggle');\n        // The following elements should also stay clickable when an input with cover is present\n        const clickables = this.el.querySelectorAll('ion-anchor, ion-button, a, button');\n        // Check for multiple inputs to change the position of the input cover to relative\n        // for all of the covered inputs above\n        this.multipleInputs =\n            covers.length + inputs.length > 1 ||\n                covers.length + clickables.length > 1 ||\n                (covers.length > 0 && this.isClickable());\n    }\n    // If the item contains an input including a checkbox, datetime, select, or radio\n    // then the item will have a clickable input cover that covers the item\n    // that should get the hover, focused and activated states UNLESS it has multiple\n    // inputs, then those need to individually get each click\n    hasCover() {\n        const inputs = this.el.querySelectorAll('ion-checkbox, ion-datetime, ion-select, ion-radio');\n        return inputs.length === 1 && !this.multipleInputs;\n    }\n    // If the item has an href or button property it will render a native\n    // anchor or button that is clickable\n    isClickable() {\n        return this.href !== undefined || this.button;\n    }\n    canActivate() {\n        return this.isClickable() || this.hasCover();\n    }\n    isFocusable() {\n        const focusableChild = this.el.querySelector('.ion-focusable');\n        return this.canActivate() || focusableChild !== null;\n    }\n    hasStartEl() {\n        const startEl = this.el.querySelector('[slot=\"start\"]');\n        if (startEl !== null) {\n            this.el.classList.add('item-has-start-slot');\n        }\n    }\n    getFirstInteractive() {\n        const controls = this.el.querySelectorAll('ion-toggle:not([disabled]), ion-checkbox:not([disabled]), ion-radio:not([disabled]), ion-select:not([disabled]), ion-input:not([disabled]), ion-textarea:not([disabled])');\n        return controls[0];\n    }\n    render() {\n        const { detail, detailIcon, download, labelColorStyles, lines, disabled, href, rel, target, routerAnimation, routerDirection, inheritedAriaAttributes, multipleInputs, } = this;\n        const childStyles = {};\n        const mode = getIonMode(this);\n        const clickable = this.isClickable();\n        const canActivate = this.canActivate();\n        const TagType = clickable ? (href === undefined ? 'button' : 'a') : 'div';\n        const attrs = TagType === 'button'\n            ? { type: this.type }\n            : {\n                download,\n                href,\n                rel,\n                target,\n            };\n        let clickFn = {};\n        const firstInteractive = this.getFirstInteractive();\n        // Only set onClick if the item is clickable to prevent screen\n        // readers from reading all items as clickable\n        if (clickable || (firstInteractive !== undefined && !multipleInputs)) {\n            clickFn = {\n                onClick: (ev) => {\n                    if (clickable) {\n                        openURL(href, ev, routerDirection, routerAnimation);\n                    }\n                    if (firstInteractive !== undefined && !multipleInputs) {\n                        const path = ev.composedPath();\n                        const target = path[0];\n                        if (ev.isTrusted) {\n                            /**\n                             * Dispatches a click event to the first interactive element,\n                             * when it is the result of a user clicking on the item.\n                             *\n                             * We check if the click target is in the shadow root,\n                             * which means the user clicked on the .item-native or\n                             * .item-inner padding.\n                             */\n                            const clickedWithinShadowRoot = this.el.shadowRoot.contains(target);\n                            if (clickedWithinShadowRoot) {\n                                /**\n                                 * For input/textarea clicking the padding should focus the\n                                 * text field (thus making it editable). For everything else,\n                                 * we want to click the control so it activates.\n                                 */\n                                if (firstInteractive.tagName === 'ION-INPUT' || firstInteractive.tagName === 'ION-TEXTAREA') {\n                                    firstInteractive.setFocus();\n                                }\n                                else {\n                                    firstInteractive.click();\n                                }\n                            }\n                        }\n                    }\n                },\n            };\n        }\n        const showDetail = detail !== undefined ? detail : mode === 'ios' && clickable;\n        this.itemStyles.forEach((value) => {\n            Object.assign(childStyles, value);\n        });\n        const ariaDisabled = disabled || childStyles['item-interactive-disabled'] ? 'true' : null;\n        const inList = hostContext('ion-list', this.el) && !hostContext('ion-radio-group', this.el);\n        /**\n         * Inputs and textareas do not need to show a cursor pointer.\n         * However, other form controls such as checkboxes and radios do.\n         */\n        const firstInteractiveNeedsPointerCursor = firstInteractive !== undefined && !['ION-INPUT', 'ION-TEXTAREA'].includes(firstInteractive.tagName);\n        return (h(Host, { key: '6fe6bae954259703482f175312a051ff1b315a95', \"aria-disabled\": ariaDisabled, class: Object.assign(Object.assign(Object.assign({}, childStyles), labelColorStyles), createColorClasses(this.color, {\n                item: true,\n                [mode]: true,\n                'item-lines-default': lines === undefined,\n                [`item-lines-${lines}`]: lines !== undefined,\n                'item-control-needs-pointer-cursor': firstInteractiveNeedsPointerCursor,\n                'item-disabled': disabled,\n                'in-list': inList,\n                'item-multiple-inputs': this.multipleInputs,\n                'ion-activatable': canActivate,\n                'ion-focusable': this.focusable,\n                'item-rtl': document.dir === 'rtl',\n            })), role: inList ? 'listitem' : null }, h(TagType, Object.assign({ key: 'fcfcffacb7d4e52f9458724332efa93d140cf637' }, attrs, inheritedAriaAttributes, { class: \"item-native\", part: \"native\", disabled: disabled }, clickFn), h(\"slot\", { key: '2c1be89990d1b4264f056f3afca2657dc25e868f', name: \"start\" }), h(\"div\", { key: 'a12010f2f251c29870806050357e247f297f752d', class: \"item-inner\" }, h(\"div\", { key: 'd0dc5901d634d3b7d8c9b4339ed02585b5b88828', class: \"input-wrapper\" }, h(\"slot\", { key: '5589d491f6058858310c72971de50ddf441379b1' })), h(\"slot\", { key: '7b2d2182336abef508d00882759df1a99a1cf93e', name: \"end\" }), showDetail && (h(\"ion-icon\", { key: 'f93f7e7166413f1f2691430dcda83ecf858f7e1f', icon: detailIcon, lazy: false, class: \"item-detail-icon\", part: \"detail-icon\", \"aria-hidden\": \"true\", \"flip-rtl\": detailIcon === chevronForward }))), canActivate && mode === 'md' && h(\"ion-ripple-effect\", { key: '3d13ce7623813d650ada97974b29a2e94e2405b1' }))));\n    }\n    static get is() { return \"ion-item\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"item.ios.scss\"],\n            \"md\": [\"item.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"item.ios.css\"],\n            \"md\": [\"item.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"button\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, a button tag will be rendered and the item will be tappable.\"\n                },\n                \"attribute\": \"button\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"detail\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, a detail arrow will appear on the item. Defaults to `false` unless the `mode`\\nis `ios` and an `href` or `button` property is present.\"\n                },\n                \"attribute\": \"detail\",\n                \"reflect\": false\n            },\n            \"detailIcon\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The icon to use when `detail` is set to `true`.\"\n                },\n                \"attribute\": \"detail-icon\",\n                \"reflect\": false,\n                \"defaultValue\": \"chevronForward\"\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the item.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"download\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | undefined\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"This attribute instructs browsers to download a URL instead of navigating to\\nit, so the user will be prompted to save it as a local file. If the attribute\\nhas a value, it is used as the pre-filled file name in the Save prompt\\n(the user can still change the file name if they want).\"\n                },\n                \"attribute\": \"download\",\n                \"reflect\": false\n            },\n            \"href\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | undefined\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Contains a URL or a URL fragment that the hyperlink points to.\\nIf this property is set, an anchor tag will be rendered.\"\n                },\n                \"attribute\": \"href\",\n                \"reflect\": false\n            },\n            \"rel\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | undefined\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the relationship of the target object to the link object.\\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).\"\n                },\n                \"attribute\": \"rel\",\n                \"reflect\": false\n            },\n            \"lines\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'full' | 'inset' | 'none'\",\n                    \"resolved\": \"\\\"full\\\" | \\\"inset\\\" | \\\"none\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"How the bottom border should be displayed on the item.\"\n                },\n                \"attribute\": \"lines\",\n                \"reflect\": false\n            },\n            \"routerAnimation\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"AnimationBuilder | undefined\",\n                    \"resolved\": \"((baseEl: any, opts?: any) => Animation) | undefined\",\n                    \"references\": {\n                        \"AnimationBuilder\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::AnimationBuilder\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When using a router, it specifies the transition animation when navigating to\\nanother page using `href`.\"\n                }\n            },\n            \"routerDirection\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"RouterDirection\",\n                    \"resolved\": \"\\\"back\\\" | \\\"forward\\\" | \\\"root\\\"\",\n                    \"references\": {\n                        \"RouterDirection\": {\n                            \"location\": \"import\",\n                            \"path\": \"../router/utils/interface\",\n                            \"id\": \"src/components/router/utils/interface.ts::RouterDirection\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When using a router, it specifies the transition direction when navigating to\\nanother page using `href`.\"\n                },\n                \"attribute\": \"router-direction\",\n                \"reflect\": false,\n                \"defaultValue\": \"'forward'\"\n            },\n            \"target\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | undefined\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies where to display the linked URL.\\nOnly applies when an `href` is provided.\\nSpecial keywords: `\\\"_blank\\\"`, `\\\"_self\\\"`, `\\\"_parent\\\"`, `\\\"_top\\\"`.\"\n                },\n                \"attribute\": \"target\",\n                \"reflect\": false\n            },\n            \"type\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'submit' | 'reset' | 'button'\",\n                    \"resolved\": \"\\\"button\\\" | \\\"reset\\\" | \\\"submit\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The type of the button. Only used when an `onclick` or `button` property is present.\"\n                },\n                \"attribute\": \"type\",\n                \"reflect\": false,\n                \"defaultValue\": \"'button'\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"multipleInputs\": {},\n            \"focusable\": {}\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"button\",\n                \"methodName\": \"buttonChanged\"\n            }];\n    }\n    static get listeners() {\n        return [{\n                \"name\": \"ionColor\",\n                \"method\": \"labelColorChanged\",\n                \"target\": undefined,\n                \"capture\": false,\n                \"passive\": false\n            }, {\n                \"name\": \"ionStyle\",\n                \"method\": \"itemStyle\",\n                \"target\": undefined,\n                \"capture\": false,\n                \"passive\": false\n            }];\n    }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host-context(.item) {\n  /**\n   * @prop --color: Color of the label. This property is only available when using `ion-label` inside of an `ion-item`.\n   */\n  --color: initial;\n  display: block;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  font-size: inherit;\n  text-overflow: ellipsis;\n  box-sizing: border-box;\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-base);\n}\n\n:host(.ion-text-nowrap) {\n  overflow: hidden;\n}\n\n:host-context(.item-interactive-disabled:not(.item-multiple-inputs)) {\n  cursor: default;\n  opacity: 0.3;\n  pointer-events: none;\n}\n\n:host-context(.item-input) {\n  flex: initial;\n  max-width: 200px;\n  pointer-events: none;\n}\n\n:host-context(.item-textarea) {\n  align-self: baseline;\n}\n\n:host-context(.item-skeleton-text) {\n  overflow: hidden;\n}\n\n:host(.label-fixed) {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n:host(.label-stacked),\n:host(.label-floating) {\n  margin-bottom: 0;\n  align-self: stretch;\n  width: auto;\n  max-width: 100%;\n}\n\n:host(.label-no-animate.label-floating) {\n  transition: none;\n}\n\n::slotted(*) h1,\n::slotted(*) h2,\n::slotted(*) h3,\n::slotted(*) h4,\n::slotted(*) h5,\n::slotted(*) h6 {\n  text-overflow: inherit;\n  overflow: inherit;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host(.ion-text-wrap) {\n  font-size: 0.875rem;\n  line-height: 1.5;\n}\n\n:host(.label-stacked) {\n  margin-bottom: 4px;\n  font-size: 0.875rem;\n}\n\n:host(.label-floating) {\n  margin-bottom: 0;\n  transform: translate(0, 29px);\n  transform-origin: left top;\n  transition: transform 150ms ease-in-out;\n}\n:host-context([dir=rtl]):host(.label-floating), :host-context([dir=rtl]).label-floating {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.label-floating:dir(rtl)) {\n    transform-origin: right top;\n  }\n}\n\n:host-context(.item-textarea).label-floating {\n  transform: translate(0, 28px);\n}\n\n:host-context(.item-has-focus).label-floating,\n:host-context(.item-has-placeholder:not(.item-input)).label-floating,\n:host-context(.item-has-value).label-floating {\n  transform: scale(0.82);\n}\n\n::slotted(*) h1 {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 3px;\n  margin-bottom: 2px;\n  font-size: 1.375rem;\n  font-weight: normal;\n}\n\n::slotted(*) h2 {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 2px;\n  font-size: 1.0625rem;\n  font-weight: normal;\n}\n\n::slotted(*) h3,\n::slotted(*) h4,\n::slotted(*) h5,\n::slotted(*) h6 {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 3px;\n  font-size: 0.875rem;\n  font-weight: normal;\n  line-height: normal;\n}\n\n::slotted(*) p {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 2px;\n  font-size: 0.875rem;\n  line-height: normal;\n  text-overflow: inherit;\n  overflow: inherit;\n}\n\n::slotted(p) {\n  color: var(--ion-text-color-step-550, #a3a3a3);\n}\n\n:host(.in-item-color)::slotted(p) {\n  color: inherit;\n}\n\n::slotted(*) h2:last-child,\n::slotted(*) h3:last-child,\n::slotted(*) h4:last-child,\n::slotted(*) h5:last-child,\n::slotted(*) h6:last-child,\n::slotted(*) p:last-child {\n  margin-bottom: 0;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host-context(.item) {\n  /**\n   * @prop --color: Color of the label. This property is only available when using `ion-label` inside of an `ion-item`.\n   */\n  --color: initial;\n  display: block;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  font-size: inherit;\n  text-overflow: ellipsis;\n  box-sizing: border-box;\n}\n\n:host(.ion-color) {\n  color: var(--ion-color-base);\n}\n\n:host(.ion-text-nowrap) {\n  overflow: hidden;\n}\n\n:host-context(.item-interactive-disabled:not(.item-multiple-inputs)) {\n  cursor: default;\n  opacity: 0.3;\n  pointer-events: none;\n}\n\n:host-context(.item-input) {\n  flex: initial;\n  max-width: 200px;\n  pointer-events: none;\n}\n\n:host-context(.item-textarea) {\n  align-self: baseline;\n}\n\n:host-context(.item-skeleton-text) {\n  overflow: hidden;\n}\n\n:host(.label-fixed) {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n:host(.label-stacked),\n:host(.label-floating) {\n  margin-bottom: 0;\n  align-self: stretch;\n  width: auto;\n  max-width: 100%;\n}\n\n:host(.label-no-animate.label-floating) {\n  transition: none;\n}\n\n::slotted(*) h1,\n::slotted(*) h2,\n::slotted(*) h3,\n::slotted(*) h4,\n::slotted(*) h5,\n::slotted(*) h6 {\n  text-overflow: inherit;\n  overflow: inherit;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host(.ion-text-wrap) {\n  line-height: 1.5;\n}\n\n/**\n * When translating the label, we need to use translateY\n * instead of translate3d due to a WebKit bug: https://bugs.webkit.org/show_bug.cgi?id=215731\n */\n:host(.label-stacked),\n:host(.label-floating) {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  /* stylelint-disable property-disallowed-list */\n  transform-origin: top left;\n  /* stylelint-enable property-disallowed-list */\n}\n\n:host(.label-stacked.label-rtl),\n:host(.label-floating.label-rtl) {\n  /* stylelint-disable property-disallowed-list */\n  transform-origin: top right;\n  /* stylelint-enable property-disallowed-list */\n}\n\n:host(.label-stacked) {\n  transform: translateY(50%) scale(0.75);\n  transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n:host(.label-floating) {\n  transform: translateY(96%);\n  transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n:host-context(.ion-focused).label-floating,\n:host-context(.item-has-focus).label-floating,\n:host-context(.item-has-placeholder:not(.item-input)).label-floating,\n:host-context(.item-has-value).label-floating {\n  transform: translateY(50%) scale(0.75);\n}\n\n:host-context(.ion-focused).label-stacked:not(.ion-color),\n:host-context(.ion-focused).label-floating:not(.ion-color),\n:host-context(.item-has-focus).label-stacked:not(.ion-color),\n:host-context(.item-has-focus).label-floating:not(.ion-color) {\n  color: var(--ion-color-primary, #0054e9);\n}\n\n:host-context(.ion-focused.ion-color).label-stacked:not(.ion-color),\n:host-context(.ion-focused.ion-color).label-floating:not(.ion-color),\n:host-context(.item-has-focus.ion-color).label-stacked:not(.ion-color),\n:host-context(.item-has-focus.ion-color).label-floating:not(.ion-color) {\n  color: var(--ion-color-contrast);\n}\n\n:host-context(.ion-invalid.ion-touched).label-stacked:not(.ion-color),\n:host-context(.ion-invalid.ion-touched).label-floating:not(.ion-color) {\n  color: var(--highlight-color-invalid);\n}\n\n::slotted(*) h1 {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 2px;\n  font-size: 1.5rem;\n  font-weight: normal;\n}\n\n::slotted(*) h2 {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 2px;\n  margin-bottom: 2px;\n  font-size: 1rem;\n  font-weight: normal;\n}\n\n::slotted(*) h3,\n::slotted(*) h4,\n::slotted(*) h5,\n::slotted(*) h6 {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 2px;\n  margin-bottom: 2px;\n  font-size: 0.875rem;\n  font-weight: normal;\n  line-height: normal;\n}\n\n::slotted(*) p {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 2px;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  text-overflow: inherit;\n  overflow: inherit;\n}\n\n::slotted(p) {\n  color: var(--ion-color-step-600, var(--ion-text-color-step-400, #666666));\n}\n\n:host(.in-item-color)::slotted(p) {\n  color: inherit;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { createColorClasses, hostContext } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\nexport class Label {\n    constructor() {\n        this.inRange = false;\n        this.color = undefined;\n        this.position = undefined;\n        this.noAnimate = false;\n    }\n    componentWillLoad() {\n        this.inRange = !!this.el.closest('ion-range');\n        this.noAnimate = this.position === 'floating';\n        this.emitStyle();\n        this.emitColor();\n    }\n    componentDidLoad() {\n        if (this.noAnimate) {\n            setTimeout(() => {\n                this.noAnimate = false;\n            }, 1000);\n        }\n    }\n    colorChanged() {\n        this.emitColor();\n    }\n    positionChanged() {\n        this.emitStyle();\n    }\n    emitColor() {\n        const { color } = this;\n        this.ionColor.emit({\n            'item-label-color': color !== undefined,\n            [`ion-color-${color}`]: color !== undefined,\n        });\n    }\n    emitStyle() {\n        const { inRange, position } = this;\n        // If the label is inside of a range we don't want\n        // to override the classes added by the label that\n        // is a direct child of the item\n        if (!inRange) {\n            this.ionStyle.emit({\n                label: true,\n                [`label-${position}`]: position !== undefined,\n            });\n        }\n    }\n    render() {\n        const position = this.position;\n        const mode = getIonMode(this);\n        return (h(Host, { key: '6353a70565ef6fbbbf4042b000e536c61bcf99a9', class: createColorClasses(this.color, {\n                [mode]: true,\n                'in-item-color': hostContext('ion-item.ion-color', this.el),\n                [`label-${position}`]: position !== undefined,\n                [`label-no-animate`]: this.noAnimate,\n                'label-rtl': document.dir === 'rtl',\n            }) }, h(\"slot\", { key: '6ef9c2758c0168442aa84941af0a6cec1ef1ec21' })));\n    }\n    static get is() { return \"ion-label\"; }\n    static get encapsulation() { return \"scoped\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"label.ios.scss\"],\n            \"md\": [\"label.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"label.ios.css\"],\n            \"md\": [\"label.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"position\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'fixed' | 'stacked' | 'floating'\",\n                    \"resolved\": \"\\\"fixed\\\" | \\\"floating\\\" | \\\"stacked\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The position determines where and how the label behaves inside an item.\"\n                },\n                \"attribute\": \"position\",\n                \"reflect\": false\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"noAnimate\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionColor\",\n                \"name\": \"ionColor\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Emitted when the color changes.\"\n                },\n                \"complexType\": {\n                    \"original\": \"StyleEventDetail\",\n                    \"resolved\": \"StyleEventDetail\",\n                    \"references\": {\n                        \"StyleEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::StyleEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionStyle\",\n                \"name\": \"ionStyle\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Emitted when the styles change.\"\n                },\n                \"complexType\": {\n                    \"original\": \"StyleEventDetail\",\n                    \"resolved\": \"StyleEventDetail\",\n                    \"references\": {\n                        \"StyleEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::StyleEventDetail\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"color\",\n                \"methodName\": \"colorChanged\"\n            }, {\n                \"propName\": \"position\",\n                \"methodName\": \"positionChanged\"\n            }];\n    }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\nion-list {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  display: block;\n  contain: content;\n  list-style-type: none;\n}\n\nion-list.list-inset {\n  transform: translateZ(0);\n  overflow: hidden;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n.list-ios {\n  background: var(--ion-item-background, var(--ion-background-color, #fff));\n}\n\n.list-ios.list-inset {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 16px;\n  margin-bottom: 16px;\n  border-radius: 10px;\n}\n\n/**\n * These selectors ensure the last item in the list\n * has the correct border.\n * We need to consider the following scenarios:\n 1. The only item in a list.\n 2. The last item in a list as long as it is not the only item.\n 3. The item in the last item-sliding in a list.\n * Note that we do not select ion-item:last-of-type\n * because that will cause the borders to disappear on\n * items in an item-sliding when the item is the last\n * element in the item-sliding container.\n */\n.list-ios.list-inset ion-item:only-child,\n.list-ios.list-inset ion-item:not(:only-of-type):last-of-type,\n.list-ios.list-inset ion-item-sliding:last-of-type ion-item {\n  --border-width: 0;\n  --inner-border-width: 0;\n}\n\n.list-ios.list-inset + ion-list.list-inset {\n  margin-top: 0;\n}\n\n.list-ios-lines-none .item-lines-default {\n  --inner-border-width: 0px;\n  --border-width: 0px;\n}\n\n.list-ios-lines-full .item-lines-default {\n  --inner-border-width: 0px;\n  --border-width: 0 0 0.55px 0;\n}\n\n.list-ios-lines-inset .item-lines-default {\n  --inner-border-width: 0 0 0.55px 0;\n  --border-width: 0px;\n}\n\nion-card .list-ios {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\nion-list {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  display: block;\n  contain: content;\n  list-style-type: none;\n}\n\nion-list.list-inset {\n  transform: translateZ(0);\n  overflow: hidden;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n.list-md {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  background: var(--ion-item-background, var(--ion-background-color, #fff));\n}\n\n.list-md > .input:last-child::after {\n  inset-inline-start: 0;\n}\n\n.list-md.list-inset {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 16px;\n  margin-bottom: 16px;\n  border-radius: 2px;\n}\n\n/**\n * These selectors ensure the last item in the list\n * has the correct border.\n * We need to consider the following scenarios:\n 1. The last item in a list as long as it is not the only item.\n 2. The item in the last item-sliding in a list.\n * Note that we do not select \"ion-item-sliding ion-item:last-of-type\"\n * because that will cause the borders to disappear on\n * items in an item-sliding when the item is the last\n * element in the item-sliding container.\n */\n.list-md.list-inset ion-item:not(:only-of-type):last-of-type,\n.list-md.list-inset ion-item-sliding:last-of-type ion-item {\n  --border-width: 0;\n  --inner-border-width: 0;\n}\n\n/**\n * We target :only-child instead of :only-of-type\n * otherwise borders will disappear on items inside of\n * ion-item-sliding because the item will be the only\n * one of its type inside of the ion-item-sliding group.\n */\n.list-md.list-inset ion-item:only-child {\n  --border-width: 0;\n  --inner-border-width: 0;\n}\n\n.list-md.list-inset + ion-list.list-inset {\n  margin-top: 0;\n}\n\n.list-md-lines-none .item-lines-default {\n  --inner-border-width: 0px;\n  --border-width: 0px;\n}\n\n.list-md-lines-full .item-lines-default {\n  --inner-border-width: 0px;\n  --border-width: 0 0 1px 0;\n}\n\n.list-md-lines-inset .item-lines-default {\n  --inner-border-width: 0 0 1px 0;\n  --border-width: 0px;\n}\n\nion-card .list-md {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\nexport class List {\n    constructor() {\n        this.lines = undefined;\n        this.inset = false;\n    }\n    /**\n     * If `ion-item-sliding` are used inside the list, this method closes\n     * any open sliding item.\n     *\n     * Returns `true` if an actual `ion-item-sliding` is closed.\n     */\n    async closeSlidingItems() {\n        const item = this.el.querySelector('ion-item-sliding');\n        if (item === null || item === void 0 ? void 0 : item.closeOpened) {\n            return item.closeOpened();\n        }\n        return false;\n    }\n    render() {\n        const mode = getIonMode(this);\n        const { lines, inset } = this;\n        return (h(Host, { key: '5ff2b0b3989cc99ce17abb8bcd7ec1847940d1ec', role: \"list\", class: {\n                [mode]: true,\n                // Used internally for styling\n                [`list-${mode}`]: true,\n                'list-inset': inset,\n                [`list-lines-${lines}`]: lines !== undefined,\n                [`list-${mode}-lines-${lines}`]: lines !== undefined,\n            } }));\n    }\n    static get is() { return \"ion-list\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"list.ios.scss\"],\n            \"md\": [\"list.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"list.ios.css\"],\n            \"md\": [\"list.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"lines\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'full' | 'inset' | 'none'\",\n                    \"resolved\": \"\\\"full\\\" | \\\"inset\\\" | \\\"none\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"How the bottom border should be displayed on all items.\"\n                },\n                \"attribute\": \"lines\",\n                \"reflect\": false\n            },\n            \"inset\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the list will have margin around it and rounded corners.\"\n                },\n                \"attribute\": \"inset\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            }\n        };\n    }\n    static get methods() {\n        return {\n            \"closeSlidingItems\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<boolean>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<boolean>\"\n                },\n                \"docs\": {\n                    \"text\": \"If `ion-item-sliding` are used inside the list, this method closes\\nany open sliding item.\\n\\nReturns `true` if an actual `ion-item-sliding` is closed.\",\n                    \"tags\": []\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the list header\n   * @prop --color: Color of the list header text\n   *\n   * @prop --border-color: Color of the list header border\n   * @prop --border-width: Width of the list header border\n   * @prop --border-style: Style of the list header border\n   *\n   * @prop --inner-border-width: Width of the inner list header border\n   */\n  --border-style: solid;\n  --border-width: 0;\n  --inner-border-width: 0;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  min-height: 40px;\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  background: var(--background);\n  color: var(--color);\n  overflow: hidden;\n}\n\n:host(.ion-color) {\n  background: var(--ion-color-base);\n  color: var(--ion-color-contrast);\n}\n\n.list-header-inner {\n  display: flex;\n  position: relative;\n  flex: 1;\n  flex-direction: inherit;\n  align-items: inherit;\n  align-self: stretch;\n  min-height: inherit;\n  border-width: var(--inner-border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  overflow: inherit;\n  box-sizing: border-box;\n}\n\n::slotted(ion-label) {\n  flex: 1 1 auto;\n}\n\n:host(.list-header-lines-inset),\n:host(.list-header-lines-none) {\n  --border-width: 0;\n}\n\n:host(.list-header-lines-full),\n:host(.list-header-lines-none) {\n  --inner-border-width: 0;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --background: transparent;\n  --color: var(--ion-color-step-850, var(--ion-text-color-step-150, #262626));\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, var(--ion-background-color-step-250, #c8c7cc))));\n  /* stylelint-disable */\n  padding-right: var(--ion-safe-area-right);\n  padding-left: calc(var(--ion-safe-area-left, 0px) + 16px);\n  /* stylelint-enable */\n  position: relative;\n  align-items: flex-end;\n  font-size: min(1.375rem, 56.1px);\n  font-weight: 700;\n  letter-spacing: 0;\n}\n:host-context([dir=rtl]) {\n  padding-right: calc(var(--ion-safe-area-right, 0px) + 16px);\n  padding-left: var(--ion-safe-area-left);\n}\n\n@supports selector(:dir(rtl)) {\n  :host(:dir(rtl)) {\n    padding-right: calc(var(--ion-safe-area-right, 0px) + 16px);\n    padding-left: var(--ion-safe-area-left);\n  }\n}\n\n::slotted(ion-button),\n::slotted(ion-label) {\n  margin-top: 29px;\n  margin-bottom: 6px;\n}\n\n::slotted(ion-button) {\n  --padding-top: 0;\n  --padding-bottom: 0;\n  -webkit-margin-start: 3px;\n  margin-inline-start: 3px;\n  -webkit-margin-end: 3px;\n  margin-inline-end: 3px;\n  min-height: 1.4em;\n}\n\n:host(.list-header-lines-full) {\n  --border-width: 0 0 0.55px 0;\n}\n\n:host(.list-header-lines-inset) {\n  --inner-border-width: 0 0 0.55px 0;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the list header\n   * @prop --color: Color of the list header text\n   *\n   * @prop --border-color: Color of the list header border\n   * @prop --border-width: Width of the list header border\n   * @prop --border-style: Style of the list header border\n   *\n   * @prop --inner-border-width: Width of the inner list header border\n   */\n  --border-style: solid;\n  --border-width: 0;\n  --inner-border-width: 0;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n  min-height: 40px;\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  background: var(--background);\n  color: var(--color);\n  overflow: hidden;\n}\n\n:host(.ion-color) {\n  background: var(--ion-color-base);\n  color: var(--ion-color-contrast);\n}\n\n.list-header-inner {\n  display: flex;\n  position: relative;\n  flex: 1;\n  flex-direction: inherit;\n  align-items: inherit;\n  align-self: stretch;\n  min-height: inherit;\n  border-width: var(--inner-border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  overflow: inherit;\n  box-sizing: border-box;\n}\n\n::slotted(ion-label) {\n  flex: 1 1 auto;\n}\n\n:host(.list-header-lines-inset),\n:host(.list-header-lines-none) {\n  --border-width: 0;\n}\n\n:host(.list-header-lines-full),\n:host(.list-header-lines-none) {\n  --inner-border-width: 0;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --background: transparent;\n  --color: var(--ion-text-color, #000);\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));\n  /* stylelint-disable */\n  padding-right: var(--ion-safe-area-right);\n  padding-left: calc(var(--ion-safe-area-left, 0px) + 16px);\n  /* stylelint-enable */\n  min-height: 45px;\n  font-size: 0.875rem;\n}\n:host-context([dir=rtl]) {\n  padding-right: calc(var(--ion-safe-area-right, 0px) + 16px);\n  padding-left: var(--ion-safe-area-left);\n}\n\n@supports selector(:dir(rtl)) {\n  :host(:dir(rtl)) {\n    padding-right: calc(var(--ion-safe-area-right, 0px) + 16px);\n    padding-left: var(--ion-safe-area-left);\n  }\n}\n\n:host(.list-header-lines-full) {\n  --border-width: 0 0 1px 0;\n}\n\n:host(.list-header-lines-inset) {\n  --inner-border-width: 0 0 1px 0;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { createColorClasses } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\nexport class ListHeader {\n    constructor() {\n        this.color = undefined;\n        this.lines = undefined;\n    }\n    render() {\n        const { lines } = this;\n        const mode = getIonMode(this);\n        return (h(Host, { key: 'fb78bd8601cbd7b90ec84a96e0c8325be1132b1e', class: createColorClasses(this.color, {\n                [mode]: true,\n                [`list-header-lines-${lines}`]: lines !== undefined,\n            }) }, h(\"div\", { key: '2580ad49f3a54973e15f14d645a1e55a6fa066ac', class: \"list-header-inner\" }, h(\"slot\", { key: '677b2e2ec8eeb3ae6ad329e86c76451cf3ae6c2f' }))));\n    }\n    static get is() { return \"ion-list-header\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"list-header.ios.scss\"],\n            \"md\": [\"list-header.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"list-header.ios.css\"],\n            \"md\": [\"list-header.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"lines\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'full' | 'inset' | 'none'\",\n                    \"resolved\": \"\\\"full\\\" | \\\"inset\\\" | \\\"none\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"How the bottom border should be displayed on the list header.\"\n                },\n                \"attribute\": \"lines\",\n                \"reflect\": false\n            }\n        };\n    }\n}\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --color: Color of the radio\n   * @prop --color-checked: Color of the checked radio\n   * @prop --border-radius: Border radius of the radio\n   * @prop --inner-border-radius: Border radius of the inner checked radio\n   */\n  --inner-border-radius: 50%;\n  display: inline-block;\n  position: relative;\n  max-width: 100%;\n  min-height: inherit;\n  cursor: pointer;\n  user-select: none;\n  z-index: 2;\n  box-sizing: border-box;\n}\n\n:host(.radio-disabled) {\n  pointer-events: none;\n}\n\n.radio-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  contain: layout size style;\n}\n\n.radio-icon,\n.radio-inner {\n  box-sizing: border-box;\n}\n\ninput {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  clip: rect(0 0 0 0);\n  opacity: 0;\n  overflow: hidden;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n:host(:focus) {\n  outline: none;\n}\n\n:host(.in-item) {\n  flex: 1 1 0;\n  width: 100%;\n  height: 100%;\n}\n\n/**\n * Radio can be slotted\n * in components such as item and\n * toolbar which is why we do not\n * limit the below behavior to just ion-item.\n */\n:host([slot=start]),\n:host([slot=end]) {\n  width: auto;\n}\n\n.radio-wrapper {\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: center;\n  height: inherit;\n  min-height: inherit;\n  cursor: inherit;\n}\n\n.label-text-wrapper {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n:host(.in-item) .label-text-wrapper {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n:host(.in-item.radio-label-placement-stacked) .label-text-wrapper {\n  margin-top: 10px;\n  margin-bottom: 16px;\n}\n\n:host(.in-item.radio-label-placement-stacked) .native-wrapper {\n  margin-bottom: 10px;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden {\n  display: none;\n}\n\n.native-wrapper {\n  display: flex;\n  align-items: center;\n}\n\n:host(.radio-justify-space-between) .radio-wrapper {\n  justify-content: space-between;\n}\n\n:host(.radio-justify-start) .radio-wrapper {\n  justify-content: start;\n}\n\n:host(.radio-justify-end) .radio-wrapper {\n  justify-content: end;\n}\n\n:host(.radio-alignment-start) .radio-wrapper {\n  align-items: start;\n}\n\n:host(.radio-alignment-center) .radio-wrapper {\n  align-items: center;\n}\n\n/**\n * Label is on the left of the radio in LTR and\n * on the right in RTL.\n */\n:host(.radio-label-placement-start) .radio-wrapper {\n  flex-direction: row;\n}\n\n:host(.radio-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the radio should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n/**\n * Label is on the right of the radio in LTR and\n * on the left in RTL.\n */\n:host(.radio-label-placement-end) .radio-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the radio should be on the start\n * when the label sits at the end.\n */\n:host(.radio-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n}\n\n:host(.radio-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the radio should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n/**\n * Label is on the left of the radio in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.radio-label-placement-fixed) .label-text-wrapper {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n}\n\n/**\n * Label is on top of the radio.\n */\n:host(.radio-label-placement-stacked) .radio-wrapper {\n  flex-direction: column;\n}\n\n:host(.radio-label-placement-stacked) .label-text-wrapper {\n  transform: scale(0.75);\n  /**\n   * The margin between the label and\n   * the radio should be on the bottom\n   * when the label sits on top.\n   */\n  margin-left: 0;\n  margin-right: 0;\n  margin-bottom: 16px;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the radio.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n:host(.radio-label-placement-stacked.radio-alignment-start) .label-text-wrapper {\n  transform-origin: left top;\n}\n:host-context([dir=rtl]):host(.radio-label-placement-stacked.radio-alignment-start) .label-text-wrapper, :host-context([dir=rtl]).radio-label-placement-stacked.radio-alignment-start .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.radio-label-placement-stacked.radio-alignment-start:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n:host(.radio-label-placement-stacked.radio-alignment-center) .label-text-wrapper {\n  transform-origin: center top;\n}\n:host-context([dir=rtl]):host(.radio-label-placement-stacked.radio-alignment-center) .label-text-wrapper, :host-context([dir=rtl]).radio-label-placement-stacked.radio-alignment-center .label-text-wrapper {\n  transform-origin: calc(100% - center) top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.radio-label-placement-stacked.radio-alignment-center:dir(rtl)) .label-text-wrapper {\n    transform-origin: calc(100% - center) top;\n  }\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --color-checked: var(--ion-color-primary, #0054e9);\n}\n\n:host(.ion-color.radio-checked) .radio-inner {\n  border-color: var(--ion-color-base);\n}\n\n.item-radio.item-ios ion-label {\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n}\n\n.radio-inner {\n  width: 33%;\n  height: 50%;\n}\n\n:host(.radio-checked) .radio-inner {\n  transform: rotate(45deg);\n  border-width: 0.125rem;\n  border-top-width: 0;\n  border-left-width: 0;\n  border-style: solid;\n  border-color: var(--color-checked);\n}\n\n:host(.radio-disabled) {\n  opacity: 0.3;\n}\n\n:host(.ion-focused) .radio-icon::after {\n  border-radius: var(--inner-border-radius);\n  top: -8px;\n  display: block;\n  position: absolute;\n  width: 36px;\n  height: 36px;\n  background: var(--ion-color-primary-tint, #1a65eb);\n  content: \"\";\n  opacity: 0.2;\n}\n:host(.ion-focused) .radio-icon::after {\n  inset-inline-start: -9px;\n}\n\n.native-wrapper .radio-icon {\n  width: 0.9375rem;\n  height: 1.5rem;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --color: Color of the radio\n   * @prop --color-checked: Color of the checked radio\n   * @prop --border-radius: Border radius of the radio\n   * @prop --inner-border-radius: Border radius of the inner checked radio\n   */\n  --inner-border-radius: 50%;\n  display: inline-block;\n  position: relative;\n  max-width: 100%;\n  min-height: inherit;\n  cursor: pointer;\n  user-select: none;\n  z-index: 2;\n  box-sizing: border-box;\n}\n\n:host(.radio-disabled) {\n  pointer-events: none;\n}\n\n.radio-icon {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  contain: layout size style;\n}\n\n.radio-icon,\n.radio-inner {\n  box-sizing: border-box;\n}\n\ninput {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  clip: rect(0 0 0 0);\n  opacity: 0;\n  overflow: hidden;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n:host(:focus) {\n  outline: none;\n}\n\n:host(.in-item) {\n  flex: 1 1 0;\n  width: 100%;\n  height: 100%;\n}\n\n/**\n * Radio can be slotted\n * in components such as item and\n * toolbar which is why we do not\n * limit the below behavior to just ion-item.\n */\n:host([slot=start]),\n:host([slot=end]) {\n  width: auto;\n}\n\n.radio-wrapper {\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: center;\n  height: inherit;\n  min-height: inherit;\n  cursor: inherit;\n}\n\n.label-text-wrapper {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n:host(.in-item) .label-text-wrapper {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n\n:host(.in-item.radio-label-placement-stacked) .label-text-wrapper {\n  margin-top: 10px;\n  margin-bottom: 16px;\n}\n\n:host(.in-item.radio-label-placement-stacked) .native-wrapper {\n  margin-bottom: 10px;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden {\n  display: none;\n}\n\n.native-wrapper {\n  display: flex;\n  align-items: center;\n}\n\n:host(.radio-justify-space-between) .radio-wrapper {\n  justify-content: space-between;\n}\n\n:host(.radio-justify-start) .radio-wrapper {\n  justify-content: start;\n}\n\n:host(.radio-justify-end) .radio-wrapper {\n  justify-content: end;\n}\n\n:host(.radio-alignment-start) .radio-wrapper {\n  align-items: start;\n}\n\n:host(.radio-alignment-center) .radio-wrapper {\n  align-items: center;\n}\n\n/**\n * Label is on the left of the radio in LTR and\n * on the right in RTL.\n */\n:host(.radio-label-placement-start) .radio-wrapper {\n  flex-direction: row;\n}\n\n:host(.radio-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the radio should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n/**\n * Label is on the right of the radio in LTR and\n * on the left in RTL.\n */\n:host(.radio-label-placement-end) .radio-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the radio should be on the start\n * when the label sits at the end.\n */\n:host(.radio-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n}\n\n:host(.radio-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the radio should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n}\n\n/**\n * Label is on the left of the radio in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.radio-label-placement-fixed) .label-text-wrapper {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n}\n\n/**\n * Label is on top of the radio.\n */\n:host(.radio-label-placement-stacked) .radio-wrapper {\n  flex-direction: column;\n}\n\n:host(.radio-label-placement-stacked) .label-text-wrapper {\n  transform: scale(0.75);\n  /**\n   * The margin between the label and\n   * the radio should be on the bottom\n   * when the label sits on top.\n   */\n  margin-left: 0;\n  margin-right: 0;\n  margin-bottom: 16px;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the radio.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n:host(.radio-label-placement-stacked.radio-alignment-start) .label-text-wrapper {\n  transform-origin: left top;\n}\n:host-context([dir=rtl]):host(.radio-label-placement-stacked.radio-alignment-start) .label-text-wrapper, :host-context([dir=rtl]).radio-label-placement-stacked.radio-alignment-start .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.radio-label-placement-stacked.radio-alignment-start:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n:host(.radio-label-placement-stacked.radio-alignment-center) .label-text-wrapper {\n  transform-origin: center top;\n}\n:host-context([dir=rtl]):host(.radio-label-placement-stacked.radio-alignment-center) .label-text-wrapper, :host-context([dir=rtl]).radio-label-placement-stacked.radio-alignment-center .label-text-wrapper {\n  transform-origin: calc(100% - center) top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.radio-label-placement-stacked.radio-alignment-center:dir(rtl)) .label-text-wrapper {\n    transform-origin: calc(100% - center) top;\n  }\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --color: rgb(var(--ion-text-color-rgb, 0, 0, 0), 0.6);\n  --color-checked: var(--ion-color-primary, #0054e9);\n  --border-width: 0.125rem;\n  --border-style: solid;\n  --border-radius: 50%;\n}\n\n:host(.ion-color) .radio-inner {\n  background: var(--ion-color-base);\n}\n\n:host(.ion-color.radio-checked) .radio-icon {\n  border-color: var(--ion-color-base);\n}\n\n.radio-icon {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  border-radius: var(--border-radius);\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--color);\n}\n\n.radio-inner {\n  border-radius: var(--inner-border-radius);\n  width: calc(50% + var(--border-width));\n  height: calc(50% + var(--border-width));\n  transform: scale3d(0, 0, 0);\n  transition: transform 280ms cubic-bezier(0.4, 0, 0.2, 1);\n  background: var(--color-checked);\n}\n\n:host(.radio-checked) .radio-icon {\n  border-color: var(--color-checked);\n}\n\n:host(.radio-checked) .radio-inner {\n  transform: scale3d(1, 1, 1);\n}\n\n:host(.radio-disabled) .label-text-wrapper {\n  opacity: 0.38;\n}\n\n:host(.radio-disabled) .native-wrapper {\n  opacity: 0.63;\n}\n\n:host(.ion-focused) .radio-icon::after {\n  border-radius: var(--inner-border-radius);\n  display: block;\n  position: absolute;\n  width: 36px;\n  height: 36px;\n  background: var(--ion-color-primary-tint, #1a65eb);\n  content: \"\";\n  opacity: 0.2;\n}\n\n.native-wrapper .radio-icon {\n  width: 1.25rem;\n  height: 1.25rem;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { isOptionSelected } from \"../../utils/forms/index\";\nimport { addEventListener, removeEventListener } from \"../../utils/helpers\";\nimport { createColorClasses, hostContext } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot - The label text to associate with the radio. Use the \"labelPlacement\" property to control where the label is placed relative to the radio.\n *\n * @part container - The container for the radio mark.\n * @part label - The label text describing the radio.\n * @part mark - The checkmark or dot used to indicate the checked state.\n */\nexport class Radio {\n    constructor() {\n        this.inputId = `ion-rb-${radioButtonIds++}`;\n        this.radioGroup = null;\n        this.updateState = () => {\n            if (this.radioGroup) {\n                const { compareWith, value: radioGroupValue } = this.radioGroup;\n                this.checked = isOptionSelected(radioGroupValue, this.value, compareWith);\n            }\n        };\n        this.onClick = () => {\n            const { radioGroup, checked, disabled } = this;\n            if (disabled) {\n                return;\n            }\n            /**\n             * The modern control does not use a native input\n             * inside of the radio host, so we cannot rely on the\n             * ev.preventDefault() behavior above. If the radio\n             * is checked and the parent radio group allows for empty\n             * selection, then we can set the checked state to false.\n             * Otherwise, the checked state should always be set\n             * to true because the checked state cannot be toggled.\n             */\n            if (checked && (radioGroup === null || radioGroup === void 0 ? void 0 : radioGroup.allowEmptySelection)) {\n                this.checked = false;\n            }\n            else {\n                this.checked = true;\n            }\n        };\n        this.onFocus = () => {\n            this.ionFocus.emit();\n        };\n        this.onBlur = () => {\n            this.ionBlur.emit();\n        };\n        this.checked = false;\n        this.buttonTabindex = -1;\n        this.color = undefined;\n        this.name = this.inputId;\n        this.disabled = false;\n        this.value = undefined;\n        this.labelPlacement = 'start';\n        this.justify = 'space-between';\n        this.alignment = 'center';\n    }\n    valueChanged() {\n        /**\n         * The new value of the radio may\n         * match the radio group's value,\n         * so we see if it should be checked.\n         */\n        this.updateState();\n    }\n    /** @internal */\n    async setFocus(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n        this.el.focus();\n    }\n    /** @internal */\n    async setButtonTabindex(value) {\n        this.buttonTabindex = value;\n    }\n    connectedCallback() {\n        if (this.value === undefined) {\n            this.value = this.inputId;\n        }\n        const radioGroup = (this.radioGroup = this.el.closest('ion-radio-group'));\n        if (radioGroup) {\n            this.updateState();\n            addEventListener(radioGroup, 'ionValueChange', this.updateState);\n        }\n    }\n    disconnectedCallback() {\n        const radioGroup = this.radioGroup;\n        if (radioGroup) {\n            removeEventListener(radioGroup, 'ionValueChange', this.updateState);\n            this.radioGroup = null;\n        }\n    }\n    get hasLabel() {\n        return this.el.textContent !== '';\n    }\n    renderRadioControl() {\n        return (h(\"div\", { class: \"radio-icon\", part: \"container\" }, h(\"div\", { class: \"radio-inner\", part: \"mark\" }), h(\"div\", { class: \"radio-ripple\" })));\n    }\n    render() {\n        const { checked, disabled, color, el, justify, labelPlacement, hasLabel, buttonTabindex, alignment } = this;\n        const mode = getIonMode(this);\n        const inItem = hostContext('ion-item', el);\n        return (h(Host, { key: 'cb00934d052260e97462e97a1669045cbb0b963a', onFocus: this.onFocus, onBlur: this.onBlur, onClick: this.onClick, class: createColorClasses(color, {\n                [mode]: true,\n                'in-item': inItem,\n                'radio-checked': checked,\n                'radio-disabled': disabled,\n                [`radio-justify-${justify}`]: true,\n                [`radio-alignment-${alignment}`]: true,\n                [`radio-label-placement-${labelPlacement}`]: true,\n                // Focus and active styling should not apply when the radio is in an item\n                'ion-activatable': !inItem,\n                'ion-focusable': !inItem,\n            }), role: \"radio\", \"aria-checked\": checked ? 'true' : 'false', \"aria-disabled\": disabled ? 'true' : null, tabindex: buttonTabindex }, h(\"label\", { key: '05613f89400469692442bf3c02c27f9299c5d6ef', class: \"radio-wrapper\" }, h(\"div\", { key: '89b5d7668c3856f417c318629086cf46a072efbe', class: {\n                'label-text-wrapper': true,\n                'label-text-wrapper-hidden': !hasLabel,\n            }, part: \"label\" }, h(\"slot\", { key: 'd5e43a8d0fe5a7fc323887d310fd64d6f87deef7' })), h(\"div\", { key: '7fd221189adcfccca1ed18dcd0a60cde6261120b', class: \"native-wrapper\" }, this.renderRadioControl()))));\n    }\n    static get is() { return \"ion-radio\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"radio.ios.scss\"],\n            \"md\": [\"radio.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"radio.ios.css\"],\n            \"md\": [\"radio.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The name of the control, which is submitted with the form data.\"\n                },\n                \"attribute\": \"name\",\n                \"reflect\": false,\n                \"defaultValue\": \"this.inputId\"\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the radio.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"value\": {\n                \"type\": \"any\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"any | null\",\n                    \"resolved\": \"any\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"the value of the radio.\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false\n            },\n            \"labelPlacement\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'end' | 'fixed' | 'stacked'\",\n                    \"resolved\": \"\\\"end\\\" | \\\"fixed\\\" | \\\"stacked\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Where to place the label relative to the radio.\\n`\\\"start\\\"`: The label will appear to the left of the radio in LTR and to the right in RTL.\\n`\\\"end\\\"`: The label will appear to the right of the radio in LTR and to the left in RTL.\\n`\\\"fixed\\\"`: The label has the same behavior as `\\\"start\\\"` except it also has a fixed width. Long text will be truncated with ellipses (\\\"...\\\").\\n`\\\"stacked\\\"`: The label will appear above the radio regardless of the direction. The alignment of the label can be controlled with the `alignment` property.\"\n                },\n                \"attribute\": \"label-placement\",\n                \"reflect\": false,\n                \"defaultValue\": \"'start'\"\n            },\n            \"justify\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'end' | 'space-between'\",\n                    \"resolved\": \"\\\"end\\\" | \\\"space-between\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"How to pack the label and radio within a line.\\n`\\\"start\\\"`: The label and radio will appear on the left in LTR and\\non the right in RTL.\\n`\\\"end\\\"`: The label and radio will appear on the right in LTR and\\non the left in RTL.\\n`\\\"space-between\\\"`: The label and radio will appear on opposite\\nends of the line with space between the two elements.\"\n                },\n                \"attribute\": \"justify\",\n                \"reflect\": false,\n                \"defaultValue\": \"'space-between'\"\n            },\n            \"alignment\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'center'\",\n                    \"resolved\": \"\\\"center\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"How to control the alignment of the radio and label on the cross axis.\\n`\\\"start\\\"`: The label and control will appear on the left of the cross axis in LTR, and on the right side in RTL.\\n`\\\"center\\\"`: The label and control will appear at the center of the cross axis in both LTR and RTL.\"\n                },\n                \"attribute\": \"alignment\",\n                \"reflect\": false,\n                \"defaultValue\": \"'center'\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"checked\": {},\n            \"buttonTabindex\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionFocus\",\n                \"name\": \"ionFocus\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the radio button has focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionBlur\",\n                \"name\": \"ionBlur\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the radio button loses focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"setFocus\": {\n                \"complexType\": {\n                    \"signature\": \"(ev: globalThis.Event) => Promise<void>\",\n                    \"parameters\": [{\n                            \"name\": \"ev\",\n                            \"type\": \"Event\",\n                            \"docs\": \"\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"globalThis\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::globalThis\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"\",\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }]\n                }\n            },\n            \"setButtonTabindex\": {\n                \"complexType\": {\n                    \"signature\": \"(value: number) => Promise<void>\",\n                    \"parameters\": [{\n                            \"name\": \"value\",\n                            \"type\": \"number\",\n                            \"docs\": \"\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"\",\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }]\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"value\",\n                \"methodName\": \"valueChanged\"\n            }];\n    }\n}\nlet radioButtonIds = 0;\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { renderHiddenInput } from \"../../utils/helpers\";\nimport { getIonMode } from \"../../global/ionic-global\";\nexport class RadioGroup {\n    constructor() {\n        this.inputId = `ion-rg-${radioGroupIds++}`;\n        this.labelId = `${this.inputId}-lbl`;\n        this.setRadioTabindex = (value) => {\n            const radios = this.getRadios();\n            // Get the first radio that is not disabled and the checked one\n            const first = radios.find((radio) => !radio.disabled);\n            const checked = radios.find((radio) => radio.value === value && !radio.disabled);\n            if (!first && !checked) {\n                return;\n            }\n            // If an enabled checked radio exists, set it to be the focusable radio\n            // otherwise we default to focus the first radio\n            const focusable = checked || first;\n            for (const radio of radios) {\n                const tabindex = radio === focusable ? 0 : -1;\n                radio.setButtonTabindex(tabindex);\n            }\n        };\n        this.onClick = (ev) => {\n            ev.preventDefault();\n            /**\n             * The Radio Group component mandates that only one radio button\n             * within the group can be selected at any given time. Since `ion-radio`\n             * is a shadow DOM component, it cannot natively perform this behavior\n             * using the `name` attribute.\n             */\n            const selectedRadio = ev.target && ev.target.closest('ion-radio');\n            /**\n             * Our current disabled prop definition causes Stencil to mark it\n             * as optional. While this is not desired, fixing this behavior\n             * in Stencil is a significant breaking change, so this effort is\n             * being de-risked in STENCIL-917. Until then, we compromise\n             * here by checking for falsy `disabled` values instead of strictly\n             * checking `disabled === false`.\n             */\n            if (selectedRadio && !selectedRadio.disabled) {\n                const currentValue = this.value;\n                const newValue = selectedRadio.value;\n                if (newValue !== currentValue) {\n                    this.value = newValue;\n                    this.emitValueChange(ev);\n                }\n                else if (this.allowEmptySelection) {\n                    this.value = undefined;\n                    this.emitValueChange(ev);\n                }\n            }\n        };\n        this.allowEmptySelection = false;\n        this.compareWith = undefined;\n        this.name = this.inputId;\n        this.value = undefined;\n    }\n    valueChanged(value) {\n        this.setRadioTabindex(value);\n        this.ionValueChange.emit({ value });\n    }\n    componentDidLoad() {\n        /**\n         * There's an issue when assigning a value to the radio group\n         * within the Angular primary content (rendering within the\n         * app component template). When the template is isolated to a route,\n         * the value is assigned correctly.\n         * To address this issue, we need to ensure that the watcher is\n         * called after the component has finished loading,\n         * allowing the emit to be dispatched correctly.\n         */\n        this.valueChanged(this.value);\n    }\n    async connectedCallback() {\n        // Get the list header if it exists and set the id\n        // this is used to set aria-labelledby\n        const header = this.el.querySelector('ion-list-header') || this.el.querySelector('ion-item-divider');\n        if (header) {\n            const label = (this.label = header.querySelector('ion-label'));\n            if (label) {\n                this.labelId = label.id = this.name + '-lbl';\n            }\n        }\n    }\n    getRadios() {\n        return Array.from(this.el.querySelectorAll('ion-radio'));\n    }\n    /**\n     * Emits an `ionChange` event.\n     *\n     * This API should be called for user committed changes.\n     * This API should not be used for external value changes.\n     */\n    emitValueChange(event) {\n        const { value } = this;\n        this.ionChange.emit({ value, event });\n    }\n    onKeydown(ev) {\n        const inSelectPopover = !!this.el.closest('ion-select-popover');\n        if (ev.target && !this.el.contains(ev.target)) {\n            return;\n        }\n        // Get all radios inside of the radio group and then\n        // filter out disabled radios since we need to skip those\n        const radios = this.getRadios().filter((radio) => !radio.disabled);\n        // Only move the radio if the current focus is in the radio group\n        if (ev.target && radios.includes(ev.target)) {\n            const index = radios.findIndex((radio) => radio === ev.target);\n            const current = radios[index];\n            let next;\n            // If hitting arrow down or arrow right, move to the next radio\n            // If we're on the last radio, move to the first radio\n            if (['ArrowDown', 'ArrowRight'].includes(ev.key)) {\n                next = index === radios.length - 1 ? radios[0] : radios[index + 1];\n            }\n            // If hitting arrow up or arrow left, move to the previous radio\n            // If we're on the first radio, move to the last radio\n            if (['ArrowUp', 'ArrowLeft'].includes(ev.key)) {\n                next = index === 0 ? radios[radios.length - 1] : radios[index - 1];\n            }\n            if (next && radios.includes(next)) {\n                next.setFocus(ev);\n                if (!inSelectPopover) {\n                    this.value = next.value;\n                    this.emitValueChange(ev);\n                }\n            }\n            // Update the radio group value when a user presses the\n            // space bar on top of a selected radio\n            if ([' '].includes(ev.key)) {\n                const previousValue = this.value;\n                this.value = this.allowEmptySelection && this.value !== undefined ? undefined : current.value;\n                if (previousValue !== this.value || this.allowEmptySelection) {\n                    /**\n                     * Value change should only be emitted if the value is different,\n                     * such as selecting a new radio with the space bar or if\n                     * the radio group allows for empty selection and the user\n                     * is deselecting a checked radio.\n                     */\n                    this.emitValueChange(ev);\n                }\n                // Prevent browsers from jumping\n                // to the bottom of the screen\n                ev.preventDefault();\n            }\n        }\n    }\n    render() {\n        const { label, labelId, el, name, value } = this;\n        const mode = getIonMode(this);\n        renderHiddenInput(true, el, name, value, false);\n        return h(Host, { key: 'b6b439d6d53d17a5a4d9853a7cf6065b28213338', role: \"radiogroup\", \"aria-labelledby\": label ? labelId : null, onClick: this.onClick, class: mode });\n    }\n    static get is() { return \"ion-radio-group\"; }\n    static get properties() {\n        return {\n            \"allowEmptySelection\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the radios can be deselected.\"\n                },\n                \"attribute\": \"allow-empty-selection\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"compareWith\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | RadioGroupCompareFn | null\",\n                    \"resolved\": \"((currentValue: any, compareValue: any) => boolean) | null | string | undefined\",\n                    \"references\": {\n                        \"RadioGroupCompareFn\": {\n                            \"location\": \"import\",\n                            \"path\": \"./radio-group-interface\",\n                            \"id\": \"src/components/radio-group/radio-group-interface.ts::RadioGroupCompareFn\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"This property allows developers to specify a custom function or property\\nname for comparing objects when determining the selected option in the\\nion-radio-group. When not specified, the default behavior will use strict\\nequality (===) for comparison.\"\n                },\n                \"attribute\": \"compare-with\",\n                \"reflect\": false\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The name of the control, which is submitted with the form data.\"\n                },\n                \"attribute\": \"name\",\n                \"reflect\": false,\n                \"defaultValue\": \"this.inputId\"\n            },\n            \"value\": {\n                \"type\": \"any\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"any | null\",\n                    \"resolved\": \"any\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"the value of the radio group.\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false\n            }\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionChange\",\n                \"name\": \"ionChange\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the value has changed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"RadioGroupChangeEventDetail\",\n                    \"resolved\": \"RadioGroupChangeEventDetail<any>\",\n                    \"references\": {\n                        \"RadioGroupChangeEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./radio-group-interface\",\n                            \"id\": \"src/components/radio-group/radio-group-interface.ts::RadioGroupChangeEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionValueChange\",\n                \"name\": \"ionValueChange\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Emitted when the `value` property has changed.\\nThis is used to ensure that `ion-radio` can respond\\nto any value property changes from the group.\"\n                },\n                \"complexType\": {\n                    \"original\": \"RadioGroupChangeEventDetail\",\n                    \"resolved\": \"RadioGroupChangeEventDetail<any>\",\n                    \"references\": {\n                        \"RadioGroupChangeEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./radio-group-interface\",\n                            \"id\": \"src/components/radio-group/radio-group-interface.ts::RadioGroupChangeEventDetail\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"value\",\n                \"methodName\": \"valueChanged\"\n            }];\n    }\n    static get listeners() {\n        return [{\n                \"name\": \"keydown\",\n                \"method\": \"onKeydown\",\n                \"target\": \"document\",\n                \"capture\": false,\n                \"passive\": false\n            }];\n    }\n}\nlet radioGroupIds = 0;\n"],"mappings":"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"}