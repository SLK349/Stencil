{"version":3,"names":["GestureController","constructor","this","gestureId","requestedStart","Map","disabledGestures","disabledScroll","Set","createGesture","config","_a","GestureDelegate","newID","name","priority","disableScroll","createBlocker","opts","BlockerDelegate","disable","start","gestureName","id","canStart","delete","set","capture","maxPriority","forEach","value","Math","max","capturedId","clear","event","CustomEvent","detail","document","dispatchEvent","release","undefined","disableGesture","get","add","enableGesture","size","body","classList","BACKDROP_NO_SCROLL","enableScroll","remove","isDisabled","isCaptured","isScrollDisabled","disabled","ctrl","captured","destroy","block","gesture","unblock","GESTURE_CONTROLLER"],"sources":["node_modules/@ionic/core/dist/collection/utils/gesture/gesture-controller.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nclass GestureController {\n    constructor() {\n        this.gestureId = 0;\n        this.requestedStart = new Map();\n        this.disabledGestures = new Map();\n        this.disabledScroll = new Set();\n    }\n    /**\n     * Creates a gesture delegate based on the GestureConfig passed\n     */\n    createGesture(config) {\n        var _a;\n        return new GestureDelegate(this, this.newID(), config.name, (_a = config.priority) !== null && _a !== void 0 ? _a : 0, !!config.disableScroll);\n    }\n    /**\n     * Creates a blocker that will block any other gesture events from firing. Set in the ion-gesture component.\n     */\n    createBlocker(opts = {}) {\n        return new BlockerDelegate(this, this.newID(), opts.disable, !!opts.disableScroll);\n    }\n    start(gestureName, id, priority) {\n        if (!this.canStart(gestureName)) {\n            this.requestedStart.delete(id);\n            return false;\n        }\n        this.requestedStart.set(id, priority);\n        return true;\n    }\n    capture(gestureName, id, priority) {\n        if (!this.start(gestureName, id, priority)) {\n            return false;\n        }\n        const requestedStart = this.requestedStart;\n        let maxPriority = -10000;\n        requestedStart.forEach((value) => {\n            maxPriority = Math.max(maxPriority, value);\n        });\n        if (maxPriority === priority) {\n            this.capturedId = id;\n            requestedStart.clear();\n            const event = new CustomEvent('ionGestureCaptured', { detail: { gestureName } });\n            document.dispatchEvent(event);\n            return true;\n        }\n        requestedStart.delete(id);\n        return false;\n    }\n    release(id) {\n        this.requestedStart.delete(id);\n        if (this.capturedId === id) {\n            this.capturedId = undefined;\n        }\n    }\n    disableGesture(gestureName, id) {\n        let set = this.disabledGestures.get(gestureName);\n        if (set === undefined) {\n            set = new Set();\n            this.disabledGestures.set(gestureName, set);\n        }\n        set.add(id);\n    }\n    enableGesture(gestureName, id) {\n        const set = this.disabledGestures.get(gestureName);\n        if (set !== undefined) {\n            set.delete(id);\n        }\n    }\n    disableScroll(id) {\n        this.disabledScroll.add(id);\n        if (this.disabledScroll.size === 1) {\n            document.body.classList.add(BACKDROP_NO_SCROLL);\n        }\n    }\n    enableScroll(id) {\n        this.disabledScroll.delete(id);\n        if (this.disabledScroll.size === 0) {\n            document.body.classList.remove(BACKDROP_NO_SCROLL);\n        }\n    }\n    canStart(gestureName) {\n        if (this.capturedId !== undefined) {\n            // a gesture already captured\n            return false;\n        }\n        if (this.isDisabled(gestureName)) {\n            return false;\n        }\n        return true;\n    }\n    isCaptured() {\n        return this.capturedId !== undefined;\n    }\n    isScrollDisabled() {\n        return this.disabledScroll.size > 0;\n    }\n    isDisabled(gestureName) {\n        const disabled = this.disabledGestures.get(gestureName);\n        if (disabled && disabled.size > 0) {\n            return true;\n        }\n        return false;\n    }\n    newID() {\n        this.gestureId++;\n        return this.gestureId;\n    }\n}\nclass GestureDelegate {\n    constructor(ctrl, id, name, priority, disableScroll) {\n        this.id = id;\n        this.name = name;\n        this.disableScroll = disableScroll;\n        this.priority = priority * 1000000 + id;\n        this.ctrl = ctrl;\n    }\n    canStart() {\n        if (!this.ctrl) {\n            return false;\n        }\n        return this.ctrl.canStart(this.name);\n    }\n    start() {\n        if (!this.ctrl) {\n            return false;\n        }\n        return this.ctrl.start(this.name, this.id, this.priority);\n    }\n    capture() {\n        if (!this.ctrl) {\n            return false;\n        }\n        const captured = this.ctrl.capture(this.name, this.id, this.priority);\n        if (captured && this.disableScroll) {\n            this.ctrl.disableScroll(this.id);\n        }\n        return captured;\n    }\n    release() {\n        if (this.ctrl) {\n            this.ctrl.release(this.id);\n            if (this.disableScroll) {\n                this.ctrl.enableScroll(this.id);\n            }\n        }\n    }\n    destroy() {\n        this.release();\n        this.ctrl = undefined;\n    }\n}\nclass BlockerDelegate {\n    constructor(ctrl, id, disable, disableScroll) {\n        this.id = id;\n        this.disable = disable;\n        this.disableScroll = disableScroll;\n        this.ctrl = ctrl;\n    }\n    block() {\n        if (!this.ctrl) {\n            return;\n        }\n        if (this.disable) {\n            for (const gesture of this.disable) {\n                this.ctrl.disableGesture(gesture, this.id);\n            }\n        }\n        if (this.disableScroll) {\n            this.ctrl.disableScroll(this.id);\n        }\n    }\n    unblock() {\n        if (!this.ctrl) {\n            return;\n        }\n        if (this.disable) {\n            for (const gesture of this.disable) {\n                this.ctrl.enableGesture(gesture, this.id);\n            }\n        }\n        if (this.disableScroll) {\n            this.ctrl.enableScroll(this.id);\n        }\n    }\n    destroy() {\n        this.unblock();\n        this.ctrl = undefined;\n    }\n}\nexport const BACKDROP_NO_SCROLL = 'backdrop-no-scroll';\nexport const GESTURE_CONTROLLER = new GestureController();\n"],"mappings":"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"}