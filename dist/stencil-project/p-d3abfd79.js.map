{"version":3,"names":["createSlotMutationController","el","slotName","mutationCallback","hostMutationObserver","slottedContentMutationObserver","win","undefined","slots","Array","isArray","MutationObserver","entries","entry","node","addedNodes","nodeType","Node","ELEMENT_NODE","includes","slot","raf","watchForSlotChange","observe","childList","subtree","slottedEl","_a","disconnect","removedNodes","destroySlottedContentObserver","parentElement","destroy","getCounterText","value","maxLength","counterFormatter","valueLength","toString","length","defaultCounterText","defaultCounterFormatter","e","printIonError","maxlength"],"sources":["node_modules/@ionic/core/dist/collection/utils/slot-mutation-controller.js","node_modules/@ionic/core/dist/collection/components/input/input.utils.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { win } from \"./browser/index\";\nimport { raf } from \"./helpers\";\n/**\n * Used to update a scoped component that uses emulated slots. This fires when\n * content is passed into the slot or when the content inside of a slot changes.\n * This is not needed for components using native slots in the Shadow DOM.\n * @internal\n * @param el The host element to observe\n * @param slotName mutationCallback will fire when nodes on these slot(s) change\n * @param mutationCallback The callback to fire whenever the slotted content changes\n */\nexport const createSlotMutationController = (el, slotName, mutationCallback) => {\n    let hostMutationObserver;\n    let slottedContentMutationObserver;\n    if (win !== undefined && 'MutationObserver' in win) {\n        const slots = Array.isArray(slotName) ? slotName : [slotName];\n        hostMutationObserver = new MutationObserver((entries) => {\n            for (const entry of entries) {\n                for (const node of entry.addedNodes) {\n                    /**\n                     * Check to see if the added node\n                     *  is our slotted content.\n                     */\n                    if (node.nodeType === Node.ELEMENT_NODE && slots.includes(node.slot)) {\n                        /**\n                         * If so, we want to watch the slotted\n                         * content itself for changes. This lets us\n                         * detect when content inside of the slot changes.\n                         */\n                        mutationCallback();\n                        /**\n                         * Adding the listener in an raf\n                         * waits until Stencil moves the slotted element\n                         * into the correct place in the event that\n                         * slotted content is being added.\n                         */\n                        raf(() => watchForSlotChange(node));\n                        return;\n                    }\n                }\n            }\n        });\n        hostMutationObserver.observe(el, {\n            childList: true,\n            /**\n             * This fixes an issue with the `ion-input` and\n             * `ion-textarea` not re-rendering in some cases\n             * when using the label slot functionality.\n             *\n             * HTML element patches in Stencil that are enabled\n             * by the `experimentalSlotFixes` flag in Stencil v4\n             * result in DOM manipulations that won't trigger\n             * the current mutation observer configuration and\n             * callback.\n             */\n            subtree: true,\n        });\n    }\n    /**\n     * Listen for changes inside of the slotted content.\n     * We can listen for subtree changes here to be\n     * informed of text within the slotted content\n     * changing. Doing this on the host is possible\n     * but it is much more expensive to do because\n     * it also listens for changes to the internals\n     * of the component.\n     */\n    const watchForSlotChange = (slottedEl) => {\n        var _a;\n        if (slottedContentMutationObserver) {\n            slottedContentMutationObserver.disconnect();\n            slottedContentMutationObserver = undefined;\n        }\n        slottedContentMutationObserver = new MutationObserver((entries) => {\n            mutationCallback();\n            for (const entry of entries) {\n                for (const node of entry.removedNodes) {\n                    /**\n                     * If the element was removed then we\n                     * need to destroy the MutationObserver\n                     * so the element can be garbage collected.\n                     */\n                    if (node.nodeType === Node.ELEMENT_NODE && node.slot === slotName) {\n                        destroySlottedContentObserver();\n                    }\n                }\n            }\n        });\n        /**\n         * Listen for changes inside of the element\n         * as well as anything deep in the tree.\n         * We listen on the parentElement so that we can\n         * detect when slotted element itself is removed.\n         */\n        slottedContentMutationObserver.observe((_a = slottedEl.parentElement) !== null && _a !== void 0 ? _a : slottedEl, { subtree: true, childList: true });\n    };\n    const destroy = () => {\n        if (hostMutationObserver) {\n            hostMutationObserver.disconnect();\n            hostMutationObserver = undefined;\n        }\n        destroySlottedContentObserver();\n    };\n    const destroySlottedContentObserver = () => {\n        if (slottedContentMutationObserver) {\n            slottedContentMutationObserver.disconnect();\n            slottedContentMutationObserver = undefined;\n        }\n    };\n    return {\n        destroy,\n    };\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { printIonError } from \"../../utils/logging/index\";\nexport const getCounterText = (value, maxLength, counterFormatter) => {\n    const valueLength = value == null ? 0 : value.toString().length;\n    const defaultCounterText = defaultCounterFormatter(valueLength, maxLength);\n    /**\n     * If developers did not pass a custom formatter,\n     * use the default one.\n     */\n    if (counterFormatter === undefined) {\n        return defaultCounterText;\n    }\n    /**\n     * Otherwise, try to use the custom formatter\n     * and fallback to the default formatter if\n     * there was an error.\n     */\n    try {\n        return counterFormatter(valueLength, maxLength);\n    }\n    catch (e) {\n        printIonError('Exception in provided `counterFormatter`.', e);\n        return defaultCounterText;\n    }\n};\nconst defaultCounterFormatter = (length, maxlength) => {\n    return `${length} / ${maxlength}`;\n};\n"],"mappings":";;;GAcY,MAACA,EAA+B,CAACC,EAAIC,EAAUC,KACvD,IAAIC,EACJ,IAAIC,EACJ,GAAIC,IAAQC,WAAa,qBAAsBD,EAAK,CAChD,MAAME,EAAQC,MAAMC,QAAQR,GAAYA,EAAW,CAACA,GACpDE,EAAuB,IAAIO,kBAAkBC,IACzC,IAAK,MAAMC,KAASD,EAAS,CACzB,IAAK,MAAME,KAAQD,EAAME,WAAY,CAKjC,GAAID,EAAKE,WAAaC,KAAKC,cAAgBV,EAAMW,SAASL,EAAKM,MAAO,CAMlEjB,IAOAkB,GAAI,IAAMC,EAAmBR,KAC7B,MACxB,CACA,CACA,KAEQV,EAAqBmB,QAAQtB,EAAI,CAC7BuB,UAAW,KAYXC,QAAS,MAErB,CAUI,MAAMH,EAAsBI,IACxB,IAAIC,EACJ,GAAItB,EAAgC,CAChCA,EAA+BuB,aAC/BvB,EAAiCE,SAC7C,CACQF,EAAiC,IAAIM,kBAAkBC,IACnDT,IACA,IAAK,MAAMU,KAASD,EAAS,CACzB,IAAK,MAAME,KAAQD,EAAMgB,aAAc,CAMnC,GAAIf,EAAKE,WAAaC,KAAKC,cAAgBJ,EAAKM,OAASlB,EAAU,CAC/D4B,GACxB,CACA,CACA,KAQQzB,EAA+BkB,SAASI,EAAKD,EAAUK,iBAAmB,MAAQJ,SAAY,EAAIA,EAAKD,EAAW,CAAED,QAAS,KAAMD,UAAW,MAAO,EAEzJ,MAAMQ,EAAU,KACZ,GAAI5B,EAAsB,CACtBA,EAAqBwB,aACrBxB,EAAuBG,SACnC,CACQuB,GAA+B,EAEnC,MAAMA,EAAgC,KAClC,GAAIzB,EAAgC,CAChCA,EAA+BuB,aAC/BvB,EAAiCE,SAC7C,GAEI,MAAO,CACHyB,UACH;;;GC9GO,MAACC,EAAiB,CAACC,EAAOC,EAAWC,KAC7C,MAAMC,EAAcH,GAAS,KAAO,EAAIA,EAAMI,WAAWC,OACzD,MAAMC,EAAqBC,EAAwBJ,EAAaF,GAKhE,GAAIC,IAAqB7B,UAAW,CAChC,OAAOiC,CACf,CAMI,IACI,OAAOJ,EAAiBC,EAAaF,EAC7C,CACI,MAAOO,GACHC,EAAc,4CAA6CD,GAC3D,OAAOF,CACf,GAEA,MAAMC,EAA0B,CAACF,EAAQK,IAC9B,GAAGL,OAAYK,W"}