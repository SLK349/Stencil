{"version":3,"names":["selectIosCss","IonSelectIosStyle0","selectMdCss","IonSelectMdStyle0","Select","constructor","hostRef","this","inputId","selectIds","inheritedAttributes","onClick","ev","target","closestSlot","closest","el","setFocus","open","preventDefault","onFocus","ionFocus","emit","onBlur","ionBlur","isExpanded","cancelText","color","undefined","compareWith","disabled","fill","interface","interfaceOptions","justify","label","labelPlacement","multiple","name","okText","placeholder","selectedText","toggleIcon","expandedIcon","shape","value","styleChanged","emitStyle","setValue","ionChange","componentWillLoad","inheritAttributes","connectedCallback","notchController","createNotchController","notchSpacerEl","labelSlot","updateOverlayOptions","mutationO","watchForOptions","async","forceUpdate","disconnectedCallback","disconnect","destroy","event","overlay","createOverlay","onDidDismiss","then","ionDismiss","present","indexOfSelected","childOpts","map","o","indexOf","selectedItem","querySelector","focusVisibleElement","interactiveEl","focus","firstEnabledOption","selectInterface","console","warn","openActionSheet","openPopover","openAlert","buttons","createActionSheetButtons","popover","options","createPopoverOptions","inputType","inputs","createAlertInputs","data","selectValue","actionSheetButtons","option","getOptionValue","copyClasses","Array","from","classList","filter","cls","join","optClass","OPTION_CLASS","role","isOptionSelected","text","textContent","cssClass","handler","push","ionCancel","alertInputs","type","checked","popoverOptions","selected","close","mode","getIonMode","showBackdrop","size","hasFloatingOrStackedLabel","Object","assign","detail","ionShadowTarget","nativeWrapperEl","popoverOpts","alignment","component","componentProps","header","subHeader","message","popoverController","create","actionSheetOpts","actionSheetController","alertOpts","labelText","selectedValues","alertController","Promise","resolve","dismiss","hasValue","getText","querySelectorAll","generateText","focusEl","style","ionStyle","renderLabel","h","class","hasLabel","part","componentDidRender","_a","calculateNotchWidth","renderLabelContainer","hasOutlineFill","ref","renderSelectText","displayValue","addPlaceholderClass","selectText","selectTextClasses","textPart","renderSelectIcon","icon","defaultIcon","chevronExpand","caretDownSharp","ariaLabel","definedLabel","renderedLabel","renderListbox","id","render","justifyEnabled","rtl","isRTL","inItem","hostContext","shouldRenderHighlight","hasStartEndSlots","renderHiddenInput","parseValue","labelShouldFloat","Host","key","createColorClasses","isArray","toString","opts","v","textForValue","opt","selectOpt","find","compareOptions"],"sources":["node_modules/@ionic/core/dist/collection/components/select/select.ios.css?tag=ion-select&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/select/select.md.css?tag=ion-select&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/select/select.js"],"sourcesContent":["/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the select\n   * @prop --padding-top: Top padding of the select\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the select\n   * @prop --padding-bottom: Bottom padding of the select\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the select\n   *\n   * @prop --placeholder-color: Color of the select placeholder text\n   * @prop --placeholder-opacity: Opacity of the select placeholder text\n   *\n   * @prop --highlight-height: The height of the highlight on the select. Only applies to md mode.\n   * @prop --highlight-color-focused: The color of the highlight on the select when focused\n   * @prop --highlight-color-invalid: The color of the highlight on the select when invalid\n   * @prop --highlight-color-valid: The color of the highlight on the select when valid\n   *\n   * @prop --border-color: Color of the select border\n   * @prop --border-radius: Radius of the select border. A large radius may display unevenly when using fill=\"outline\"; if needed, use shape=\"round\" instead or increase --padding-start.\n   * @prop --border-style: Style of the select border\n   * @prop --border-width: Width of the select border\n   *\n   * @prop --ripple-color: The color of the ripple effect on MD mode.\n   */\n  --padding-top: 0px;\n  --padding-end: 0px;\n  --padding-bottom: 0px;\n  --padding-start: 0px;\n  --placeholder-color: currentColor;\n  --placeholder-opacity: var(--ion-placeholder-opacity, 0.6);\n  --background: transparent;\n  --border-style: solid;\n  --highlight-color-focused: var(--ion-color-primary, #0054e9);\n  --highlight-color-valid: var(--ion-color-success, #2dd55b);\n  --highlight-color-invalid: var(--ion-color-danger, #c5000f);\n  /**\n   * This is a private API that is used to switch\n   * out the highlight color based on the state\n   * of the component without having to write\n   * different selectors for different fill variants.\n   */\n  --highlight-color: var(--highlight-color-focused);\n  display: block;\n  position: relative;\n  width: 100%;\n  min-height: 44px;\n  font-family: var(--ion-font-family, inherit);\n  white-space: nowrap;\n  cursor: pointer;\n  z-index: 2;\n}\n\n/**\n * Since the label sits on top of the element,\n * the component needs to be taller otherwise the\n * label will appear too close to the select text.\n */\n:host(.select-label-placement-floating),\n:host(.select-label-placement-stacked) {\n  min-height: 56px;\n}\n\n:host(.ion-color) {\n  --highlight-color-focused: var(--ion-color-base);\n}\n\n:host(.in-item) {\n  flex: 1 1 0;\n}\n\n:host(.select-disabled) {\n  pointer-events: none;\n}\n\n:host(.ion-focused) button {\n  border: 2px solid #5e9ed6;\n}\n\n/**\n * Select can be slotted\n * in components such as item and\n * toolbar which is why we do not\n * limit the below behavior to just ion-item.\n */\n:host([slot=start]),\n:host([slot=end]) {\n  width: auto;\n}\n\n.select-placeholder {\n  color: var(--placeholder-color);\n  opacity: var(--placeholder-opacity);\n}\n\nbutton {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  clip: rect(0 0 0 0);\n  opacity: 0;\n  overflow: hidden;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n.select-icon {\n  -webkit-margin-start: 4px;\n  margin-inline-start: 4px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  position: relative;\n  /**\n   * Prevent the icon from shrinking when the label and/or\n   * selected item text is long enough to fill the rest of\n   * the container.\n   */\n  flex-shrink: 0;\n}\n\n/**\n * Ensure that the select icon has\n * the correct color contrast when\n * used inside of an item.\n */\n:host(.in-item-color) .select-icon {\n  color: inherit;\n}\n\n/**\n * The select icon should be centered with\n * the entire container not just the control\n * with floating/stacked labels.\n */\n:host(.select-label-placement-stacked) .select-icon,\n:host(.select-label-placement-floating) .select-icon {\n  position: absolute;\n  height: 100%;\n}\n\n/**\n * This positions the icon at the correct\n * edge of the component with LTR and RTL\n * text directions. The position mixin cannot be\n * used here because the icon is in the Shadow DOM.\n */\n:host(.select-ltr.select-label-placement-stacked) .select-icon,\n:host(.select-ltr.select-label-placement-floating) .select-icon {\n  right: var(--padding-end, 0);\n}\n\n:host(.select-rtl.select-label-placement-stacked) .select-icon,\n:host(.select-rtl.select-label-placement-floating) .select-icon {\n  left: var(--padding-start, 0);\n}\n\n.select-text {\n  flex: 1;\n  min-width: 16px;\n  font-size: inherit;\n  text-overflow: ellipsis;\n  white-space: inherit;\n  overflow: hidden;\n}\n\n.select-wrapper {\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  border-radius: var(--border-radius);\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: center;\n  height: inherit;\n  /**\n   * This allows developers to set the height\n   * on the host of the element but still have\n   * the label take up the full height\n   * of the parent.\n   */\n  min-height: inherit;\n  transition: background-color 15ms linear;\n  background: var(--background);\n  line-height: normal;\n  cursor: inherit;\n  box-sizing: border-box;\n}\n\n.select-wrapper .select-placeholder {\n  /**\n   * When the floating label appears on top of the\n   * select, we need to fade the text out so that the\n   * label does not overlap with the placeholder.\n   */\n  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.select-wrapper-inner {\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n}\n\n:host(.select-label-placement-stacked) .select-wrapper-inner,\n:host(.select-label-placement-floating) .select-wrapper-inner {\n  /**\n   * When using a stacked/floating label, the inner wrapper is\n   * stacked vertically under the label container. This line\n   * ensures that the inner wrapper fills all the remaining height\n   * of the component.\n   */\n  flex-grow: 1;\n}\n\n:host(.ion-touched.ion-invalid) {\n  --highlight-color: var(--highlight-color-invalid);\n}\n\n/**\n * The component highlight is only shown\n * on focus, so we can safely set the valid\n * color state when touched/valid. If we\n * set it when .has-focus is present then\n * the highlight color would change\n * from the valid color to the component's\n * color during the transition after the\n * component loses focus.\n */\n:host(.ion-valid) {\n  --highlight-color: var(--highlight-color-valid);\n}\n\n.label-text-wrapper {\n  /**\n   * This causes the label to take up\n   * the entire height of its container\n   * while still keeping the text centered.\n   */\n  display: flex;\n  align-items: center;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the select.\n   * However, we do not set the max\n   * width to 100% because then\n   * only the label would show and users\n   * would not be able to see what they are typing.\n   */\n  max-width: 200px;\n  transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n  /**\n   * This ensures that double tapping this text\n   * clicks the <label> and focuses the input\n   * when a screen reader is enabled.\n   */\n  pointer-events: none;\n}\n\n/**\n * We need to use two elements instead of\n * one. The .label-text-wrapper is responsible\n * for centering the label text vertically regardless\n * of the input height using flexbox.\n *\n * The .label-text element is responsible for controlling\n * overflow when label-placement=\"fixed\".\n * We want the ellipses to show up when the\n * fixed label overflows, but text-overflow: ellipsis only\n * works on block-level elements. A flex item is\n * considered blockified (https://www.w3.org/TR/css-display-3/#blockify).\n */\n.label-text,\n::slotted([slot=label]) {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden,\n.select-outline-notch-hidden {\n  display: none;\n}\n\n.native-wrapper {\n  display: flex;\n  align-items: center;\n  /**\n   * When the floating label appears on top of the\n   * input, we need to fade the input out so that the\n   * label does not overlap with the placeholder.\n   */\n  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);\n  /**\n   * This ensures that the .select-text gets\n   * truncated with ellipses when the text is\n   * too long for the screen.\n   */\n  overflow: hidden;\n}\n\n:host(.select-justify-space-between) .select-wrapper {\n  justify-content: space-between;\n}\n\n:host(.select-justify-start) .select-wrapper {\n  justify-content: start;\n}\n\n:host(.select-justify-end) .select-wrapper {\n  justify-content: end;\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL.\n */\n:host(.select-label-placement-start) .select-wrapper {\n  flex-direction: row;\n}\n\n:host(.select-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the select should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the right of the select in LTR and\n * on the left in RTL.\n */\n:host(.select-label-placement-end) .select-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the select should be on the start\n * when the label sits at the end.\n */\n:host(.select-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n:host(.select-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the select should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the left of the select in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.select-label-placement-fixed) .label-text-wrapper {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n/**\n * Stacked: Label sits above the select and is scaled down.\n * Floating: Label sits over the select when the select has no\n * value and is blurred. Label sits above the input and is scaled\n * down when the select is focused or has a value.\n *\n */\n:host(.select-label-placement-stacked) .select-wrapper,\n:host(.select-label-placement-floating) .select-wrapper {\n  flex-direction: column;\n  align-items: start;\n}\n\n/**\n * Ensures that the label animates\n * up and to the left in LTR or\n * up and to the right in RTL.\n */\n:host(.select-label-placement-stacked) .label-text-wrapper,\n:host(.select-label-placement-floating) .label-text-wrapper {\n  max-width: 100%;\n}\n\n:host(.select-ltr.select-label-placement-stacked) .label-text-wrapper,\n:host(.select-ltr.select-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n}\n\n:host(.select-rtl.select-label-placement-stacked) .label-text-wrapper,\n:host(.select-rtl.select-label-placement-floating) .label-text-wrapper {\n  transform-origin: right top;\n}\n\n/**\n * Ensures the select does not\n * overlap the label.\n * Also ensure that the native wrapper\n * takes up the remaining available height and width.\n */\n:host(.select-label-placement-stacked) .native-wrapper,\n:host(.select-label-placement-floating) .native-wrapper {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 1px;\n  margin-bottom: 0;\n  flex-grow: 1;\n  width: 100%;\n}\n\n/**\n * This makes the label sit over the select\n * when the select is blurred and has no value.\n * The label should not sit over the select if the\n * select has a placeholder.\n * Note: This is different from what ion-input does\n * because the activating the select causes an overlay\n * to appear. This makes it hard to read the placeholder.\n * With ion-input, the input just focuses and the placeholder\n * is still easy to read.\n */\n:host(.select-label-placement-floating) .label-text-wrapper {\n  transform: translateY(100%) scale(1);\n}\n\n/**\n * The placeholder should be hidden when the label\n * is on top of the select. This prevents the label\n * from overlapping any placeholder value.\n *\n * TODO(FW-5592): Remove :not(.label-floating) piece\n */\n:host(.select-label-placement-floating:not(.label-floating)) .native-wrapper .select-placeholder {\n  opacity: 0;\n}\n\n/**\n * We don't use .label-floating here because that would\n * also include the case where the label is floating due\n * to content in the start/end slot. We want the opacity\n * to remain at the default in this case, since the select\n * isn't being actively interacted with.\n *\n * TODO(FW-5592): Change entire selector to:\n * :host(.label-floating.select-label-placement-floating) .native-wrapper .select-placeholder\n */\n:host(.select-expanded.select-label-placement-floating) .native-wrapper .select-placeholder,\n:host(.ion-focused.select-label-placement-floating) .native-wrapper .select-placeholder,\n:host(.has-value.select-label-placement-floating) .native-wrapper .select-placeholder {\n  opacity: 1;\n}\n\n/**\n * This makes the label sit above the input.\n */\n:host(.label-floating) .label-text-wrapper {\n  transform: translateY(50%) scale(0.75);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the input.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n::slotted([slot=start]), ::slotted([slot=end]) {\n  /**\n   * Prevent the slots from shrinking when the label and/or\n   * selected item text is long enough to fill the rest of\n   * the container.\n   */\n  flex-shrink: 0;\n}\n\n::slotted([slot=start]:last-of-type) {\n  margin-inline-end: 16px;\n  margin-inline-start: 0;\n}\n\n::slotted([slot=end]:first-of-type) {\n  margin-inline-start: 16px;\n  margin-inline-end: 0;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --highlight-height: 0px;\n}\n\n.select-icon {\n  width: 1.125rem;\n  height: 1.125rem;\n  color: var(--ion-color-step-650, var(--ion-text-color-step-350, #595959));\n}\n\n:host(.select-label-placement-stacked) .select-wrapper-inner,\n:host(.select-label-placement-floating) .select-wrapper-inner {\n  width: calc(100% - 1.125rem - 4px);\n}\n\n:host(.select-disabled) {\n  opacity: 0.3;\n}\n\n/**\n * Slotted buttons have a lot of default padding that can\n * cause them to look misaligned from other pieces such\n * as the control's label, especially when using a clear\n * fill. We also make them circular to ensure that non-\n * clear buttons and the focus/hover state on clear ones\n * don't look too crowded.\n */\n::slotted(ion-button[slot=start].button-has-icon-only),\n::slotted(ion-button[slot=end].button-has-icon-only) {\n  --border-radius: 50%;\n  --padding-start: 0;\n  --padding-end: 0;\n  --padding-top: 0;\n  --padding-bottom: 0;\n  aspect-ratio: 1;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the select\n   * @prop --padding-top: Top padding of the select\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the select\n   * @prop --padding-bottom: Bottom padding of the select\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the select\n   *\n   * @prop --placeholder-color: Color of the select placeholder text\n   * @prop --placeholder-opacity: Opacity of the select placeholder text\n   *\n   * @prop --highlight-height: The height of the highlight on the select. Only applies to md mode.\n   * @prop --highlight-color-focused: The color of the highlight on the select when focused\n   * @prop --highlight-color-invalid: The color of the highlight on the select when invalid\n   * @prop --highlight-color-valid: The color of the highlight on the select when valid\n   *\n   * @prop --border-color: Color of the select border\n   * @prop --border-radius: Radius of the select border. A large radius may display unevenly when using fill=\"outline\"; if needed, use shape=\"round\" instead or increase --padding-start.\n   * @prop --border-style: Style of the select border\n   * @prop --border-width: Width of the select border\n   *\n   * @prop --ripple-color: The color of the ripple effect on MD mode.\n   */\n  --padding-top: 0px;\n  --padding-end: 0px;\n  --padding-bottom: 0px;\n  --padding-start: 0px;\n  --placeholder-color: currentColor;\n  --placeholder-opacity: var(--ion-placeholder-opacity, 0.6);\n  --background: transparent;\n  --border-style: solid;\n  --highlight-color-focused: var(--ion-color-primary, #0054e9);\n  --highlight-color-valid: var(--ion-color-success, #2dd55b);\n  --highlight-color-invalid: var(--ion-color-danger, #c5000f);\n  /**\n   * This is a private API that is used to switch\n   * out the highlight color based on the state\n   * of the component without having to write\n   * different selectors for different fill variants.\n   */\n  --highlight-color: var(--highlight-color-focused);\n  display: block;\n  position: relative;\n  width: 100%;\n  min-height: 44px;\n  font-family: var(--ion-font-family, inherit);\n  white-space: nowrap;\n  cursor: pointer;\n  z-index: 2;\n}\n\n/**\n * Since the label sits on top of the element,\n * the component needs to be taller otherwise the\n * label will appear too close to the select text.\n */\n:host(.select-label-placement-floating),\n:host(.select-label-placement-stacked) {\n  min-height: 56px;\n}\n\n:host(.ion-color) {\n  --highlight-color-focused: var(--ion-color-base);\n}\n\n:host(.in-item) {\n  flex: 1 1 0;\n}\n\n:host(.select-disabled) {\n  pointer-events: none;\n}\n\n:host(.ion-focused) button {\n  border: 2px solid #5e9ed6;\n}\n\n/**\n * Select can be slotted\n * in components such as item and\n * toolbar which is why we do not\n * limit the below behavior to just ion-item.\n */\n:host([slot=start]),\n:host([slot=end]) {\n  width: auto;\n}\n\n.select-placeholder {\n  color: var(--placeholder-color);\n  opacity: var(--placeholder-opacity);\n}\n\nbutton {\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0;\n  border: 0;\n  outline: 0;\n  clip: rect(0 0 0 0);\n  opacity: 0;\n  overflow: hidden;\n  -webkit-appearance: none;\n  -moz-appearance: none;\n}\n\n.select-icon {\n  -webkit-margin-start: 4px;\n  margin-inline-start: 4px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  position: relative;\n  /**\n   * Prevent the icon from shrinking when the label and/or\n   * selected item text is long enough to fill the rest of\n   * the container.\n   */\n  flex-shrink: 0;\n}\n\n/**\n * Ensure that the select icon has\n * the correct color contrast when\n * used inside of an item.\n */\n:host(.in-item-color) .select-icon {\n  color: inherit;\n}\n\n/**\n * The select icon should be centered with\n * the entire container not just the control\n * with floating/stacked labels.\n */\n:host(.select-label-placement-stacked) .select-icon,\n:host(.select-label-placement-floating) .select-icon {\n  position: absolute;\n  height: 100%;\n}\n\n/**\n * This positions the icon at the correct\n * edge of the component with LTR and RTL\n * text directions. The position mixin cannot be\n * used here because the icon is in the Shadow DOM.\n */\n:host(.select-ltr.select-label-placement-stacked) .select-icon,\n:host(.select-ltr.select-label-placement-floating) .select-icon {\n  right: var(--padding-end, 0);\n}\n\n:host(.select-rtl.select-label-placement-stacked) .select-icon,\n:host(.select-rtl.select-label-placement-floating) .select-icon {\n  left: var(--padding-start, 0);\n}\n\n.select-text {\n  flex: 1;\n  min-width: 16px;\n  font-size: inherit;\n  text-overflow: ellipsis;\n  white-space: inherit;\n  overflow: hidden;\n}\n\n.select-wrapper {\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  border-radius: var(--border-radius);\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: center;\n  height: inherit;\n  /**\n   * This allows developers to set the height\n   * on the host of the element but still have\n   * the label take up the full height\n   * of the parent.\n   */\n  min-height: inherit;\n  transition: background-color 15ms linear;\n  background: var(--background);\n  line-height: normal;\n  cursor: inherit;\n  box-sizing: border-box;\n}\n\n.select-wrapper .select-placeholder {\n  /**\n   * When the floating label appears on top of the\n   * select, we need to fade the text out so that the\n   * label does not overlap with the placeholder.\n   */\n  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.select-wrapper-inner {\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n}\n\n:host(.select-label-placement-stacked) .select-wrapper-inner,\n:host(.select-label-placement-floating) .select-wrapper-inner {\n  /**\n   * When using a stacked/floating label, the inner wrapper is\n   * stacked vertically under the label container. This line\n   * ensures that the inner wrapper fills all the remaining height\n   * of the component.\n   */\n  flex-grow: 1;\n}\n\n:host(.ion-touched.ion-invalid) {\n  --highlight-color: var(--highlight-color-invalid);\n}\n\n/**\n * The component highlight is only shown\n * on focus, so we can safely set the valid\n * color state when touched/valid. If we\n * set it when .has-focus is present then\n * the highlight color would change\n * from the valid color to the component's\n * color during the transition after the\n * component loses focus.\n */\n:host(.ion-valid) {\n  --highlight-color: var(--highlight-color-valid);\n}\n\n.label-text-wrapper {\n  /**\n   * This causes the label to take up\n   * the entire height of its container\n   * while still keeping the text centered.\n   */\n  display: flex;\n  align-items: center;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the select.\n   * However, we do not set the max\n   * width to 100% because then\n   * only the label would show and users\n   * would not be able to see what they are typing.\n   */\n  max-width: 200px;\n  transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n  /**\n   * This ensures that double tapping this text\n   * clicks the <label> and focuses the input\n   * when a screen reader is enabled.\n   */\n  pointer-events: none;\n}\n\n/**\n * We need to use two elements instead of\n * one. The .label-text-wrapper is responsible\n * for centering the label text vertically regardless\n * of the input height using flexbox.\n *\n * The .label-text element is responsible for controlling\n * overflow when label-placement=\"fixed\".\n * We want the ellipses to show up when the\n * fixed label overflows, but text-overflow: ellipsis only\n * works on block-level elements. A flex item is\n * considered blockified (https://www.w3.org/TR/css-display-3/#blockify).\n */\n.label-text,\n::slotted([slot=label]) {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden,\n.select-outline-notch-hidden {\n  display: none;\n}\n\n.native-wrapper {\n  display: flex;\n  align-items: center;\n  /**\n   * When the floating label appears on top of the\n   * input, we need to fade the input out so that the\n   * label does not overlap with the placeholder.\n   */\n  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);\n  /**\n   * This ensures that the .select-text gets\n   * truncated with ellipses when the text is\n   * too long for the screen.\n   */\n  overflow: hidden;\n}\n\n:host(.select-justify-space-between) .select-wrapper {\n  justify-content: space-between;\n}\n\n:host(.select-justify-start) .select-wrapper {\n  justify-content: start;\n}\n\n:host(.select-justify-end) .select-wrapper {\n  justify-content: end;\n}\n\n/**\n * Label is on the left of the input in LTR and\n * on the right in RTL.\n */\n:host(.select-label-placement-start) .select-wrapper {\n  flex-direction: row;\n}\n\n:host(.select-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the select should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the right of the select in LTR and\n * on the left in RTL.\n */\n:host(.select-label-placement-end) .select-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the select should be on the start\n * when the label sits at the end.\n */\n:host(.select-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n:host(.select-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the select should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the left of the select in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.select-label-placement-fixed) .label-text-wrapper {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n/**\n * Stacked: Label sits above the select and is scaled down.\n * Floating: Label sits over the select when the select has no\n * value and is blurred. Label sits above the input and is scaled\n * down when the select is focused or has a value.\n *\n */\n:host(.select-label-placement-stacked) .select-wrapper,\n:host(.select-label-placement-floating) .select-wrapper {\n  flex-direction: column;\n  align-items: start;\n}\n\n/**\n * Ensures that the label animates\n * up and to the left in LTR or\n * up and to the right in RTL.\n */\n:host(.select-label-placement-stacked) .label-text-wrapper,\n:host(.select-label-placement-floating) .label-text-wrapper {\n  max-width: 100%;\n}\n\n:host(.select-ltr.select-label-placement-stacked) .label-text-wrapper,\n:host(.select-ltr.select-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n}\n\n:host(.select-rtl.select-label-placement-stacked) .label-text-wrapper,\n:host(.select-rtl.select-label-placement-floating) .label-text-wrapper {\n  transform-origin: right top;\n}\n\n/**\n * Ensures the select does not\n * overlap the label.\n * Also ensure that the native wrapper\n * takes up the remaining available height and width.\n */\n:host(.select-label-placement-stacked) .native-wrapper,\n:host(.select-label-placement-floating) .native-wrapper {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 1px;\n  margin-bottom: 0;\n  flex-grow: 1;\n  width: 100%;\n}\n\n/**\n * This makes the label sit over the select\n * when the select is blurred and has no value.\n * The label should not sit over the select if the\n * select has a placeholder.\n * Note: This is different from what ion-input does\n * because the activating the select causes an overlay\n * to appear. This makes it hard to read the placeholder.\n * With ion-input, the input just focuses and the placeholder\n * is still easy to read.\n */\n:host(.select-label-placement-floating) .label-text-wrapper {\n  transform: translateY(100%) scale(1);\n}\n\n/**\n * The placeholder should be hidden when the label\n * is on top of the select. This prevents the label\n * from overlapping any placeholder value.\n *\n * TODO(FW-5592): Remove :not(.label-floating) piece\n */\n:host(.select-label-placement-floating:not(.label-floating)) .native-wrapper .select-placeholder {\n  opacity: 0;\n}\n\n/**\n * We don't use .label-floating here because that would\n * also include the case where the label is floating due\n * to content in the start/end slot. We want the opacity\n * to remain at the default in this case, since the select\n * isn't being actively interacted with.\n *\n * TODO(FW-5592): Change entire selector to:\n * :host(.label-floating.select-label-placement-floating) .native-wrapper .select-placeholder\n */\n:host(.select-expanded.select-label-placement-floating) .native-wrapper .select-placeholder,\n:host(.ion-focused.select-label-placement-floating) .native-wrapper .select-placeholder,\n:host(.has-value.select-label-placement-floating) .native-wrapper .select-placeholder {\n  opacity: 1;\n}\n\n/**\n * This makes the label sit above the input.\n */\n:host(.label-floating) .label-text-wrapper {\n  transform: translateY(50%) scale(0.75);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the input.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n::slotted([slot=start]), ::slotted([slot=end]) {\n  /**\n   * Prevent the slots from shrinking when the label and/or\n   * selected item text is long enough to fill the rest of\n   * the container.\n   */\n  flex-shrink: 0;\n}\n\n::slotted([slot=start]:last-of-type) {\n  margin-inline-end: 16px;\n  margin-inline-start: 0;\n}\n\n::slotted([slot=end]:first-of-type) {\n  margin-inline-start: 16px;\n  margin-inline-end: 0;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host(.select-fill-solid) {\n  --background: var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2));\n  --border-color: var(--ion-color-step-500, var(--ion-background-color-step-500, gray));\n  --border-radius: 4px;\n  --padding-start: 16px;\n  --padding-end: 16px;\n  min-height: 56px;\n}\n\n/**\n * The solid fill style has a border\n * at the bottom of the select wrapper.\n * As a result, the border on the \"bottom\n * content\" is not needed.\n */\n:host(.select-fill-solid) .select-wrapper {\n  border-bottom: var(--border-width) var(--border-style) var(--border-color);\n}\n\n/**\n * If the select has a validity state, the\n * border should reflect that as a color.\n */\n:host(.has-focus.select-fill-solid.ion-valid),\n:host(.select-fill-solid.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n:host(.select-fill-solid) .select-bottom {\n  border-top: none;\n}\n\n/**\n * Background and border should be\n * slightly darker on hover.\n */\n@media (any-hover: hover) {\n  :host(.select-fill-solid:hover) {\n    --background: var(--ion-color-step-100, var(--ion-background-color-step-100, #e6e6e6));\n    --border-color: var(--ion-color-step-750, var(--ion-background-color-step-750, #404040));\n  }\n}\n/**\n * Background and border should be\n * much darker on focus.\n */\n:host(.select-fill-solid.select-expanded),\n:host(.select-fill-solid.ion-focused) {\n  --background: var(--ion-color-step-150, var(--ion-background-color-step-150, #d9d9d9));\n  --border-color: var(--ion-color-step-750, var(--ion-background-color-step-750, #404040));\n}\n\n:host(.select-fill-solid) .select-wrapper {\n  /**\n   * Only the top left and top right borders should.\n   * have a radius when using a solid fill.\n   */\n  border-start-start-radius: var(--border-radius);\n  border-start-end-radius: var(--border-radius);\n  border-end-end-radius: 0px;\n  border-end-start-radius: 0px;\n}\n\n:host(.label-floating.select-fill-solid) .label-text-wrapper {\n  /**\n   * Label text should not extend\n   * beyond the bounds of the select.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host(.select-fill-outline) {\n  --border-color: var(--ion-color-step-300, var(--ion-background-color-step-300, #b3b3b3));\n  --border-radius: 4px;\n  --padding-start: 16px;\n  --padding-end: 16px;\n  min-height: 56px;\n}\n\n:host(.select-fill-outline.select-shape-round) {\n  --border-radius: 28px;\n  --padding-start: 32px;\n  --padding-end: 32px;\n}\n\n/**\n * If the select has a validity state, the\n * border should reflect that as a color.\n */\n:host(.has-focus.select-fill-outline.ion-valid),\n:host(.select-fill-outline.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n/**\n * Border should be\n * slightly darker on hover.\n */\n@media (any-hover: hover) {\n  :host(.select-fill-outline:hover) {\n    --border-color: var(--ion-color-step-750, var(--ion-background-color-step-750, #404040));\n  }\n}\n/**\n * The border should get thicker\n * and take on component color when\n * the select is focused.\n */\n:host(.select-fill-outline.select-expanded),\n:host(.select-fill-outline.ion-focused) {\n  --border-width: var(--highlight-height);\n  --border-color: var(--highlight-color);\n}\n\n/**\n * The bottom content should never have\n * a border with the outline style.\n */\n:host(.select-fill-outline) .select-bottom {\n  border-top: none;\n}\n\n/**\n * Outline selects do not have a bottom border.\n * Instead, they have a border that wraps the\n * select + label.\n */\n:host(.select-fill-outline) .select-wrapper {\n  border-bottom: none;\n}\n\n:host(.select-ltr.select-fill-outline.select-label-placement-stacked) .label-text-wrapper,\n:host(.select-ltr.select-fill-outline.select-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n}\n\n:host(.select-rtl.select-fill-outline.select-label-placement-stacked) .label-text-wrapper,\n:host(.select-rtl.select-fill-outline.select-label-placement-floating) .label-text-wrapper {\n  transform-origin: right top;\n}\n\n:host(.select-fill-outline.select-label-placement-stacked) .label-text-wrapper,\n:host(.select-fill-outline.select-label-placement-floating) .label-text-wrapper {\n  position: absolute;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the select.\n   */\n  max-width: calc(100% - var(--padding-start) - var(--padding-end));\n}\n\n/**\n * The label should appear on top of an outline\n * container that overlaps it so it is always clickable.\n */\n:host(.select-fill-outline) .label-text-wrapper,\n:host(.select-fill-outline) .label-text-wrapper {\n  position: relative;\n  z-index: 1;\n}\n\n/**\n * This makes the label sit above the select.\n */\n:host(.label-floating.select-fill-outline) .label-text-wrapper {\n  transform: translateY(-32%) scale(0.75);\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the select.\n   */\n  max-width: calc((100% - var(--padding-start) - var(--padding-end) - 8px) / 0.75);\n}\n\n/**\n * This ensures that the select does not\n * overlap the floating label while still\n * remaining visually centered.\n */\n:host(.select-fill-outline.select-label-placement-stacked) select,\n:host(.select-fill-outline.select-label-placement-floating) select {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 6px;\n  margin-bottom: 6px;\n}\n\n:host(.select-fill-outline) .select-outline-container {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n\n:host(.select-fill-outline) .select-outline-start,\n:host(.select-fill-outline) .select-outline-end {\n  pointer-events: none;\n}\n\n/**\n * By default, each piece of the container should have\n * a top and bottom border. This gives the appearance\n * of a unified container with a border.\n */\n:host(.select-fill-outline) .select-outline-start,\n:host(.select-fill-outline) .select-outline-notch,\n:host(.select-fill-outline) .select-outline-end {\n  border-top: var(--border-width) var(--border-style) var(--border-color);\n  border-bottom: var(--border-width) var(--border-style) var(--border-color);\n  /**\n   * `border-box` is applied in the global\n   * Ionic stylesheet, but since this is in\n   * the Shadow DOM, these elements do not\n   * receive the global style. The outline\n   * pieces for `ion-input` do because that\n   * component is in the Light DOM.\n   */\n  box-sizing: border-box;\n}\n\n/**\n * Ensures long labels do not cause the notch to flow\n * out of bounds.\n */\n:host(.select-fill-outline) .select-outline-notch {\n  max-width: calc(100% - var(--padding-start) - var(--padding-end));\n}\n\n/**\n * This element ensures that the notch used\n * the size of the scaled text so that the\n * border cut out is the correct width.\n * The text in this element should not\n * be interactive.\n */\n:host(.select-fill-outline) .notch-spacer {\n  /**\n   * We need $select-md-floating-label-padding of padding on the right.\n   * However, we also subtracted $select-md-floating-label-padding from\n   * the width of .select-outline-start\n   * to create space, so we need to take\n   * that into consideration here.\n   */\n  -webkit-padding-end: 8px;\n  padding-inline-end: 8px;\n  font-size: calc(1em * 0.75);\n  opacity: 0;\n  pointer-events: none;\n}\n\n:host(.select-fill-outline) .select-outline-start {\n  -webkit-border-start: var(--border-width) var(--border-style) var(--border-color);\n  border-inline-start: var(--border-width) var(--border-style) var(--border-color);\n}\n\n:host(.select-fill-outline) .select-outline-start {\n  border-start-start-radius: var(--border-radius);\n  border-start-end-radius: 0px;\n  border-end-end-radius: 0px;\n  border-end-start-radius: var(--border-radius);\n}\n\n:host(.select-fill-outline) .select-outline-start {\n  /**\n   * There should be spacing between the translated text\n   * and .select-outline-start. However, we can't add this\n   * spacing onto the notch because it would cause the\n   * label to look like it is not aligned with the\n   * text select. Instead, we subtract a few pixels from\n   * this element.\n   */\n  width: calc(var(--padding-start) - 4px);\n}\n\n:host(.select-fill-outline) .select-outline-end {\n  -webkit-border-end: var(--border-width) var(--border-style) var(--border-color);\n  border-inline-end: var(--border-width) var(--border-style) var(--border-color);\n}\n\n:host(.select-fill-outline) .select-outline-end {\n  border-start-start-radius: 0px;\n  border-start-end-radius: var(--border-radius);\n  border-end-end-radius: var(--border-radius);\n  border-end-start-radius: 0px;\n}\n\n:host(.select-fill-outline) .select-outline-end {\n  /**\n   * The ending outline fragment\n   * should take up the remaining free space.\n   */\n  flex-grow: 1;\n}\n\n/**\n * When the select either has focus or a value,\n * there should be a \"cut out\" at the top for\n * the floating/stacked label. We simulate this \"cut out\"\n * by removing the top border from the notch fragment.\n */\n:host(.label-floating.select-fill-outline) .select-outline-notch {\n  border-top: none;\n}\n\n:host {\n  --border-width: 1px;\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));\n  --highlight-height: 2px;\n}\n\n.select-icon {\n  width: 0.8125rem;\n  transition: transform 0.15s cubic-bezier(0.4, 0, 0.2, 1);\n  color: var(--ion-color-step-500, var(--ion-text-color-step-500, gray));\n}\n\n/**\n * When the select is focused the label should\n * take on the highlight color. This should\n * only apply to floating or stacked labels.\n */\n:host(.select-label-placement-floating.select-expanded) .label-text-wrapper,\n:host(.select-label-placement-floating.ion-focused) .label-text-wrapper,\n:host(.select-label-placement-stacked.select-expanded) .label-text-wrapper,\n:host(.select-label-placement-stacked.ion-focused) .label-text-wrapper {\n  color: var(--highlight-color);\n}\n\n:host(.has-focus.select-label-placement-floating.ion-valid) .label-text-wrapper,\n:host(.select-label-placement-floating.ion-touched.ion-invalid) .label-text-wrapper,\n:host(.has-focus.select-label-placement-stacked.ion-valid) .label-text-wrapper,\n:host(.select-label-placement-stacked.ion-touched.ion-invalid) .label-text-wrapper {\n  color: var(--highlight-color);\n}\n\n.select-highlight {\n  bottom: -1px;\n  position: absolute;\n  width: 100%;\n  height: var(--highlight-height);\n  transform: scale(0);\n  transition: transform 200ms;\n  background: var(--highlight-color);\n}\n.select-highlight {\n  inset-inline-start: 0;\n}\n\n:host(.select-expanded) .select-highlight,\n:host(.ion-focused) .select-highlight {\n  transform: scale(1);\n}\n\n/**\n * Adjust the highlight up by 1px\n * so it is not cut off by the\n * the item's line (if one is present).\n */\n:host(.in-item) .select-highlight {\n  bottom: 0;\n}\n:host(.in-item) .select-highlight {\n  inset-inline-start: 0;\n}\n\n/**\n * This rotates the chevron icon\n * when the select is activated.\n * This should only happen on MD.\n */\n:host(.select-expanded:not(.has-expanded-icon)) .select-icon {\n  transform: rotate(180deg);\n}\n\n/**\n * When the select is focused the icon should\n * take on the highlight color.\n * The icon should also take on the highlight\n * color if there is a validation state.\n */\n:host(.select-expanded) .select-wrapper .select-icon,\n:host(.has-focus.ion-valid) .select-wrapper .select-icon,\n:host(.ion-touched.ion-invalid) .select-wrapper .select-icon,\n:host(.ion-focused) .select-wrapper .select-icon {\n  color: var(--highlight-color);\n}\n\n:host(.select-shape-round) {\n  --border-radius: 16px;\n}\n\n:host(.select-label-placement-stacked) .select-wrapper-inner,\n:host(.select-label-placement-floating) .select-wrapper-inner {\n  width: calc(100% - 0.8125rem - 4px);\n}\n\n:host(.select-disabled) {\n  opacity: 0.38;\n}\n\n/**\n * Slotted buttons have a lot of default padding that can\n * cause them to look misaligned from other pieces such\n * as the control's label, especially when using a clear\n * fill. We also make them circular to ensure that non-\n * clear buttons and the focus/hover state on clear ones\n * don't look too crowded.\n */\n::slotted(ion-button[slot=start].button-has-icon-only),\n::slotted(ion-button[slot=end].button-has-icon-only) {\n  --border-radius: 50%;\n  --padding-start: 8px;\n  --padding-end: 8px;\n  --padding-top: 8px;\n  --padding-bottom: 8px;\n  aspect-ratio: 1;\n  min-height: 40px;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h, forceUpdate } from \"@stencil/core\";\nimport { compareOptions, createNotchController, isOptionSelected } from \"../../utils/forms/index\";\nimport { focusVisibleElement, renderHiddenInput, inheritAttributes } from \"../../utils/helpers\";\nimport { actionSheetController, alertController, popoverController } from \"../../utils/overlays\";\nimport { isRTL } from \"../../utils/rtl/index\";\nimport { createColorClasses, hostContext } from \"../../utils/theme\";\nimport { watchForOptions } from \"../../utils/watch-options\";\nimport { caretDownSharp, chevronExpand } from \"ionicons/icons\";\nimport { getIonMode } from \"../../global/ionic-global\";\n// TODO(FW-2832): types\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot label - The label text to associate with the select. Use the `labelPlacement` property to control where the label is placed relative to the select. Use this if you need to render a label with custom HTML.\n * @slot start - Content to display at the leading edge of the select.\n * @slot end - Content to display at the trailing edge of the select.\n *\n * @part placeholder - The text displayed in the select when there is no value.\n * @part text - The displayed value of the select.\n * @part icon - The select icon container.\n * @part container - The container for the selected text or placeholder.\n * @part label - The label text describing the select.\n */\nexport class Select {\n    constructor() {\n        this.inputId = `ion-sel-${selectIds++}`;\n        this.inheritedAttributes = {};\n        this.onClick = (ev) => {\n            const target = ev.target;\n            const closestSlot = target.closest('[slot=\"start\"], [slot=\"end\"]');\n            if (target === this.el || closestSlot === null) {\n                this.setFocus();\n                this.open(ev);\n            }\n            else {\n                /**\n                 * Prevent clicks to the start/end slots from opening the select.\n                 * We ensure the target isn't this element in case the select is slotted\n                 * in, for example, an item. This would prevent the select from ever\n                 * being opened since the element itself has slot=\"start\"/\"end\".\n                 *\n                 * Clicking a slotted element also causes a click\n                 * on the <label> element (since it wraps the slots).\n                 * Clicking <label> dispatches another click event on\n                 * the native form control that then bubbles up to this\n                 * listener. This additional event targets the host\n                 * element, so the select overlay is opened.\n                 *\n                 * When the slotted elements are clicked (and therefore\n                 * the ancestor <label> element) we want to prevent the label\n                 * from dispatching another click event.\n                 *\n                 * Do not call stopPropagation() because this will cause\n                 * click handlers on the slotted elements to never fire in React.\n                 * When developers do onClick in React a native \"click\" listener\n                 * is added on the root element, not the slotted element. When that\n                 * native click listener fires, React then dispatches the synthetic\n                 * click event on the slotted element. However, if stopPropagation\n                 * is called then the native click event will never bubble up\n                 * to the root element.\n                 */\n                ev.preventDefault();\n            }\n        };\n        this.onFocus = () => {\n            this.ionFocus.emit();\n        };\n        this.onBlur = () => {\n            this.ionBlur.emit();\n        };\n        this.isExpanded = false;\n        this.cancelText = 'Cancel';\n        this.color = undefined;\n        this.compareWith = undefined;\n        this.disabled = false;\n        this.fill = undefined;\n        this.interface = 'alert';\n        this.interfaceOptions = {};\n        this.justify = 'space-between';\n        this.label = undefined;\n        this.labelPlacement = 'start';\n        this.multiple = false;\n        this.name = this.inputId;\n        this.okText = 'OK';\n        this.placeholder = undefined;\n        this.selectedText = undefined;\n        this.toggleIcon = undefined;\n        this.expandedIcon = undefined;\n        this.shape = undefined;\n        this.value = undefined;\n    }\n    styleChanged() {\n        this.emitStyle();\n    }\n    setValue(value) {\n        this.value = value;\n        this.ionChange.emit({ value });\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n    }\n    async connectedCallback() {\n        const { el } = this;\n        this.notchController = createNotchController(el, () => this.notchSpacerEl, () => this.labelSlot);\n        this.updateOverlayOptions();\n        this.emitStyle();\n        this.mutationO = watchForOptions(this.el, 'ion-select-option', async () => {\n            this.updateOverlayOptions();\n            /**\n             * We need to re-render the component\n             * because one of the new ion-select-option\n             * elements may match the value. In this case,\n             * the rendered selected text should be updated.\n             */\n            forceUpdate(this);\n        });\n    }\n    disconnectedCallback() {\n        if (this.mutationO) {\n            this.mutationO.disconnect();\n            this.mutationO = undefined;\n        }\n        if (this.notchController) {\n            this.notchController.destroy();\n            this.notchController = undefined;\n        }\n    }\n    /**\n     * Open the select overlay. The overlay is either an alert, action sheet, or popover,\n     * depending on the `interface` property on the `ion-select`.\n     *\n     * @param event The user interface event that called the open.\n     */\n    async open(event) {\n        if (this.disabled || this.isExpanded) {\n            return undefined;\n        }\n        this.isExpanded = true;\n        const overlay = (this.overlay = await this.createOverlay(event));\n        overlay.onDidDismiss().then(() => {\n            this.overlay = undefined;\n            this.isExpanded = false;\n            this.ionDismiss.emit();\n            this.setFocus();\n        });\n        await overlay.present();\n        // focus selected option for popovers\n        if (this.interface === 'popover') {\n            const indexOfSelected = this.childOpts.map((o) => o.value).indexOf(this.value);\n            if (indexOfSelected > -1) {\n                const selectedItem = overlay.querySelector(`.select-interface-option:nth-child(${indexOfSelected + 1})`);\n                if (selectedItem) {\n                    focusVisibleElement(selectedItem);\n                    /**\n                     * Browsers such as Firefox do not\n                     * correctly delegate focus when manually\n                     * focusing an element with delegatesFocus.\n                     * We work around this by manually focusing\n                     * the interactive element.\n                     * ion-radio and ion-checkbox are the only\n                     * elements that ion-select-popover uses, so\n                     * we only need to worry about those two components\n                     * when focusing.\n                     */\n                    const interactiveEl = selectedItem.querySelector('ion-radio, ion-checkbox');\n                    if (interactiveEl) {\n                        interactiveEl.focus();\n                    }\n                }\n            }\n            else {\n                /**\n                 * If no value is set then focus the first enabled option.\n                 */\n                const firstEnabledOption = overlay.querySelector('ion-radio:not(.radio-disabled), ion-checkbox:not(.checkbox-disabled)');\n                if (firstEnabledOption) {\n                    focusVisibleElement(firstEnabledOption.closest('ion-item'));\n                    /**\n                     * Focus the option for the same reason as we do above.\n                     */\n                    firstEnabledOption.focus();\n                }\n            }\n        }\n        return overlay;\n    }\n    createOverlay(ev) {\n        let selectInterface = this.interface;\n        if (selectInterface === 'action-sheet' && this.multiple) {\n            console.warn(`Select interface cannot be \"${selectInterface}\" with a multi-value select. Using the \"alert\" interface instead.`);\n            selectInterface = 'alert';\n        }\n        if (selectInterface === 'popover' && !ev) {\n            console.warn(`Select interface cannot be a \"${selectInterface}\" without passing an event. Using the \"alert\" interface instead.`);\n            selectInterface = 'alert';\n        }\n        if (selectInterface === 'action-sheet') {\n            return this.openActionSheet();\n        }\n        if (selectInterface === 'popover') {\n            return this.openPopover(ev);\n        }\n        return this.openAlert();\n    }\n    updateOverlayOptions() {\n        const overlay = this.overlay;\n        if (!overlay) {\n            return;\n        }\n        const childOpts = this.childOpts;\n        const value = this.value;\n        switch (this.interface) {\n            case 'action-sheet':\n                overlay.buttons = this.createActionSheetButtons(childOpts, value);\n                break;\n            case 'popover':\n                const popover = overlay.querySelector('ion-select-popover');\n                if (popover) {\n                    popover.options = this.createPopoverOptions(childOpts, value);\n                }\n                break;\n            case 'alert':\n                const inputType = this.multiple ? 'checkbox' : 'radio';\n                overlay.inputs = this.createAlertInputs(childOpts, inputType, value);\n                break;\n        }\n    }\n    createActionSheetButtons(data, selectValue) {\n        const actionSheetButtons = data.map((option) => {\n            const value = getOptionValue(option);\n            // Remove hydrated before copying over classes\n            const copyClasses = Array.from(option.classList)\n                .filter((cls) => cls !== 'hydrated')\n                .join(' ');\n            const optClass = `${OPTION_CLASS} ${copyClasses}`;\n            return {\n                role: isOptionSelected(selectValue, value, this.compareWith) ? 'selected' : '',\n                text: option.textContent,\n                cssClass: optClass,\n                handler: () => {\n                    this.setValue(value);\n                },\n            };\n        });\n        // Add \"cancel\" button\n        actionSheetButtons.push({\n            text: this.cancelText,\n            role: 'cancel',\n            handler: () => {\n                this.ionCancel.emit();\n            },\n        });\n        return actionSheetButtons;\n    }\n    createAlertInputs(data, inputType, selectValue) {\n        const alertInputs = data.map((option) => {\n            const value = getOptionValue(option);\n            // Remove hydrated before copying over classes\n            const copyClasses = Array.from(option.classList)\n                .filter((cls) => cls !== 'hydrated')\n                .join(' ');\n            const optClass = `${OPTION_CLASS} ${copyClasses}`;\n            return {\n                type: inputType,\n                cssClass: optClass,\n                label: option.textContent || '',\n                value,\n                checked: isOptionSelected(selectValue, value, this.compareWith),\n                disabled: option.disabled,\n            };\n        });\n        return alertInputs;\n    }\n    createPopoverOptions(data, selectValue) {\n        const popoverOptions = data.map((option) => {\n            const value = getOptionValue(option);\n            // Remove hydrated before copying over classes\n            const copyClasses = Array.from(option.classList)\n                .filter((cls) => cls !== 'hydrated')\n                .join(' ');\n            const optClass = `${OPTION_CLASS} ${copyClasses}`;\n            return {\n                text: option.textContent || '',\n                cssClass: optClass,\n                value,\n                checked: isOptionSelected(selectValue, value, this.compareWith),\n                disabled: option.disabled,\n                handler: (selected) => {\n                    this.setValue(selected);\n                    if (!this.multiple) {\n                        this.close();\n                    }\n                },\n            };\n        });\n        return popoverOptions;\n    }\n    async openPopover(ev) {\n        const { fill, labelPlacement } = this;\n        const interfaceOptions = this.interfaceOptions;\n        const mode = getIonMode(this);\n        const showBackdrop = mode === 'md' ? false : true;\n        const multiple = this.multiple;\n        const value = this.value;\n        let event = ev;\n        let size = 'auto';\n        const hasFloatingOrStackedLabel = labelPlacement === 'floating' || labelPlacement === 'stacked';\n        /**\n         * The popover should take up the full width\n         * when using a fill in MD mode or if the\n         * label is floating/stacked.\n         */\n        if (hasFloatingOrStackedLabel || (mode === 'md' && fill !== undefined)) {\n            size = 'cover';\n            /**\n             * Otherwise the popover\n             * should be positioned relative\n             * to the native element.\n             */\n        }\n        else {\n            event = Object.assign(Object.assign({}, ev), { detail: {\n                    ionShadowTarget: this.nativeWrapperEl,\n                } });\n        }\n        const popoverOpts = Object.assign(Object.assign({ mode,\n            event, alignment: 'center', size,\n            showBackdrop }, interfaceOptions), { component: 'ion-select-popover', cssClass: ['select-popover', interfaceOptions.cssClass], componentProps: {\n                header: interfaceOptions.header,\n                subHeader: interfaceOptions.subHeader,\n                message: interfaceOptions.message,\n                multiple,\n                value,\n                options: this.createPopoverOptions(this.childOpts, value),\n            } });\n        /**\n         * Workaround for Stencil to autodefine\n         * ion-select-popover and ion-popover when\n         * using Custom Elements build.\n         */\n        // eslint-disable-next-line\n        if (false) {\n            // eslint-disable-next-line\n            // @ts-ignore\n            document.createElement('ion-select-popover');\n            document.createElement('ion-popover');\n        }\n        return popoverController.create(popoverOpts);\n    }\n    async openActionSheet() {\n        const mode = getIonMode(this);\n        const interfaceOptions = this.interfaceOptions;\n        const actionSheetOpts = Object.assign(Object.assign({ mode }, interfaceOptions), { buttons: this.createActionSheetButtons(this.childOpts, this.value), cssClass: ['select-action-sheet', interfaceOptions.cssClass] });\n        /**\n         * Workaround for Stencil to autodefine\n         * ion-action-sheet when\n         * using Custom Elements build.\n         */\n        // eslint-disable-next-line\n        if (false) {\n            // eslint-disable-next-line\n            // @ts-ignore\n            document.createElement('ion-action-sheet');\n        }\n        return actionSheetController.create(actionSheetOpts);\n    }\n    async openAlert() {\n        const interfaceOptions = this.interfaceOptions;\n        const inputType = this.multiple ? 'checkbox' : 'radio';\n        const mode = getIonMode(this);\n        const alertOpts = Object.assign(Object.assign({ mode }, interfaceOptions), { header: interfaceOptions.header ? interfaceOptions.header : this.labelText, inputs: this.createAlertInputs(this.childOpts, inputType, this.value), buttons: [\n                {\n                    text: this.cancelText,\n                    role: 'cancel',\n                    handler: () => {\n                        this.ionCancel.emit();\n                    },\n                },\n                {\n                    text: this.okText,\n                    handler: (selectedValues) => {\n                        this.setValue(selectedValues);\n                    },\n                },\n            ], cssClass: [\n                'select-alert',\n                interfaceOptions.cssClass,\n                this.multiple ? 'multiple-select-alert' : 'single-select-alert',\n            ] });\n        /**\n         * Workaround for Stencil to autodefine\n         * ion-alert when\n         * using Custom Elements build.\n         */\n        // eslint-disable-next-line\n        if (false) {\n            // eslint-disable-next-line\n            // @ts-ignore\n            document.createElement('ion-alert');\n        }\n        return alertController.create(alertOpts);\n    }\n    /**\n     * Close the select interface.\n     */\n    close() {\n        if (!this.overlay) {\n            return Promise.resolve(false);\n        }\n        return this.overlay.dismiss();\n    }\n    hasValue() {\n        return this.getText() !== '';\n    }\n    get childOpts() {\n        return Array.from(this.el.querySelectorAll('ion-select-option'));\n    }\n    /**\n     * Returns any plaintext associated with\n     * the label (either prop or slot).\n     * Note: This will not return any custom\n     * HTML. Use the `hasLabel` getter if you\n     * want to know if any slotted label content\n     * was passed.\n     */\n    get labelText() {\n        const { label } = this;\n        if (label !== undefined) {\n            return label;\n        }\n        const { labelSlot } = this;\n        if (labelSlot !== null) {\n            return labelSlot.textContent;\n        }\n        return;\n    }\n    getText() {\n        const selectedText = this.selectedText;\n        if (selectedText != null && selectedText !== '') {\n            return selectedText;\n        }\n        return generateText(this.childOpts, this.value, this.compareWith);\n    }\n    setFocus() {\n        if (this.focusEl) {\n            this.focusEl.focus();\n        }\n    }\n    emitStyle() {\n        const { disabled } = this;\n        const style = {\n            'interactive-disabled': disabled,\n        };\n        this.ionStyle.emit(style);\n    }\n    renderLabel() {\n        const { label } = this;\n        return (h(\"div\", { class: {\n                'label-text-wrapper': true,\n                'label-text-wrapper-hidden': !this.hasLabel,\n            }, part: \"label\" }, label === undefined ? h(\"slot\", { name: \"label\" }) : h(\"div\", { class: \"label-text\" }, label)));\n    }\n    componentDidRender() {\n        var _a;\n        (_a = this.notchController) === null || _a === void 0 ? void 0 : _a.calculateNotchWidth();\n    }\n    /**\n     * Gets any content passed into the `label` slot,\n     * not the <slot> definition.\n     */\n    get labelSlot() {\n        return this.el.querySelector('[slot=\"label\"]');\n    }\n    /**\n     * Returns `true` if label content is provided\n     * either by a prop or a content. If you want\n     * to get the plaintext value of the label use\n     * the `labelText` getter instead.\n     */\n    get hasLabel() {\n        return this.label !== undefined || this.labelSlot !== null;\n    }\n    /**\n     * Renders the border container\n     * when fill=\"outline\".\n     */\n    renderLabelContainer() {\n        const mode = getIonMode(this);\n        const hasOutlineFill = mode === 'md' && this.fill === 'outline';\n        if (hasOutlineFill) {\n            /**\n             * The outline fill has a special outline\n             * that appears around the select and the label.\n             * Certain stacked and floating label placements cause the\n             * label to translate up and create a \"cut out\"\n             * inside of that border by using the notch-spacer element.\n             */\n            return [\n                h(\"div\", { class: \"select-outline-container\" }, h(\"div\", { class: \"select-outline-start\" }), h(\"div\", { class: {\n                        'select-outline-notch': true,\n                        'select-outline-notch-hidden': !this.hasLabel,\n                    } }, h(\"div\", { class: \"notch-spacer\", \"aria-hidden\": \"true\", ref: (el) => (this.notchSpacerEl = el) }, this.label)), h(\"div\", { class: \"select-outline-end\" })),\n                this.renderLabel(),\n            ];\n        }\n        /**\n         * If not using the outline style,\n         * we can render just the label.\n         */\n        return this.renderLabel();\n    }\n    /**\n     * Renders either the placeholder\n     * or the selected values based on\n     * the state of the select.\n     */\n    renderSelectText() {\n        const { placeholder } = this;\n        const displayValue = this.getText();\n        let addPlaceholderClass = false;\n        let selectText = displayValue;\n        if (selectText === '' && placeholder !== undefined) {\n            selectText = placeholder;\n            addPlaceholderClass = true;\n        }\n        const selectTextClasses = {\n            'select-text': true,\n            'select-placeholder': addPlaceholderClass,\n        };\n        const textPart = addPlaceholderClass ? 'placeholder' : 'text';\n        return (h(\"div\", { \"aria-hidden\": \"true\", class: selectTextClasses, part: textPart }, selectText));\n    }\n    /**\n     * Renders the chevron icon\n     * next to the select text.\n     */\n    renderSelectIcon() {\n        const mode = getIonMode(this);\n        const { isExpanded, toggleIcon, expandedIcon } = this;\n        let icon;\n        if (isExpanded && expandedIcon !== undefined) {\n            icon = expandedIcon;\n        }\n        else {\n            const defaultIcon = mode === 'ios' ? chevronExpand : caretDownSharp;\n            icon = toggleIcon !== null && toggleIcon !== void 0 ? toggleIcon : defaultIcon;\n        }\n        return h(\"ion-icon\", { class: \"select-icon\", part: \"icon\", \"aria-hidden\": \"true\", icon: icon });\n    }\n    get ariaLabel() {\n        var _a;\n        const { placeholder, inheritedAttributes } = this;\n        const displayValue = this.getText();\n        // The aria label should be preferred over visible text if both are specified\n        const definedLabel = (_a = inheritedAttributes['aria-label']) !== null && _a !== void 0 ? _a : this.labelText;\n        /**\n         * If developer has specified a placeholder\n         * and there is nothing selected, the selectText\n         * should have the placeholder value.\n         */\n        let renderedLabel = displayValue;\n        if (renderedLabel === '' && placeholder !== undefined) {\n            renderedLabel = placeholder;\n        }\n        /**\n         * If there is a developer-defined label,\n         * then we need to concatenate the developer label\n         * string with the current current value.\n         * The label for the control should be read\n         * before the values of the control.\n         */\n        if (definedLabel !== undefined) {\n            renderedLabel = renderedLabel === '' ? definedLabel : `${definedLabel}, ${renderedLabel}`;\n        }\n        return renderedLabel;\n    }\n    renderListbox() {\n        const { disabled, inputId, isExpanded } = this;\n        return (h(\"button\", { disabled: disabled, id: inputId, \"aria-label\": this.ariaLabel, \"aria-haspopup\": \"dialog\", \"aria-expanded\": `${isExpanded}`, onFocus: this.onFocus, onBlur: this.onBlur, ref: (focusEl) => (this.focusEl = focusEl) }));\n    }\n    render() {\n        const { disabled, el, isExpanded, expandedIcon, labelPlacement, justify, placeholder, fill, shape, name, value } = this;\n        const mode = getIonMode(this);\n        const hasFloatingOrStackedLabel = labelPlacement === 'floating' || labelPlacement === 'stacked';\n        const justifyEnabled = !hasFloatingOrStackedLabel;\n        const rtl = isRTL(el) ? 'rtl' : 'ltr';\n        const inItem = hostContext('ion-item', this.el);\n        const shouldRenderHighlight = mode === 'md' && fill !== 'outline' && !inItem;\n        const hasValue = this.hasValue();\n        const hasStartEndSlots = el.querySelector('[slot=\"start\"], [slot=\"end\"]') !== null;\n        renderHiddenInput(true, el, name, parseValue(value), disabled);\n        /**\n         * If the label is stacked, it should always sit above the select.\n         * For floating labels, the label should move above the select if\n         * the select has a value, is open, or has anything in either\n         * the start or end slot.\n         *\n         * If there is content in the start slot, the label would overlap\n         * it if not forced to float. This is also applied to the end slot\n         * because with the default or solid fills, the select is not\n         * vertically centered in the container, but the label is. This\n         * causes the slots and label to appear vertically offset from each\n         * other when the label isn't floating above the input. This doesn't\n         * apply to the outline fill, but this was not accounted for to keep\n         * things consistent.\n         *\n         * TODO(FW-5592): Remove hasStartEndSlots condition\n         */\n        const labelShouldFloat = labelPlacement === 'stacked' || (labelPlacement === 'floating' && (hasValue || isExpanded || hasStartEndSlots));\n        return (h(Host, { key: '5a1b82be3f737a2ce5b87c5cd716f898a902ab10', onClick: this.onClick, class: createColorClasses(this.color, {\n                [mode]: true,\n                'in-item': inItem,\n                'in-item-color': hostContext('ion-item.ion-color', el),\n                'select-disabled': disabled,\n                'select-expanded': isExpanded,\n                'has-expanded-icon': expandedIcon !== undefined,\n                'has-value': hasValue,\n                'label-floating': labelShouldFloat,\n                'has-placeholder': placeholder !== undefined,\n                'ion-focusable': true,\n                [`select-${rtl}`]: true,\n                [`select-fill-${fill}`]: fill !== undefined,\n                [`select-justify-${justify}`]: justifyEnabled,\n                [`select-shape-${shape}`]: shape !== undefined,\n                [`select-label-placement-${labelPlacement}`]: true,\n            }) }, h(\"label\", { key: '79a6e99e38fa3f72d876f4b8ac0077a9fbf4bd2d', class: \"select-wrapper\", id: \"select-label\" }, this.renderLabelContainer(), h(\"div\", { key: 'e18ac0b4a35e2cdde858347a9b116218533cd532', class: \"select-wrapper-inner\" }, h(\"slot\", { key: 'cc194f718ef9363d3496531f0d9259e33b66f4d8', name: \"start\" }), h(\"div\", { key: '833c5544e453c0ac543f5d4898d0f492caac405a', class: \"native-wrapper\", ref: (el) => (this.nativeWrapperEl = el), part: \"container\" }, this.renderSelectText(), this.renderListbox()), h(\"slot\", { key: 'adaa4064c9ad01ef7a452308680eb09dc3ad60ff', name: \"end\" }), !hasFloatingOrStackedLabel && this.renderSelectIcon()), hasFloatingOrStackedLabel && this.renderSelectIcon(), shouldRenderHighlight && h(\"div\", { key: 'd47a6ef0a6192c5f098973aa517aad2aa9ae8dfc', class: \"select-highlight\" }))));\n    }\n    static get is() { return \"ion-select\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"select.ios.scss\"],\n            \"md\": [\"select.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"select.ios.css\"],\n            \"md\": [\"select.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"cancelText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The text to display on the cancel button.\"\n                },\n                \"attribute\": \"cancel-text\",\n                \"reflect\": false,\n                \"defaultValue\": \"'Cancel'\"\n            },\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\\n\\nThis property is only available when using the modern select syntax.\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"compareWith\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | SelectCompareFn | null\",\n                    \"resolved\": \"((currentValue: any, compareValue: any) => boolean) | null | string | undefined\",\n                    \"references\": {\n                        \"SelectCompareFn\": {\n                            \"location\": \"import\",\n                            \"path\": \"./select-interface\",\n                            \"id\": \"src/components/select/select-interface.ts::SelectCompareFn\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"This property allows developers to specify a custom function or property\\nname for comparing objects when determining the selected option in the\\nion-select. When not specified, the default behavior will use strict\\nequality (===) for comparison.\"\n                },\n                \"attribute\": \"compare-with\",\n                \"reflect\": false\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the select.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"fill\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'outline' | 'solid'\",\n                    \"resolved\": \"\\\"outline\\\" | \\\"solid\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The fill for the item. If `\\\"solid\\\"` the item will have a background. If\\n`\\\"outline\\\"` the item will be transparent with a border. Only available in `md` mode.\"\n                },\n                \"attribute\": \"fill\",\n                \"reflect\": false\n            },\n            \"interface\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"SelectInterface\",\n                    \"resolved\": \"\\\"action-sheet\\\" | \\\"alert\\\" | \\\"popover\\\"\",\n                    \"references\": {\n                        \"SelectInterface\": {\n                            \"location\": \"import\",\n                            \"path\": \"./select-interface\",\n                            \"id\": \"src/components/select/select-interface.ts::SelectInterface\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The interface the select should use: `action-sheet`, `popover` or `alert`.\"\n                },\n                \"attribute\": \"interface\",\n                \"reflect\": false,\n                \"defaultValue\": \"'alert'\"\n            },\n            \"interfaceOptions\": {\n                \"type\": \"any\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"any\",\n                    \"resolved\": \"any\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Any additional options that the `alert`, `action-sheet` or `popover` interface\\ncan take. See the [ion-alert docs](./alert), the\\n[ion-action-sheet docs](./action-sheet) and the\\n[ion-popover docs](./popover) for the\\ncreate options for each interface.\\n\\nNote: `interfaceOptions` will not override `inputs` or `buttons` with the `alert` interface.\"\n                },\n                \"attribute\": \"interface-options\",\n                \"reflect\": false,\n                \"defaultValue\": \"{}\"\n            },\n            \"justify\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'end' | 'space-between'\",\n                    \"resolved\": \"\\\"end\\\" | \\\"space-between\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"How to pack the label and select within a line.\\n`justify` does not apply when the label and select\\nare on different lines when `labelPlacement` is set to\\n`\\\"floating\\\"` or `\\\"stacked\\\"`.\\n`\\\"start\\\"`: The label and select will appear on the left in LTR and\\non the right in RTL.\\n`\\\"end\\\"`: The label and select will appear on the right in LTR and\\non the left in RTL.\\n`\\\"space-between\\\"`: The label and select will appear on opposite\\nends of the line with space between the two elements.\"\n                },\n                \"attribute\": \"justify\",\n                \"reflect\": false,\n                \"defaultValue\": \"'space-between'\"\n            },\n            \"label\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The visible label associated with the select.\\n\\nUse this if you need to render a plaintext label.\\n\\nThe `label` property will take priority over the `label` slot if both are used.\"\n                },\n                \"attribute\": \"label\",\n                \"reflect\": false\n            },\n            \"labelPlacement\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'end' | 'floating' | 'stacked' | 'fixed'\",\n                    \"resolved\": \"\\\"end\\\" | \\\"fixed\\\" | \\\"floating\\\" | \\\"stacked\\\" | \\\"start\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Where to place the label relative to the select.\\n`\\\"start\\\"`: The label will appear to the left of the select in LTR and to the right in RTL.\\n`\\\"end\\\"`: The label will appear to the right of the select in LTR and to the left in RTL.\\n`\\\"floating\\\"`: The label will appear smaller and above the select when the select is focused or it has a value. Otherwise it will appear on top of the select.\\n`\\\"stacked\\\"`: The label will appear smaller and above the select regardless even when the select is blurred or has no value.\\n`\\\"fixed\\\"`: The label has the same behavior as `\\\"start\\\"` except it also has a fixed width. Long text will be truncated with ellipses (\\\"...\\\").\\nWhen using `\\\"floating\\\"` or `\\\"stacked\\\"` we recommend initializing the select with either a `value` or a `placeholder`.\"\n                },\n                \"attribute\": \"label-placement\",\n                \"reflect\": false,\n                \"defaultValue\": \"'start'\"\n            },\n            \"multiple\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the select can accept multiple values.\"\n                },\n                \"attribute\": \"multiple\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The name of the control, which is submitted with the form data.\"\n                },\n                \"attribute\": \"name\",\n                \"reflect\": false,\n                \"defaultValue\": \"this.inputId\"\n            },\n            \"okText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The text to display on the ok button.\"\n                },\n                \"attribute\": \"ok-text\",\n                \"reflect\": false,\n                \"defaultValue\": \"'OK'\"\n            },\n            \"placeholder\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The text to display when the select is empty.\"\n                },\n                \"attribute\": \"placeholder\",\n                \"reflect\": false\n            },\n            \"selectedText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | null\",\n                    \"resolved\": \"null | string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The text to display instead of the selected option's value.\"\n                },\n                \"attribute\": \"selected-text\",\n                \"reflect\": false\n            },\n            \"toggleIcon\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The toggle icon to use. Defaults to `chevronExpand` for `ios` mode,\\nor `caretDownSharp` for `md` mode.\"\n                },\n                \"attribute\": \"toggle-icon\",\n                \"reflect\": false\n            },\n            \"expandedIcon\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The toggle icon to show when the select is open. If defined, the icon\\nrotation behavior in `md` mode will be disabled. If undefined, `toggleIcon`\\nwill be used for when the select is both open and closed.\"\n                },\n                \"attribute\": \"expanded-icon\",\n                \"reflect\": false\n            },\n            \"shape\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'round'\",\n                    \"resolved\": \"\\\"round\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The shape of the select. If \\\"round\\\" it will have an increased border radius.\"\n                },\n                \"attribute\": \"shape\",\n                \"reflect\": false\n            },\n            \"value\": {\n                \"type\": \"any\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"any | null\",\n                    \"resolved\": \"any\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The value of the select.\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"isExpanded\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionChange\",\n                \"name\": \"ionChange\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the value has changed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"SelectChangeEventDetail\",\n                    \"resolved\": \"SelectChangeEventDetail<any>\",\n                    \"references\": {\n                        \"SelectChangeEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./select-interface\",\n                            \"id\": \"src/components/select/select-interface.ts::SelectChangeEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionCancel\",\n                \"name\": \"ionCancel\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the selection is cancelled.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionDismiss\",\n                \"name\": \"ionDismiss\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the overlay is dismissed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionFocus\",\n                \"name\": \"ionFocus\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the select has focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionBlur\",\n                \"name\": \"ionBlur\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the select loses focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionStyle\",\n                \"name\": \"ionStyle\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"Emitted when the styles change.\"\n                },\n                \"complexType\": {\n                    \"original\": \"StyleEventDetail\",\n                    \"resolved\": \"StyleEventDetail\",\n                    \"references\": {\n                        \"StyleEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::StyleEventDetail\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"open\": {\n                \"complexType\": {\n                    \"signature\": \"(event?: UIEvent) => Promise<any>\",\n                    \"parameters\": [{\n                            \"name\": \"event\",\n                            \"type\": \"UIEvent | undefined\",\n                            \"docs\": \"The user interface event that called the open.\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"UIEvent\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::UIEvent\"\n                        },\n                        \"HTMLElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLElement\"\n                        }\n                    },\n                    \"return\": \"Promise<any>\"\n                },\n                \"docs\": {\n                    \"text\": \"Open the select overlay. The overlay is either an alert, action sheet, or popover,\\ndepending on the `interface` property on the `ion-select`.\",\n                    \"tags\": [{\n                            \"name\": \"param\",\n                            \"text\": \"event The user interface event that called the open.\"\n                        }]\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"disabled\",\n                \"methodName\": \"styleChanged\"\n            }, {\n                \"propName\": \"isExpanded\",\n                \"methodName\": \"styleChanged\"\n            }, {\n                \"propName\": \"placeholder\",\n                \"methodName\": \"styleChanged\"\n            }, {\n                \"propName\": \"value\",\n                \"methodName\": \"styleChanged\"\n            }];\n    }\n}\nconst getOptionValue = (el) => {\n    const value = el.value;\n    return value === undefined ? el.textContent || '' : value;\n};\nconst parseValue = (value) => {\n    if (value == null) {\n        return undefined;\n    }\n    if (Array.isArray(value)) {\n        return value.join(',');\n    }\n    return value.toString();\n};\nconst generateText = (opts, value, compareWith) => {\n    if (value === undefined) {\n        return '';\n    }\n    if (Array.isArray(value)) {\n        return value\n            .map((v) => textForValue(opts, v, compareWith))\n            .filter((opt) => opt !== null)\n            .join(', ');\n    }\n    else {\n        return textForValue(opts, value, compareWith) || '';\n    }\n};\nconst textForValue = (opts, value, compareWith) => {\n    const selectOpt = opts.find((opt) => {\n        return compareOptions(value, getOptionValue(opt), compareWith);\n    });\n    return selectOpt ? selectOpt.textContent : null;\n};\nlet selectIds = 0;\nconst OPTION_CLASS = 'select-interface-option';\n"],"mappings":"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"}