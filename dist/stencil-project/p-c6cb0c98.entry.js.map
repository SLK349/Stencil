{"version":3,"names":["buttonIosCss","IonButtonIosStyle0","buttonMdCss","IonButtonMdStyle0","Button","constructor","hostRef","this","inItem","inListHeader","inToolbar","formButtonEl","formEl","inheritedAttributes","handleClick","ev","el","type","openURL","href","routerDirection","routerAnimation","hasShadowDom","submitForm","onFocus","ionFocus","emit","onBlur","ionBlur","slotChanged","isCircle","hasIconOnly","color","undefined","buttonType","disabled","expand","fill","download","rel","shape","size","strong","target","form","disabledChanged","renderHiddenButton","findForm","contains","newFormButtonEl","document","createElement","style","display","appendChild","componentWillLoad","closest","inheritAriaAttributes","querySelector","rippleType","hasClearFill","HTMLFormElement","getElementById","printIonWarning","preventDefault","click","render","mode","getIonMode","finalSize","TagType","attrs","h","Host","key","onClick","class","createColorClasses","hostContext","Object","assign","part","name","onSlotchange"],"sources":["node_modules/@ionic/core/dist/collection/components/button/button.ios.css?tag=ion-button&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/button/button.md.css?tag=ion-button&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/button/button.js"],"sourcesContent":["/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the button\n   * @prop --background-activated: Background of the button when pressed. Note: setting this will interfere with the Material Design ripple.\n   * @prop --background-activated-opacity: Opacity of the button when pressed\n   * @prop --background-focused: Background of the button when focused with the tab key\n   * @prop --background-focused-opacity: Opacity of the button when focused with the tab key\n   * @prop --background-hover: Background of the button on hover\n   * @prop --background-hover-opacity: Opacity of the background on hover\n   *\n   * @prop --color: Text color of the button\n   * @prop --color-activated: Text color of the button when pressed\n   * @prop --color-focused: Text color of the button when focused with the tab key\n   * @prop --color-hover: Text color of the button when hover\n   *\n   * @prop --transition: Transition of the button\n   *\n   * @prop --border-radius: Border radius of the button\n   * @prop --border-width: Border width of the button\n   * @prop --border-style: Border style of the button\n   * @prop --border-color: Border color of the button\n   *\n   * @prop --ripple-color: Color of the button ripple effect\n   *\n   * @prop --box-shadow: Box shadow of the button\n   * @prop --opacity: Opacity of the button\n   *\n   * @prop --padding-top: Top padding of the button\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button\n   * @prop --padding-bottom: Bottom padding of the button\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button\n   */\n  --overflow: hidden;\n  --ripple-color: currentColor;\n  --border-width: initial;\n  --border-color: initial;\n  --border-style: initial;\n  --color-activated: var(--color);\n  --color-focused: var(--color);\n  --color-hover: var(--color);\n  --box-shadow: none;\n  display: inline-block;\n  width: auto;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  text-align: center;\n  text-decoration: none;\n  white-space: normal;\n  user-select: none;\n  vertical-align: top;\n  vertical-align: -webkit-baseline-middle;\n  font-kerning: none;\n}\n\n:host(.button-disabled) {\n  cursor: default;\n  opacity: 0.5;\n  pointer-events: none;\n}\n\n:host(.button-solid) {\n  --background: var(--ion-color-primary, #0054e9);\n  --color: var(--ion-color-primary-contrast, #fff);\n}\n\n:host(.button-outline) {\n  --border-color: var(--ion-color-primary, #0054e9);\n  --background: transparent;\n  --color: var(--ion-color-primary, #0054e9);\n}\n\n:host(.button-clear) {\n  --border-width: 0;\n  --background: transparent;\n  --color: var(--ion-color-primary, #0054e9);\n}\n\n:host(.button-block) {\n  display: block;\n}\n\n:host(.button-block) .button-native {\n  margin-left: 0;\n  margin-right: 0;\n  width: 100%;\n  clear: both;\n  contain: content;\n}\n\n:host(.button-block) .button-native::after {\n  clear: both;\n}\n\n:host(.button-full) {\n  display: block;\n}\n\n:host(.button-full) .button-native {\n  margin-left: 0;\n  margin-right: 0;\n  width: 100%;\n  contain: content;\n}\n\n:host(.button-full:not(.button-round)) .button-native {\n  border-radius: 0;\n  border-right-width: 0;\n  border-left-width: 0;\n}\n\n.button-native {\n  border-radius: var(--border-radius);\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  display: flex;\n  position: relative;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  min-height: inherit;\n  transition: var(--transition);\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  outline: none;\n  background: var(--background);\n  line-height: 1;\n  box-shadow: var(--box-shadow);\n  contain: layout style;\n  cursor: pointer;\n  opacity: var(--opacity);\n  overflow: var(--overflow);\n  z-index: 0;\n  box-sizing: border-box;\n  appearance: none;\n}\n\n.button-native::-moz-focus-inner {\n  border: 0;\n}\n\n.button-inner {\n  display: flex;\n  position: relative;\n  flex-flow: row nowrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n}\n\n::slotted([slot=start]),\n::slotted([slot=end]) {\n  flex-shrink: 0;\n}\n\n::slotted(ion-icon) {\n  font-size: 1.35em;\n  pointer-events: none;\n}\n\n::slotted(ion-icon[slot=start]) {\n  -webkit-margin-start: -0.3em;\n  margin-inline-start: -0.3em;\n  -webkit-margin-end: 0.3em;\n  margin-inline-end: 0.3em;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n::slotted(ion-icon[slot=end]) {\n  -webkit-margin-start: 0.3em;\n  margin-inline-start: 0.3em;\n  -webkit-margin-end: -0.2em;\n  margin-inline-end: -0.2em;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\nion-ripple-effect {\n  color: var(--ripple-color);\n}\n\n.button-native::after {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  content: \"\";\n  opacity: 0;\n}\n\n:host(.ion-focused) {\n  color: var(--color-focused);\n}\n\n:host(.ion-focused) .button-native::after {\n  background: var(--background-focused);\n  opacity: var(--background-focused-opacity);\n}\n\n@media (any-hover: hover) {\n  :host(:hover) {\n    color: var(--color-hover);\n  }\n  :host(:hover) .button-native::after {\n    background: var(--background-hover);\n    opacity: var(--background-hover-opacity);\n  }\n}\n:host(.ion-activated) {\n  color: var(--color-activated);\n}\n\n:host(.ion-activated) .button-native::after {\n  background: var(--background-activated);\n  opacity: var(--background-activated-opacity);\n}\n\n:host(.button-solid.ion-color) .button-native {\n  background: var(--ion-color-base);\n  color: var(--ion-color-contrast);\n}\n\n:host(.button-outline.ion-color) .button-native {\n  border-color: var(--ion-color-base);\n  background: transparent;\n  color: var(--ion-color-base);\n}\n\n:host(.button-clear.ion-color) .button-native {\n  background: transparent;\n  color: var(--ion-color-base);\n}\n\n:host(.in-toolbar:not(.ion-color):not(.in-toolbar-color)) .button-native {\n  color: var(--ion-toolbar-color, var(--color));\n}\n\n:host(.button-outline.in-toolbar:not(.ion-color):not(.in-toolbar-color)) .button-native {\n  border-color: var(--ion-toolbar-color, var(--color, var(--border-color)));\n}\n\n:host(.button-solid.in-toolbar:not(.ion-color):not(.in-toolbar-color)) .button-native {\n  background: var(--ion-toolbar-color, var(--background));\n  color: var(--ion-toolbar-background, var(--color));\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --border-radius: 14px;\n  --padding-top: 13px;\n  --padding-bottom: 13px;\n  --padding-start: 1em;\n  --padding-end: 1em;\n  --transition: background-color, opacity 100ms linear;\n  -webkit-margin-start: 2px;\n  margin-inline-start: 2px;\n  -webkit-margin-end: 2px;\n  margin-inline-end: 2px;\n  margin-top: 4px;\n  margin-bottom: 4px;\n  min-height: 3.1em;\n  font-size: min(1rem, 48px);\n  font-weight: 500;\n  letter-spacing: 0;\n}\n\n:host(.button-solid) {\n  --background-activated: var(--ion-color-primary-shade, #004acd);\n  --background-focused: var(--ion-color-primary-shade, #004acd);\n  --background-hover: var(--ion-color-primary-tint, #1a65eb);\n  --background-activated-opacity: 1;\n  --background-focused-opacity: 1;\n  --background-hover-opacity: 1;\n}\n\n:host(.button-outline) {\n  --border-radius: 14px;\n  --border-width: 1px;\n  --border-style: solid;\n  --background-activated: var(--ion-color-primary, #0054e9);\n  --background-focused: var(--ion-color-primary, #0054e9);\n  --background-hover: transparent;\n  --background-focused-opacity: .1;\n  --color-activated: var(--ion-color-primary-contrast, #fff);\n}\n\n:host(.button-clear) {\n  --background-activated: transparent;\n  --background-activated-opacity: 0;\n  --background-focused: var(--ion-color-primary, #0054e9);\n  --background-hover: transparent;\n  --background-focused-opacity: .1;\n  font-size: min(1.0625rem, 51px);\n  font-weight: normal;\n}\n\n/**\n * The default buttons in a toolbar\n * have a different font size/weight\n * than buttons outside of a toolbar on iOS.\n * However, we still want the \"size\"/\"strong\"\n * properties to be usable in a toolbar, so we add\n * the .in-buttons selector such that we\n * can add the different font size/weight in a toolbar\n * but still let \"size\"/\"strong\" override it.\n */\n:host(.in-buttons) {\n  font-size: clamp(17px, 1.0625rem, 21.08px);\n  font-weight: 400;\n}\n\n:host(.button-large) {\n  --border-radius: 16px;\n  --padding-top: 17px;\n  --padding-start: 1em;\n  --padding-end: 1em;\n  --padding-bottom: 17px;\n  min-height: 3.1em;\n  font-size: min(1.25rem, 60px);\n}\n\n:host(.button-small) {\n  --border-radius: 6px;\n  --padding-top: 4px;\n  --padding-start: 0.9em;\n  --padding-end: 0.9em;\n  --padding-bottom: 4px;\n  min-height: 2.1em;\n  font-size: min(0.8125rem, 39px);\n}\n\n:host(.button-round) {\n  --border-radius: 999px;\n  --padding-top: 0;\n  --padding-start: 26px;\n  --padding-end: 26px;\n  --padding-bottom: 0;\n}\n\n:host(.button-strong) {\n  font-weight: 600;\n}\n\n:host(.button-has-icon-only) {\n  --padding-top: 0;\n  --padding-bottom: var(--padding-top);\n  --padding-end: var(--padding-top);\n  --padding-start: var(--padding-end);\n  min-width: clamp(30px, 2.125em, 60px);\n  min-height: clamp(30px, 2.125em, 60px);\n}\n\n::slotted(ion-icon[slot=icon-only]) {\n  /**\n    * The values were provided through a native iOS app.\n    * min font size: 15px, default font size: 18px, max font size: 43px\n    *\n    * Since the `ion-button` uses `rem` for the font size, we can't\n    * just pass the desired icon font size in `em` to the `\n    * dynamic-font-clamp`. Instead, we need to adjust the base size \n    * to account for the ion-button` font size.\n    *\n    * For example, if the default font size of `ion-button` is 16px\n    * (derived from rem), then the base size can use the default font\n    * size of the icon.\n    */\n  font-size: clamp(15.12px, 1.125em, 43.02px);\n}\n\n:host(.button-small.button-has-icon-only) {\n  min-width: clamp(23px, 2.16em, 54px);\n  min-height: clamp(23px, 2.16em, 54px);\n}\n\n:host(.button-small) ::slotted(ion-icon[slot=icon-only]) {\n  /**\n    * The values were provided through a native iOS app.\n    * min font size: 12px, default font size: 17px, max font size: 40px\n    *\n    * Since the `ion-button` uses `rem` for the font size, we can't\n    * just pass the desired icon font size in `em` to the `\n    * dynamic-font-clamp`. Instead, we need to adjust the base size \n    * to account for the ion-button` font size.\n    *\n    * For example, if the default font size of `ion-button` is 13px\n    * (derived from rem) and the default font size of the icon is\n    * 17px, then the base size would need to be increased.\n    */\n  font-size: clamp(12.1394px, 1.308125em, 40.1856px);\n}\n\n:host(.button-large.button-has-icon-only) {\n  min-width: clamp(46px, 2.5em, 78px);\n  min-height: clamp(46px, 2.5em, 78px);\n}\n\n:host(.button-large) ::slotted(ion-icon[slot=icon-only]) {\n  /**\n    * The values were provided through a native iOS app.\n    * min font size: 15px, default font size: 18px, max font size: 43px\n    *\n    * Since the `ion-button` uses `rem` for the font size, we can't\n    * just pass the desired icon font size in `em` to the `\n    * dynamic-font-clamp`. Instead, we need to adjust the base size \n    * to account for the ion-button` font size.\n    *\n    * For example, if the default font size of `ion-button` is 20px\n    * (derived from rem) and the default font size of the icon is\n    * 18px, then the base size would need to be decreased.\n    */\n  font-size: clamp(15.12px, 0.9em, 43.056px);\n}\n\n:host(.button-outline.ion-focused.ion-color) .button-native,\n:host(.button-clear.ion-focused.ion-color) .button-native {\n  color: var(--ion-color-base);\n}\n:host(.button-outline.ion-focused.ion-color) .button-native::after,\n:host(.button-clear.ion-focused.ion-color) .button-native::after {\n  background: var(--ion-color-base);\n}\n\n:host(.button-solid.ion-color.ion-focused) .button-native::after {\n  background: var(--ion-color-shade);\n}\n\n@media (any-hover: hover) {\n  :host(.button-clear:not(.ion-activated):hover),\n  :host(.button-outline:not(.ion-activated):hover) {\n    opacity: 0.6;\n  }\n  :host(.button-clear.ion-color:hover) .button-native,\n  :host(.button-outline.ion-color:hover) .button-native {\n    color: var(--ion-color-base);\n  }\n  :host(.button-clear.ion-color:hover) .button-native::after,\n  :host(.button-outline.ion-color:hover) .button-native::after {\n    background: transparent;\n  }\n  :host(.button-solid.ion-color:hover) .button-native::after {\n    background: var(--ion-color-tint);\n  }\n  :host(:hover.button-solid.in-toolbar:not(.ion-color):not(.in-toolbar-color):not(.ion-activated)) .button-native::after {\n    background: #fff;\n    opacity: 0.1;\n  }\n}\n:host(.button-clear.ion-activated) {\n  opacity: 0.4;\n}\n\n:host(.button-outline.ion-activated.ion-color) .button-native {\n  color: var(--ion-color-contrast);\n}\n:host(.button-outline.ion-activated.ion-color) .button-native::after {\n  background: var(--ion-color-base);\n}\n\n:host(.button-solid.ion-color.ion-activated) .button-native::after {\n  background: var(--ion-color-shade);\n}\n\n:host(.button-outline.ion-activated.in-toolbar:not(.ion-color):not(.in-toolbar-color)) .button-native {\n  background: var(--ion-toolbar-color, var(--color));\n  color: var(--ion-toolbar-background, var(--background), var(--ion-color-primary-contrast, #fff));\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the button\n   * @prop --background-activated: Background of the button when pressed. Note: setting this will interfere with the Material Design ripple.\n   * @prop --background-activated-opacity: Opacity of the button when pressed\n   * @prop --background-focused: Background of the button when focused with the tab key\n   * @prop --background-focused-opacity: Opacity of the button when focused with the tab key\n   * @prop --background-hover: Background of the button on hover\n   * @prop --background-hover-opacity: Opacity of the background on hover\n   *\n   * @prop --color: Text color of the button\n   * @prop --color-activated: Text color of the button when pressed\n   * @prop --color-focused: Text color of the button when focused with the tab key\n   * @prop --color-hover: Text color of the button when hover\n   *\n   * @prop --transition: Transition of the button\n   *\n   * @prop --border-radius: Border radius of the button\n   * @prop --border-width: Border width of the button\n   * @prop --border-style: Border style of the button\n   * @prop --border-color: Border color of the button\n   *\n   * @prop --ripple-color: Color of the button ripple effect\n   *\n   * @prop --box-shadow: Box shadow of the button\n   * @prop --opacity: Opacity of the button\n   *\n   * @prop --padding-top: Top padding of the button\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the button\n   * @prop --padding-bottom: Bottom padding of the button\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the button\n   */\n  --overflow: hidden;\n  --ripple-color: currentColor;\n  --border-width: initial;\n  --border-color: initial;\n  --border-style: initial;\n  --color-activated: var(--color);\n  --color-focused: var(--color);\n  --color-hover: var(--color);\n  --box-shadow: none;\n  display: inline-block;\n  width: auto;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  text-align: center;\n  text-decoration: none;\n  white-space: normal;\n  user-select: none;\n  vertical-align: top;\n  vertical-align: -webkit-baseline-middle;\n  font-kerning: none;\n}\n\n:host(.button-disabled) {\n  cursor: default;\n  opacity: 0.5;\n  pointer-events: none;\n}\n\n:host(.button-solid) {\n  --background: var(--ion-color-primary, #0054e9);\n  --color: var(--ion-color-primary-contrast, #fff);\n}\n\n:host(.button-outline) {\n  --border-color: var(--ion-color-primary, #0054e9);\n  --background: transparent;\n  --color: var(--ion-color-primary, #0054e9);\n}\n\n:host(.button-clear) {\n  --border-width: 0;\n  --background: transparent;\n  --color: var(--ion-color-primary, #0054e9);\n}\n\n:host(.button-block) {\n  display: block;\n}\n\n:host(.button-block) .button-native {\n  margin-left: 0;\n  margin-right: 0;\n  width: 100%;\n  clear: both;\n  contain: content;\n}\n\n:host(.button-block) .button-native::after {\n  clear: both;\n}\n\n:host(.button-full) {\n  display: block;\n}\n\n:host(.button-full) .button-native {\n  margin-left: 0;\n  margin-right: 0;\n  width: 100%;\n  contain: content;\n}\n\n:host(.button-full:not(.button-round)) .button-native {\n  border-radius: 0;\n  border-right-width: 0;\n  border-left-width: 0;\n}\n\n.button-native {\n  border-radius: var(--border-radius);\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  text-align: inherit;\n  white-space: inherit;\n  color: inherit;\n  display: flex;\n  position: relative;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  min-height: inherit;\n  transition: var(--transition);\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  outline: none;\n  background: var(--background);\n  line-height: 1;\n  box-shadow: var(--box-shadow);\n  contain: layout style;\n  cursor: pointer;\n  opacity: var(--opacity);\n  overflow: var(--overflow);\n  z-index: 0;\n  box-sizing: border-box;\n  appearance: none;\n}\n\n.button-native::-moz-focus-inner {\n  border: 0;\n}\n\n.button-inner {\n  display: flex;\n  position: relative;\n  flex-flow: row nowrap;\n  flex-shrink: 0;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n  z-index: 1;\n}\n\n::slotted([slot=start]),\n::slotted([slot=end]) {\n  flex-shrink: 0;\n}\n\n::slotted(ion-icon) {\n  font-size: 1.35em;\n  pointer-events: none;\n}\n\n::slotted(ion-icon[slot=start]) {\n  -webkit-margin-start: -0.3em;\n  margin-inline-start: -0.3em;\n  -webkit-margin-end: 0.3em;\n  margin-inline-end: 0.3em;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n::slotted(ion-icon[slot=end]) {\n  -webkit-margin-start: 0.3em;\n  margin-inline-start: 0.3em;\n  -webkit-margin-end: -0.2em;\n  margin-inline-end: -0.2em;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\nion-ripple-effect {\n  color: var(--ripple-color);\n}\n\n.button-native::after {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  content: \"\";\n  opacity: 0;\n}\n\n:host(.ion-focused) {\n  color: var(--color-focused);\n}\n\n:host(.ion-focused) .button-native::after {\n  background: var(--background-focused);\n  opacity: var(--background-focused-opacity);\n}\n\n@media (any-hover: hover) {\n  :host(:hover) {\n    color: var(--color-hover);\n  }\n  :host(:hover) .button-native::after {\n    background: var(--background-hover);\n    opacity: var(--background-hover-opacity);\n  }\n}\n:host(.ion-activated) {\n  color: var(--color-activated);\n}\n\n:host(.ion-activated) .button-native::after {\n  background: var(--background-activated);\n  opacity: var(--background-activated-opacity);\n}\n\n:host(.button-solid.ion-color) .button-native {\n  background: var(--ion-color-base);\n  color: var(--ion-color-contrast);\n}\n\n:host(.button-outline.ion-color) .button-native {\n  border-color: var(--ion-color-base);\n  background: transparent;\n  color: var(--ion-color-base);\n}\n\n:host(.button-clear.ion-color) .button-native {\n  background: transparent;\n  color: var(--ion-color-base);\n}\n\n:host(.in-toolbar:not(.ion-color):not(.in-toolbar-color)) .button-native {\n  color: var(--ion-toolbar-color, var(--color));\n}\n\n:host(.button-outline.in-toolbar:not(.ion-color):not(.in-toolbar-color)) .button-native {\n  border-color: var(--ion-toolbar-color, var(--color, var(--border-color)));\n}\n\n:host(.button-solid.in-toolbar:not(.ion-color):not(.in-toolbar-color)) .button-native {\n  background: var(--ion-toolbar-color, var(--background));\n  color: var(--ion-toolbar-background, var(--color));\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --border-radius: 4px;\n  --padding-top: 8px;\n  --padding-bottom: 8px;\n  --padding-start: 1.1em;\n  --padding-end: 1.1em;\n  --transition: box-shadow 280ms cubic-bezier(.4, 0, .2, 1),\n                background-color 15ms linear,\n                color 15ms linear;\n  -webkit-margin-start: 2px;\n  margin-inline-start: 2px;\n  -webkit-margin-end: 2px;\n  margin-inline-end: 2px;\n  margin-top: 4px;\n  margin-bottom: 4px;\n  min-height: 36px;\n  font-size: 0.875rem;\n  font-weight: 500;\n  letter-spacing: 0.06em;\n  text-transform: uppercase;\n}\n\n:host(.button-solid) {\n  --background-activated: transparent;\n  --background-hover: var(--ion-color-primary-contrast, #fff);\n  --background-focused: var(--ion-color-primary-contrast, #fff);\n  --background-activated-opacity: 0;\n  --background-focused-opacity: .24;\n  --background-hover-opacity: .08;\n  --box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12);\n}\n\n:host(.button-solid.ion-activated) {\n  --box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2), 0 8px 10px 1px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n\n:host(.button-outline) {\n  --border-width: 2px;\n  --border-style: solid;\n  --box-shadow: none;\n  --background-activated: transparent;\n  --background-focused: var(--ion-color-primary, #0054e9);\n  --background-hover: var(--ion-color-primary, #0054e9);\n  --background-activated-opacity: 0;\n  --background-focused-opacity: .12;\n  --background-hover-opacity: .04;\n}\n\n:host(.button-outline.ion-activated.ion-color) .button-native {\n  background: transparent;\n}\n\n:host(.button-clear) {\n  --background-activated: transparent;\n  --background-focused: var(--ion-color-primary, #0054e9);\n  --background-hover: var(--ion-color-primary, #0054e9);\n  --background-activated-opacity: 0;\n  --background-focused-opacity: .12;\n  --background-hover-opacity: .04;\n}\n\n:host(.button-round) {\n  --border-radius: 999px;\n  --padding-top: 0;\n  --padding-start: 26px;\n  --padding-end: 26px;\n  --padding-bottom: 0;\n}\n\n:host(.button-large) {\n  --padding-top: 14px;\n  --padding-start: 1em;\n  --padding-end: 1em;\n  --padding-bottom: 14px;\n  min-height: 2.8em;\n  font-size: 1.25rem;\n}\n\n:host(.button-small) {\n  --padding-top: 4px;\n  --padding-start: 0.9em;\n  --padding-end: 0.9em;\n  --padding-bottom: 4px;\n  min-height: 2.1em;\n  font-size: 0.8125rem;\n}\n\n:host(.button-strong) {\n  font-weight: bold;\n}\n\n:host(.button-has-icon-only) {\n  --padding-top: 0;\n  --padding-bottom: var(--padding-top);\n  --padding-end: var(--padding-top);\n  --padding-start: var(--padding-end);\n  min-width: clamp(30px, 2.86em, 60px);\n  min-height: clamp(30px, 2.86em, 60px);\n}\n\n::slotted(ion-icon[slot=icon-only]) {\n  /**\n    * The values were provided through MD design,\n    * large and small are based on the iOS sizes.\n    * min font size: 15px, default font size: 22.4px, max font size: 43px\n    *\n    * Since the `ion-button` uses `rem` for the font size, we can't\n    * just pass the desired icon font size in `em` to the `\n    * dynamic-font-clamp`. Instead, we need to adjust the base size \n    * to account for the ion-button` font size.\n    *\n    * For example, if the default font size of `ion-button` is 14px\n    * (derived from rem) and the default font size of the icon is\n    * 22.4px, then the base size would need to be increased.\n    */\n  font-size: clamp(15.104px, 1.6em, 43.008px);\n}\n\n:host(.button-small.button-has-icon-only) {\n  min-width: clamp(23px, 2.16em, 54px);\n  min-height: clamp(23px, 2.16em, 54px);\n}\n\n:host(.button-small) ::slotted(ion-icon[slot=icon-only]) {\n  /**\n    * The values were provided through MD design,\n    * large and small are based on the iOS sizes.\n    * min font size: 12px, default font size: 16px, max font size: 40px\n    *\n    * Since the `ion-button` uses `rem` for the font size, we can't\n    * just pass the desired icon font size in `em` to the `\n    * dynamic-font-clamp`. Instead, we need to adjust the base size \n    * to account for the ion-button` font size.\n    *\n    * For example, if the default font size of `ion-button` is 13px\n    * (derived from rem) and the default font size of the icon is\n    * 16px, then the base size would need to be increased.\n    */\n  font-size: clamp(13.002px, 1.23125em, 40.385px);\n}\n\n:host(.button-large.button-has-icon-only) {\n  min-width: clamp(46px, 2.5em, 78px);\n  min-height: clamp(46px, 2.5em, 78px);\n}\n\n:host(.button-large) ::slotted(ion-icon[slot=icon-only]) {\n  /**\n    * The values were provided through MD design,\n    * large and small are based on the iOS sizes.\n    * min font size: 15px, default font size: 28px, max font size: 43px\n    *\n    * Since the `ion-button` uses `rem` for the font size, we can't\n    * just pass the desired icon font size in `em` to the `\n    * dynamic-font-clamp`. Instead, we need to adjust the base size \n    * to account for the ion-button` font size.\n    *\n    * For example, if the default font size of `ion-button` is 20px\n    * (derived from rem) and the default font size of the icon is\n    * 28px, then the base size would need to be increased.\n    */\n  font-size: clamp(15.008px, 1.4em, 43.008px);\n}\n\n/**\n * Only allow overriding of opacity here\n * as developers should not be overriding\n * colors when using the color prop.\n */\n:host(.button-solid.ion-color.ion-focused) .button-native::after {\n  background: var(--ion-color-contrast);\n}\n\n:host(.button-clear.ion-color.ion-focused) .button-native::after,\n:host(.button-outline.ion-color.ion-focused) .button-native::after {\n  background: var(--ion-color-base);\n}\n\n@media (any-hover: hover) {\n  :host(.button-solid.ion-color:hover) .button-native::after {\n    background: var(--ion-color-contrast);\n  }\n  :host(.button-clear.ion-color:hover) .button-native::after,\n  :host(.button-outline.ion-color:hover) .button-native::after {\n    background: var(--ion-color-base);\n  }\n}\n:host(.button-outline.ion-activated.in-toolbar:not(.ion-color):not(.in-toolbar-color)) .button-native {\n  background: var(--ion-toolbar-background, var(--color));\n  color: var(--ion-toolbar-color, var(--background), var(--ion-color-primary-contrast, #fff));\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { inheritAriaAttributes, hasShadowDom } from \"../../utils/helpers\";\nimport { printIonWarning } from \"../../utils/logging/index\";\nimport { createColorClasses, hostContext, openURL } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot - Content is placed between the named slots if provided without a slot.\n * @slot icon-only - Should be used on an icon in a button that has no text.\n * @slot start - Content is placed to the left of the button text in LTR, and to the right in RTL.\n * @slot end - Content is placed to the right of the button text in LTR, and to the left in RTL.\n *\n * @part native - The native HTML button or anchor element that wraps all child elements.\n */\nexport class Button {\n    constructor() {\n        this.inItem = false;\n        this.inListHeader = false;\n        this.inToolbar = false;\n        this.formButtonEl = null;\n        this.formEl = null;\n        this.inheritedAttributes = {};\n        this.handleClick = (ev) => {\n            const { el } = this;\n            if (this.type === 'button') {\n                openURL(this.href, ev, this.routerDirection, this.routerAnimation);\n            }\n            else if (hasShadowDom(el)) {\n                this.submitForm(ev);\n            }\n        };\n        this.onFocus = () => {\n            this.ionFocus.emit();\n        };\n        this.onBlur = () => {\n            this.ionBlur.emit();\n        };\n        this.slotChanged = () => {\n            /**\n             * Ensures that the 'has-icon-only' class is properly added\n             * or removed from `ion-button` when manipulating the\n             * `icon-only` slot.\n             *\n             * Without this, the 'has-icon-only' class is only checked\n             * or added when `ion-button` component first renders.\n             */\n            this.isCircle = this.hasIconOnly;\n        };\n        this.isCircle = false;\n        this.color = undefined;\n        this.buttonType = 'button';\n        this.disabled = false;\n        this.expand = undefined;\n        this.fill = undefined;\n        this.routerDirection = 'forward';\n        this.routerAnimation = undefined;\n        this.download = undefined;\n        this.href = undefined;\n        this.rel = undefined;\n        this.shape = undefined;\n        this.size = undefined;\n        this.strong = false;\n        this.target = undefined;\n        this.type = 'button';\n        this.form = undefined;\n    }\n    disabledChanged() {\n        const { disabled } = this;\n        if (this.formButtonEl) {\n            this.formButtonEl.disabled = disabled;\n        }\n    }\n    /**\n     * This is responsible for rendering a hidden native\n     * button element inside the associated form. This allows\n     * users to submit a form by pressing \"Enter\" when a text\n     * field inside of the form is focused. The native button\n     * rendered inside of `ion-button` is in the Shadow DOM\n     * and therefore does not participate in form submission\n     * which is why the following code is necessary.\n     */\n    renderHiddenButton() {\n        const formEl = (this.formEl = this.findForm());\n        if (formEl) {\n            const { formButtonEl } = this;\n            /**\n             * If the form already has a rendered form button\n             * then do not append a new one again.\n             */\n            if (formButtonEl !== null && formEl.contains(formButtonEl)) {\n                return;\n            }\n            // Create a hidden native button inside of the form\n            const newFormButtonEl = (this.formButtonEl = document.createElement('button'));\n            newFormButtonEl.type = this.type;\n            newFormButtonEl.style.display = 'none';\n            // Only submit if the button is not disabled.\n            newFormButtonEl.disabled = this.disabled;\n            formEl.appendChild(newFormButtonEl);\n        }\n    }\n    componentWillLoad() {\n        this.inToolbar = !!this.el.closest('ion-buttons');\n        this.inListHeader = !!this.el.closest('ion-list-header');\n        this.inItem = !!this.el.closest('ion-item') || !!this.el.closest('ion-item-divider');\n        this.inheritedAttributes = inheritAriaAttributes(this.el);\n    }\n    get hasIconOnly() {\n        return !!this.el.querySelector('[slot=\"icon-only\"]');\n    }\n    get rippleType() {\n        const hasClearFill = this.fill === undefined || this.fill === 'clear';\n        // If the button is in a toolbar, has a clear fill (which is the default)\n        // and only has an icon we use the unbounded \"circular\" ripple effect\n        if (hasClearFill && this.hasIconOnly && this.inToolbar) {\n            return 'unbounded';\n        }\n        return 'bounded';\n    }\n    /**\n     * Finds the form element based on the provided `form` selector\n     * or element reference provided.\n     */\n    findForm() {\n        const { form } = this;\n        if (form instanceof HTMLFormElement) {\n            return form;\n        }\n        if (typeof form === 'string') {\n            // Check if the string provided is a form id.\n            const el = document.getElementById(form);\n            if (el) {\n                if (el instanceof HTMLFormElement) {\n                    return el;\n                }\n                else {\n                    /**\n                     * The developer specified a string for the form attribute, but the\n                     * element with that id is not a form element.\n                     */\n                    printIonWarning(`Form with selector: \"#${form}\" could not be found. Verify that the id is attached to a <form> element.`, this.el);\n                    return null;\n                }\n            }\n            else {\n                /**\n                 * The developer specified a string for the form attribute, but the\n                 * element with that id could not be found in the DOM.\n                 */\n                printIonWarning(`Form with selector: \"#${form}\" could not be found. Verify that the id is correct and the form is rendered in the DOM.`, this.el);\n                return null;\n            }\n        }\n        if (form !== undefined) {\n            /**\n             * The developer specified a HTMLElement for the form attribute,\n             * but the element is not a HTMLFormElement.\n             * This will also catch if the developer tries to pass in null\n             * as the form attribute.\n             */\n            printIonWarning(`The provided \"form\" element is invalid. Verify that the form is a HTMLFormElement and rendered in the DOM.`, this.el);\n            return null;\n        }\n        /**\n         * If the form element is not set, the button may be inside\n         * of a form element. Query the closest form element to the button.\n         */\n        return this.el.closest('form');\n    }\n    submitForm(ev) {\n        // this button wants to specifically submit a form\n        // climb up the dom to see if we're in a <form>\n        // and if so, then use JS to submit it\n        if (this.formEl && this.formButtonEl) {\n            ev.preventDefault();\n            this.formButtonEl.click();\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        const { buttonType, type, disabled, rel, target, size, href, color, expand, hasIconOnly, shape, strong, inheritedAttributes, } = this;\n        const finalSize = size === undefined && this.inItem ? 'small' : size;\n        const TagType = href === undefined ? 'button' : 'a';\n        const attrs = TagType === 'button'\n            ? { type }\n            : {\n                download: this.download,\n                href,\n                rel,\n                target,\n            };\n        let fill = this.fill;\n        /**\n         * We check both undefined and null to\n         * work around https://github.com/ionic-team/stencil/issues/3586.\n         */\n        if (fill == null) {\n            fill = this.inToolbar || this.inListHeader ? 'clear' : 'solid';\n        }\n        /**\n         * We call renderHiddenButton in the render function to account\n         * for any properties being set async. For example, changing the\n         * \"type\" prop from \"button\" to \"submit\" after the component has\n         * loaded would warrant the hidden button being added to the\n         * associated form.\n         */\n        {\n            type !== 'button' && this.renderHiddenButton();\n        }\n        return (h(Host, { key: '8f3a0363d46ef888d22b0b0812c70cb4f79e6efa', onClick: this.handleClick, \"aria-disabled\": disabled ? 'true' : null, class: createColorClasses(color, {\n                [mode]: true,\n                [buttonType]: true,\n                [`${buttonType}-${expand}`]: expand !== undefined,\n                [`${buttonType}-${finalSize}`]: finalSize !== undefined,\n                [`${buttonType}-${shape}`]: shape !== undefined,\n                [`${buttonType}-${fill}`]: true,\n                [`${buttonType}-strong`]: strong,\n                'in-toolbar': hostContext('ion-toolbar', this.el),\n                'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n                'in-buttons': hostContext('ion-buttons', this.el),\n                'button-has-icon-only': hasIconOnly,\n                'button-disabled': disabled,\n                'ion-activatable': true,\n                'ion-focusable': true,\n            }) }, h(TagType, Object.assign({ key: 'a517c7d06aab15ad4c2a51b8ec224c1aeb4ed565' }, attrs, { class: \"button-native\", part: \"native\", disabled: disabled, onFocus: this.onFocus, onBlur: this.onBlur }, inheritedAttributes), h(\"span\", { key: '127c26dd97c0bf5097433df77df7313d59784899', class: \"button-inner\" }, h(\"slot\", { key: '39d9a9cad8e1addbe63406062e555e05c2cb541b', name: \"icon-only\", onSlotchange: this.slotChanged }), h(\"slot\", { key: 'cfdebdd89155c6c21eb80e51e06456a3a6d877e0', name: \"start\" }), h(\"slot\", { key: 'eac497e0f97ab55baa834ae23155d89b0f7069c6' }), h(\"slot\", { key: 'c99f7900f8856b32a0b4ac11092d461f5e9a1109', name: \"end\" })), mode === 'md' && h(\"ion-ripple-effect\", { key: 'c681edb0480879fbd801575f2233f6e118898638', type: this.rippleType }))));\n    }\n    static get is() { return \"ion-button\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"button.ios.scss\"],\n            \"md\": [\"button.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"button.ios.css\"],\n            \"md\": [\"button.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"buttonType\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The type of button.\"\n                },\n                \"attribute\": \"button-type\",\n                \"reflect\": false,\n                \"defaultValue\": \"'button'\"\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the button.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"expand\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'full' | 'block'\",\n                    \"resolved\": \"\\\"block\\\" | \\\"full\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Set to `\\\"block\\\"` for a full-width button or to `\\\"full\\\"` for a full-width button\\nwith square corners and no left or right borders.\"\n                },\n                \"attribute\": \"expand\",\n                \"reflect\": true\n            },\n            \"fill\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"'clear' | 'outline' | 'solid' | 'default'\",\n                    \"resolved\": \"\\\"clear\\\" | \\\"default\\\" | \\\"outline\\\" | \\\"solid\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Set to `\\\"clear\\\"` for a transparent button that resembles a flat button, to `\\\"outline\\\"`\\nfor a transparent button with a border, or to `\\\"solid\\\"` for a button with a filled background.\\nThe default fill is `\\\"solid\\\"` except inside of a toolbar, where the default is `\\\"clear\\\"`.\"\n                },\n                \"attribute\": \"fill\",\n                \"reflect\": true\n            },\n            \"routerDirection\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"RouterDirection\",\n                    \"resolved\": \"\\\"back\\\" | \\\"forward\\\" | \\\"root\\\"\",\n                    \"references\": {\n                        \"RouterDirection\": {\n                            \"location\": \"import\",\n                            \"path\": \"../router/utils/interface\",\n                            \"id\": \"src/components/router/utils/interface.ts::RouterDirection\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When using a router, it specifies the transition direction when navigating to\\nanother page using `href`.\"\n                },\n                \"attribute\": \"router-direction\",\n                \"reflect\": false,\n                \"defaultValue\": \"'forward'\"\n            },\n            \"routerAnimation\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"AnimationBuilder | undefined\",\n                    \"resolved\": \"((baseEl: any, opts?: any) => Animation) | undefined\",\n                    \"references\": {\n                        \"AnimationBuilder\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::AnimationBuilder\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"When using a router, it specifies the transition animation when navigating to\\nanother page using `href`.\"\n                }\n            },\n            \"download\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | undefined\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"This attribute instructs browsers to download a URL instead of navigating to\\nit, so the user will be prompted to save it as a local file. If the attribute\\nhas a value, it is used as the pre-filled file name in the Save prompt\\n(the user can still change the file name if they want).\"\n                },\n                \"attribute\": \"download\",\n                \"reflect\": false\n            },\n            \"href\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | undefined\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Contains a URL or a URL fragment that the hyperlink points to.\\nIf this property is set, an anchor tag will be rendered.\"\n                },\n                \"attribute\": \"href\",\n                \"reflect\": false\n            },\n            \"rel\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | undefined\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies the relationship of the target object to the link object.\\nThe value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).\"\n                },\n                \"attribute\": \"rel\",\n                \"reflect\": false\n            },\n            \"shape\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'round'\",\n                    \"resolved\": \"\\\"round\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Set to `\\\"round\\\"` for a button with more rounded corners.\"\n                },\n                \"attribute\": \"shape\",\n                \"reflect\": true\n            },\n            \"size\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'small' | 'default' | 'large'\",\n                    \"resolved\": \"\\\"default\\\" | \\\"large\\\" | \\\"small\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Set to `\\\"small\\\"` for a button with less height and padding, to `\\\"default\\\"`\\nfor a button with the default height and padding, or to `\\\"large\\\"` for a button\\nwith more height and padding. By default the size is unset, unless the button\\nis inside of an item, where the size is `\\\"small\\\"` by default. Set the size to\\n`\\\"default\\\"` inside of an item to make it a standard size button.\"\n                },\n                \"attribute\": \"size\",\n                \"reflect\": true\n            },\n            \"strong\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, activates a button with a heavier font weight.\"\n                },\n                \"attribute\": \"strong\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"target\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | undefined\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Specifies where to display the linked URL.\\nOnly applies when an `href` is provided.\\nSpecial keywords: `\\\"_blank\\\"`, `\\\"_self\\\"`, `\\\"_parent\\\"`, `\\\"_top\\\"`.\"\n                },\n                \"attribute\": \"target\",\n                \"reflect\": false\n            },\n            \"type\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'submit' | 'reset' | 'button'\",\n                    \"resolved\": \"\\\"button\\\" | \\\"reset\\\" | \\\"submit\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The type of the button.\"\n                },\n                \"attribute\": \"type\",\n                \"reflect\": false,\n                \"defaultValue\": \"'button'\"\n            },\n            \"form\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | HTMLFormElement\",\n                    \"resolved\": \"HTMLFormElement | string | undefined\",\n                    \"references\": {\n                        \"HTMLFormElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLFormElement\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The HTML form element or form element id. Used to submit a form when the button is not a child of the form.\"\n                },\n                \"attribute\": \"form\",\n                \"reflect\": false\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"isCircle\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionFocus\",\n                \"name\": \"ionFocus\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the button has focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"ionBlur\",\n                \"name\": \"ionBlur\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the button loses focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }];\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"disabled\",\n                \"methodName\": \"disabledChanged\"\n            }];\n    }\n}\n"],"mappings":"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"}