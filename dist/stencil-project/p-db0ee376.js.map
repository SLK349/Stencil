{"version":3,"names":["getResizeContainer","resizeMode","doc","undefined","KeyboardResize","None","ionApp","querySelector","body","getResizeContainerHeight","containerElement","clientHeight","createKeyboardController","async","keyboardChangeCallback","keyboardWillShowHandler","keyboardWillHideHandler","keyboardVisible","initialResizeContainerHeight","init","resizeOptions","Keyboard","getResizeMode","mode","fireChangeCallback","win","addEventListener","state","createResizePromiseIfNeeded","Promise","resolve","callback","ro","disconnect","ResizeObserver","observe","destroy","removeEventListener","isKeyboardVisible"],"sources":["node_modules/@ionic/core/dist/collection/utils/keyboard/keyboard-controller.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { doc, win } from \"../browser/index\";\nimport { Keyboard, KeyboardResize } from \"../native/keyboard\";\n/**\n * The element that resizes when the keyboard opens\n * is going to depend on the resize mode\n * which is why we check that here.\n */\nconst getResizeContainer = (resizeMode) => {\n    /**\n     * If doc is undefined then we are\n     * in an SSR environment, so the keyboard\n     * adjustment does not apply.\n     * If the webview does not resize then there\n     * is no container to resize.\n     */\n    if (doc === undefined || resizeMode === KeyboardResize.None || resizeMode === undefined) {\n        return null;\n    }\n    /**\n     * The three remaining resize modes: Native, Ionic, and Body\n     * all cause `ion-app` to resize, so we can listen for changes\n     * on that. In the event `ion-app` is not available then\n     * we can fall back to `body`.\n     */\n    const ionApp = doc.querySelector('ion-app');\n    return ionApp !== null && ionApp !== void 0 ? ionApp : doc.body;\n};\n/**\n * Get the height of ion-app or body.\n * This is used for determining if the webview\n * has resized before the keyboard closed.\n * */\nconst getResizeContainerHeight = (resizeMode) => {\n    const containerElement = getResizeContainer(resizeMode);\n    return containerElement === null ? 0 : containerElement.clientHeight;\n};\n/**\n * Creates a controller that tracks and reacts to opening or closing the keyboard.\n *\n * @internal\n * @param keyboardChangeCallback A function to call when the keyboard opens or closes.\n */\nexport const createKeyboardController = async (keyboardChangeCallback) => {\n    let keyboardWillShowHandler;\n    let keyboardWillHideHandler;\n    let keyboardVisible;\n    /**\n     * This lets us determine if the webview content\n     * has resized as a result of the keyboard.\n     */\n    let initialResizeContainerHeight;\n    const init = async () => {\n        const resizeOptions = await Keyboard.getResizeMode();\n        const resizeMode = resizeOptions === undefined ? undefined : resizeOptions.mode;\n        keyboardWillShowHandler = () => {\n            /**\n             * We need to compute initialResizeContainerHeight right before\n             * the keyboard opens to guarantee the resize container is visible.\n             * The resize container may not be visible if we compute this\n             * as soon as the keyboard controller is created.\n             * We should only need to do this once to avoid additional clientHeight\n             * computations.\n             */\n            if (initialResizeContainerHeight === undefined) {\n                initialResizeContainerHeight = getResizeContainerHeight(resizeMode);\n            }\n            keyboardVisible = true;\n            fireChangeCallback(keyboardVisible, resizeMode);\n        };\n        keyboardWillHideHandler = () => {\n            keyboardVisible = false;\n            fireChangeCallback(keyboardVisible, resizeMode);\n        };\n        win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillShow', keyboardWillShowHandler);\n        win === null || win === void 0 ? void 0 : win.addEventListener('keyboardWillHide', keyboardWillHideHandler);\n    };\n    const fireChangeCallback = (state, resizeMode) => {\n        if (keyboardChangeCallback) {\n            keyboardChangeCallback(state, createResizePromiseIfNeeded(resizeMode));\n        }\n    };\n    /**\n     * Code responding to keyboard lifecycles may need\n     * to show/hide content once the webview has\n     * resized as a result of the keyboard showing/hiding.\n     * createResizePromiseIfNeeded provides a way for code to wait for the\n     * resize event that was triggered as a result of the keyboard.\n     */\n    const createResizePromiseIfNeeded = (resizeMode) => {\n        if (\n        /**\n         * If we are in an SSR environment then there is\n         * no window to resize. Additionally, if there\n         * is no resize mode or the resize mode is \"None\"\n         * then initialResizeContainerHeight will be 0\n         */\n        initialResizeContainerHeight === 0 ||\n            /**\n             * If the keyboard is closed before the webview resizes initially\n             * then the webview will never resize.\n             */\n            initialResizeContainerHeight === getResizeContainerHeight(resizeMode)) {\n            return;\n        }\n        /**\n         * Get the resize container so we can\n         * attach the ResizeObserver below to\n         * the correct element.\n         */\n        const containerElement = getResizeContainer(resizeMode);\n        if (containerElement === null) {\n            return;\n        }\n        /**\n         * Some part of the web content should resize,\n         * and we need to listen for a resize.\n         */\n        return new Promise((resolve) => {\n            const callback = () => {\n                /**\n                 * As per the spec, the ResizeObserver\n                 * will fire when observation starts if\n                 * the observed element is rendered and does not\n                 * have a size of 0 x 0. However, the watched element\n                 * may or may not have resized by the time this first\n                 * callback is fired. As a result, we need to check\n                 * the dimensions of the element.\n                 *\n                 * https://www.w3.org/TR/resize-observer/#intro\n                 */\n                if (containerElement.clientHeight === initialResizeContainerHeight) {\n                    /**\n                     * The resize happened, so stop listening\n                     * for resize on this element.\n                     */\n                    ro.disconnect();\n                    resolve();\n                }\n            };\n            /**\n             * In Capacitor there can be delay between when the window\n             * resizes and when the container element resizes, so we cannot\n             * rely on a 'resize' event listener on the window.\n             * Instead, we need to determine when the container\n             * element resizes using a ResizeObserver.\n             */\n            const ro = new ResizeObserver(callback);\n            ro.observe(containerElement);\n        });\n    };\n    const destroy = () => {\n        win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillShow', keyboardWillShowHandler);\n        win === null || win === void 0 ? void 0 : win.removeEventListener('keyboardWillHide', keyboardWillHideHandler);\n        keyboardWillShowHandler = keyboardWillHideHandler = undefined;\n    };\n    const isKeyboardVisible = () => keyboardVisible;\n    await init();\n    return { init, destroy, isKeyboardVisible };\n};\n"],"mappings":";;;GAUA,MAAMA,EAAsBC,IAQxB,GAAIC,IAAQC,WAAaF,IAAeG,EAAeC,MAAQJ,IAAeE,UAAW,CACrF,OAAO,IACf,CAOI,MAAMG,EAASJ,EAAIK,cAAc,WACjC,OAAOD,IAAW,MAAQA,SAAgB,EAAIA,EAASJ,EAAIM,IAAI,EAOnE,MAAMC,EAA4BR,IAC9B,MAAMS,EAAmBV,EAAmBC,GAC5C,OAAOS,IAAqB,KAAO,EAAIA,EAAiBC,YAAY,EAQ5D,MAACC,EAA2BC,MAAOC,IAC3C,IAAIC,EACJ,IAAIC,EACJ,IAAIC,EAKJ,IAAIC,EACJ,MAAMC,EAAON,UACT,MAAMO,QAAsBC,EAASC,gBACrC,MAAMrB,EAAamB,IAAkBjB,UAAYA,UAAYiB,EAAcG,KAC3ER,EAA0B,KAStB,GAAIG,IAAiCf,UAAW,CAC5Ce,EAA+BT,EAAyBR,EACxE,CACYgB,EAAkB,KAClBO,EAAmBP,EAAiBhB,EAAW,EAEnDe,EAA0B,KACtBC,EAAkB,MAClBO,EAAmBP,EAAiBhB,EAAW,EAEnDwB,IAAQ,MAAQA,SAAa,OAAS,EAAIA,EAAIC,iBAAiB,mBAAoBX,GACnFU,IAAQ,MAAQA,SAAa,OAAS,EAAIA,EAAIC,iBAAiB,mBAAoBV,EAAwB,EAE/G,MAAMQ,EAAqB,CAACG,EAAO1B,KAC/B,GAAIa,EAAwB,CACxBA,EAAuBa,EAAOC,EAA4B3B,GACtE,GASI,MAAM2B,EAA+B3B,IACjC,GAOAiB,IAAiC,GAK7BA,IAAiCT,EAAyBR,GAAa,CACvE,MACZ,CAMQ,MAAMS,EAAmBV,EAAmBC,GAC5C,GAAIS,IAAqB,KAAM,CAC3B,MACZ,CAKQ,OAAO,IAAImB,SAASC,IAChB,MAAMC,EAAW,KAYb,GAAIrB,EAAiBC,eAAiBO,EAA8B,CAKhEc,EAAGC,aACHH,GACpB,GASY,MAAME,EAAK,IAAIE,eAAeH,GAC9BC,EAAGG,QAAQzB,EAAiB,GAC9B,EAEN,MAAM0B,EAAU,KACZX,IAAQ,MAAQA,SAAa,OAAS,EAAIA,EAAIY,oBAAoB,mBAAoBtB,GACtFU,IAAQ,MAAQA,SAAa,OAAS,EAAIA,EAAIY,oBAAoB,mBAAoBrB,GACtFD,EAA0BC,EAA0Bb,SAAS,EAEjE,MAAMmC,EAAoB,IAAMrB,QAC1BE,IACN,MAAO,CAAEA,OAAMiB,UAASE,oBAAmB,S"}