{"version":3,"names":["iosEnterAnimation","baseEl","baseAnimation","createAnimation","backdropAnimation","wrapperAnimation","addElement","querySelector","fromTo","beforeStyles","afterClearStyles","easing","duration","addAnimation","iosLeaveAnimation","pickerIosCss","IonPickerLegacyIosStyle0","pickerMdCss","IonPickerLegacyMdStyle0","Picker","constructor","hostRef","this","delegateController","createDelegateController","lockController","createLockController","triggerController","createTriggerController","onBackdropTap","dismiss","undefined","BACKDROP","dispatchCancelHandler","ev","role","detail","isCancel","cancelButton","buttons","find","b","callButtonHandler","presented","overlayIndex","delegate","hasController","keyboardClose","enterAnimation","leaveAnimation","columns","cssClass","showBackdrop","backdropDismiss","animated","htmlAttributes","isOpen","trigger","onIsOpenChange","newValue","oldValue","present","triggerChanged","el","addClickListener","connectedCallback","prepareOverlay","disconnectedCallback","removeClickListener","componentWillLoad","setOverlayId","componentDidLoad","printIonWarning","raf","unlock","lock","attachViewToDom","durationTimeout","setTimeout","data","clearTimeout","dismissed","removeViewFromDom","onDidDismiss","eventMethod","onWillDismiss","getColumn","name","Promise","resolve","column","buttonClick","button","shouldDismiss","getSelected","rtn","safeCall","handler","selected","forEach","col","index","selectedColumn","selectedIndex","options","text","value","columnIndex","render","mode","getIonMode","h","Host","Object","assign","key","tabindex","style","zIndex","class","getClassMap","onIonBackdropTap","onIonPickerWillDismiss","visible","tappable","map","buttonWrapperClass","type","onClick","buttonClass","c"],"sources":["node_modules/@ionic/core/dist/collection/components/picker-legacy/animations/ios.enter.js","node_modules/@ionic/core/dist/collection/components/picker-legacy/animations/ios.leave.js","node_modules/@ionic/core/dist/collection/components/picker-legacy/picker.ios.css?tag=ion-picker-legacy&mode=ios&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/picker-legacy/picker.md.css?tag=ion-picker-legacy&mode=md&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/picker-legacy/picker.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { createAnimation } from \"../../../utils/animation/animation\";\n/**\n * iOS Picker Enter Animation\n */\nexport const iosEnterAnimation = (baseEl) => {\n    const baseAnimation = createAnimation();\n    const backdropAnimation = createAnimation();\n    const wrapperAnimation = createAnimation();\n    backdropAnimation\n        .addElement(baseEl.querySelector('ion-backdrop'))\n        .fromTo('opacity', 0.01, 'var(--backdrop-opacity)')\n        .beforeStyles({\n        'pointer-events': 'none',\n    })\n        .afterClearStyles(['pointer-events']);\n    wrapperAnimation\n        .addElement(baseEl.querySelector('.picker-wrapper'))\n        .fromTo('transform', 'translateY(100%)', 'translateY(0%)');\n    return baseAnimation\n        .addElement(baseEl)\n        .easing('cubic-bezier(.36,.66,.04,1)')\n        .duration(400)\n        .addAnimation([backdropAnimation, wrapperAnimation]);\n};\n","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { createAnimation } from \"../../../utils/animation/animation\";\n/**\n * iOS Picker Leave Animation\n */\nexport const iosLeaveAnimation = (baseEl) => {\n    const baseAnimation = createAnimation();\n    const backdropAnimation = createAnimation();\n    const wrapperAnimation = createAnimation();\n    backdropAnimation\n        .addElement(baseEl.querySelector('ion-backdrop'))\n        .fromTo('opacity', 'var(--backdrop-opacity)', 0.01);\n    wrapperAnimation\n        .addElement(baseEl.querySelector('.picker-wrapper'))\n        .fromTo('transform', 'translateY(0%)', 'translateY(100%)');\n    return baseAnimation\n        .addElement(baseEl)\n        .easing('cubic-bezier(.36,.66,.04,1)')\n        .duration(400)\n        .addAnimation([backdropAnimation, wrapperAnimation]);\n};\n","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the picker\n   * @prop --background-rgb: Background of the picker in rgb format\n   *\n   * @prop --border-radius: Border radius of the picker\n   * @prop --border-color: Border color of the picker\n   * @prop --border-width: Border width of the picker\n   * @prop --border-style: Border style of the picker\n   *\n   * @prop --min-width: Minimum width of the picker\n   * @prop --width: Width of the picker\n   * @prop --max-width: Maximum width of the picker\n   *\n   * @prop --min-height: Minimum height of the picker\n   * @prop --height: Height of the picker\n   * @prop --max-height: Maximum height of the picker\n   *\n   * @prop --backdrop-opacity: Opacity of the backdrop\n   */\n  --border-radius: 0;\n  --border-style: solid;\n  --min-width: auto;\n  --width: 100%;\n  --max-width: 500px;\n  --min-height: auto;\n  --max-height: auto;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  top: 0;\n  display: block;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  outline: none;\n  font-family: var(--ion-font-family, inherit);\n  contain: strict;\n  user-select: none;\n  z-index: 1001;\n}\n:host {\n  inset-inline-start: 0;\n}\n\n:host(.overlay-hidden) {\n  display: none;\n}\n\n.picker-wrapper {\n  border-radius: var(--border-radius);\n  left: 0;\n  right: 0;\n  bottom: 0;\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  margin-top: auto;\n  margin-bottom: auto;\n  transform: translate3d(0,  100%,  0);\n  display: flex;\n  position: absolute;\n  flex-direction: column;\n  width: var(--width);\n  min-width: var(--min-width);\n  max-width: var(--max-width);\n  height: var(--height);\n  min-height: var(--min-height);\n  max-height: var(--max-height);\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  background: var(--background);\n  contain: strict;\n  overflow: hidden;\n  z-index: 10;\n}\n\n.picker-toolbar {\n  width: 100%;\n  background: transparent;\n  contain: strict;\n  z-index: 1;\n}\n\n.picker-button {\n  border: 0;\n  font-family: inherit;\n}\n\n.picker-button:active, .picker-button:focus {\n  outline: none;\n}\n\n.picker-columns {\n  display: flex;\n  position: relative;\n  justify-content: center;\n  margin-bottom: var(--ion-safe-area-bottom, 0);\n  contain: strict;\n  overflow: hidden;\n}\n\n.picker-above-highlight,\n.picker-below-highlight {\n  display: none;\n  pointer-events: none;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --background: var(--ion-background-color, #fff);\n  --border-width: 1px 0 0;\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, var(--ion-background-color-step-250, #c8c7cc))));\n  --height: 260px;\n  --backdrop-opacity: var(--ion-backdrop-opacity, 0.26);\n  color: var(--ion-item-color, var(--ion-text-color, #000));\n}\n\n.picker-toolbar {\n  display: flex;\n  height: 44px;\n  border-bottom: 0.55px solid var(--border-color);\n}\n\n.picker-toolbar-button {\n  flex: 1;\n  text-align: end;\n}\n\n.picker-toolbar-button:last-child .picker-button {\n  font-weight: 600;\n}\n\n.picker-toolbar-button:first-child {\n  font-weight: normal;\n  text-align: start;\n}\n\n.picker-button,\n.picker-button.ion-activated {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  -webkit-padding-start: 1em;\n  padding-inline-start: 1em;\n  -webkit-padding-end: 1em;\n  padding-inline-end: 1em;\n  padding-top: 0;\n  padding-bottom: 0;\n  height: 44px;\n  background: transparent;\n  color: var(--ion-color-primary, #0054e9);\n  font-size: 16px;\n}\n\n.picker-columns {\n  height: 215px;\n  perspective: 1000px;\n}\n\n.picker-above-highlight {\n  top: 0;\n  transform: translate3d(0,  0,  90px);\n  display: block;\n  position: absolute;\n  width: 100%;\n  height: 81px;\n  border-bottom: 1px solid var(--border-color);\n  background: linear-gradient(to bottom, var(--background, var(--ion-background-color, #fff)) 20%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%);\n  z-index: 10;\n}\n.picker-above-highlight {\n  inset-inline-start: 0;\n}\n\n.picker-below-highlight {\n  top: 115px;\n  transform: translate3d(0,  0,  90px);\n  display: block;\n  position: absolute;\n  width: 100%;\n  height: 119px;\n  border-top: 1px solid var(--border-color);\n  background: linear-gradient(to top, var(--background, var(--ion-background-color, #fff)) 30%, rgba(var(--background-rgb, var(--ion-background-color-rgb, 255, 255, 255)), 0.8) 100%);\n  z-index: 11;\n}\n.picker-below-highlight {\n  inset-inline-start: 0;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the picker\n   * @prop --background-rgb: Background of the picker in rgb format\n   *\n   * @prop --border-radius: Border radius of the picker\n   * @prop --border-color: Border color of the picker\n   * @prop --border-width: Border width of the picker\n   * @prop --border-style: Border style of the picker\n   *\n   * @prop --min-width: Minimum width of the picker\n   * @prop --width: Width of the picker\n   * @prop --max-width: Maximum width of the picker\n   *\n   * @prop --min-height: Minimum height of the picker\n   * @prop --height: Height of the picker\n   * @prop --max-height: Maximum height of the picker\n   *\n   * @prop --backdrop-opacity: Opacity of the backdrop\n   */\n  --border-radius: 0;\n  --border-style: solid;\n  --min-width: auto;\n  --width: 100%;\n  --max-width: 500px;\n  --min-height: auto;\n  --max-height: auto;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  top: 0;\n  display: block;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  outline: none;\n  font-family: var(--ion-font-family, inherit);\n  contain: strict;\n  user-select: none;\n  z-index: 1001;\n}\n:host {\n  inset-inline-start: 0;\n}\n\n:host(.overlay-hidden) {\n  display: none;\n}\n\n.picker-wrapper {\n  border-radius: var(--border-radius);\n  left: 0;\n  right: 0;\n  bottom: 0;\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  -webkit-margin-end: auto;\n  margin-inline-end: auto;\n  margin-top: auto;\n  margin-bottom: auto;\n  transform: translate3d(0,  100%,  0);\n  display: flex;\n  position: absolute;\n  flex-direction: column;\n  width: var(--width);\n  min-width: var(--min-width);\n  max-width: var(--max-width);\n  height: var(--height);\n  min-height: var(--min-height);\n  max-height: var(--max-height);\n  border-width: var(--border-width);\n  border-style: var(--border-style);\n  border-color: var(--border-color);\n  background: var(--background);\n  contain: strict;\n  overflow: hidden;\n  z-index: 10;\n}\n\n.picker-toolbar {\n  width: 100%;\n  background: transparent;\n  contain: strict;\n  z-index: 1;\n}\n\n.picker-button {\n  border: 0;\n  font-family: inherit;\n}\n\n.picker-button:active, .picker-button:focus {\n  outline: none;\n}\n\n.picker-columns {\n  display: flex;\n  position: relative;\n  justify-content: center;\n  margin-bottom: var(--ion-safe-area-bottom, 0);\n  contain: strict;\n  overflow: hidden;\n}\n\n.picker-above-highlight,\n.picker-below-highlight {\n  display: none;\n  pointer-events: none;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --background: var(--ion-background-color, #fff);\n  --border-width: 0.55px 0 0;\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));\n  --height: 260px;\n  --backdrop-opacity: var(--ion-backdrop-opacity, 0.26);\n  color: var(--ion-item-color, var(--ion-text-color, #000));\n}\n\n.picker-toolbar {\n  display: flex;\n  justify-content: flex-end;\n  height: 44px;\n}\n\n.picker-button,\n.picker-button.ion-activated {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  -webkit-padding-start: 1.1em;\n  padding-inline-start: 1.1em;\n  -webkit-padding-end: 1.1em;\n  padding-inline-end: 1.1em;\n  padding-top: 0;\n  padding-bottom: 0;\n  height: 44px;\n  background: transparent;\n  color: var(--ion-color-primary, #0054e9);\n  font-size: 14px;\n  font-weight: 500;\n  text-transform: uppercase;\n  box-shadow: none;\n}\n\n.picker-columns {\n  height: 216px;\n  perspective: 1800px;\n}\n\n.picker-above-highlight {\n  top: 0;\n  transform: translate3d(0,  0,  90px);\n  position: absolute;\n  width: 100%;\n  height: 81px;\n  border-bottom: 1px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));\n  background: linear-gradient(to bottom, var(--ion-background-color, #fff) 20%, rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8) 100%);\n  z-index: 10;\n}\n.picker-above-highlight {\n  inset-inline-start: 0;\n}\n\n.picker-below-highlight {\n  top: 115px;\n  transform: translate3d(0,  0,  90px);\n  position: absolute;\n  width: 100%;\n  height: 119px;\n  border-top: 1px solid var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));\n  background: linear-gradient(to top, var(--ion-background-color, #fff) 30%, rgba(var(--ion-background-color-rgb, 255, 255, 255), 0.8) 100%);\n  z-index: 11;\n}\n.picker-below-highlight {\n  inset-inline-start: 0;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { raf } from \"../../utils/helpers\";\nimport { createLockController } from \"../../utils/lock-controller\";\nimport { printIonWarning } from \"../../utils/logging/index\";\nimport { createDelegateController, createTriggerController, BACKDROP, dismiss, eventMethod, isCancel, prepareOverlay, present, safeCall, setOverlayId, } from \"../../utils/overlays\";\nimport { getClassMap } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\nimport { iosEnterAnimation } from \"./animations/ios.enter\";\nimport { iosLeaveAnimation } from \"./animations/ios.leave\";\n// TODO(FW-2832): types\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\nexport class Picker {\n    constructor() {\n        this.delegateController = createDelegateController(this);\n        this.lockController = createLockController();\n        this.triggerController = createTriggerController();\n        this.onBackdropTap = () => {\n            this.dismiss(undefined, BACKDROP);\n        };\n        this.dispatchCancelHandler = (ev) => {\n            const role = ev.detail.role;\n            if (isCancel(role)) {\n                const cancelButton = this.buttons.find((b) => b.role === 'cancel');\n                this.callButtonHandler(cancelButton);\n            }\n        };\n        this.presented = false;\n        this.overlayIndex = undefined;\n        this.delegate = undefined;\n        this.hasController = false;\n        this.keyboardClose = true;\n        this.enterAnimation = undefined;\n        this.leaveAnimation = undefined;\n        this.buttons = [];\n        this.columns = [];\n        this.cssClass = undefined;\n        this.duration = 0;\n        this.showBackdrop = true;\n        this.backdropDismiss = true;\n        this.animated = true;\n        this.htmlAttributes = undefined;\n        this.isOpen = false;\n        this.trigger = undefined;\n    }\n    onIsOpenChange(newValue, oldValue) {\n        if (newValue === true && oldValue === false) {\n            this.present();\n        }\n        else if (newValue === false && oldValue === true) {\n            this.dismiss();\n        }\n    }\n    triggerChanged() {\n        const { trigger, el, triggerController } = this;\n        if (trigger) {\n            triggerController.addClickListener(el, trigger);\n        }\n    }\n    connectedCallback() {\n        prepareOverlay(this.el);\n        this.triggerChanged();\n    }\n    disconnectedCallback() {\n        this.triggerController.removeClickListener();\n    }\n    componentWillLoad() {\n        setOverlayId(this.el);\n    }\n    componentDidLoad() {\n        printIonWarning('ion-picker-legacy and ion-picker-legacy-column have been deprecated in favor of new versions of the ion-picker and ion-picker-column components. These new components display inline with your page content allowing for more presentation flexibility than before.', this.el);\n        /**\n         * If picker was rendered with isOpen=\"true\"\n         * then we should open picker immediately.\n         */\n        if (this.isOpen === true) {\n            raf(() => this.present());\n        }\n        /**\n         * When binding values in frameworks such as Angular\n         * it is possible for the value to be set after the Web Component\n         * initializes but before the value watcher is set up in Stencil.\n         * As a result, the watcher callback may not be fired.\n         * We work around this by manually calling the watcher\n         * callback when the component has loaded and the watcher\n         * is configured.\n         */\n        this.triggerChanged();\n    }\n    /**\n     * Present the picker overlay after it has been created.\n     */\n    async present() {\n        const unlock = await this.lockController.lock();\n        await this.delegateController.attachViewToDom();\n        await present(this, 'pickerEnter', iosEnterAnimation, iosEnterAnimation, undefined);\n        if (this.duration > 0) {\n            this.durationTimeout = setTimeout(() => this.dismiss(), this.duration);\n        }\n        unlock();\n    }\n    /**\n     * Dismiss the picker overlay after it has been presented.\n     *\n     * @param data Any data to emit in the dismiss events.\n     * @param role The role of the element that is dismissing the picker.\n     * This can be useful in a button handler for determining which button was\n     * clicked to dismiss the picker.\n     * Some examples include: ``\"cancel\"`, `\"destructive\"`, \"selected\"`, and `\"backdrop\"`.\n     */\n    async dismiss(data, role) {\n        const unlock = await this.lockController.lock();\n        if (this.durationTimeout) {\n            clearTimeout(this.durationTimeout);\n        }\n        const dismissed = await dismiss(this, data, role, 'pickerLeave', iosLeaveAnimation, iosLeaveAnimation);\n        if (dismissed) {\n            this.delegateController.removeViewFromDom();\n        }\n        unlock();\n        return dismissed;\n    }\n    /**\n     * Returns a promise that resolves when the picker did dismiss.\n     */\n    onDidDismiss() {\n        return eventMethod(this.el, 'ionPickerDidDismiss');\n    }\n    /**\n     * Returns a promise that resolves when the picker will dismiss.\n     */\n    onWillDismiss() {\n        return eventMethod(this.el, 'ionPickerWillDismiss');\n    }\n    /**\n     * Get the column that matches the specified name.\n     *\n     * @param name The name of the column.\n     */\n    getColumn(name) {\n        return Promise.resolve(this.columns.find((column) => column.name === name));\n    }\n    async buttonClick(button) {\n        const role = button.role;\n        if (isCancel(role)) {\n            return this.dismiss(undefined, role);\n        }\n        const shouldDismiss = await this.callButtonHandler(button);\n        if (shouldDismiss) {\n            return this.dismiss(this.getSelected(), button.role);\n        }\n        return Promise.resolve();\n    }\n    async callButtonHandler(button) {\n        if (button) {\n            // a handler has been provided, execute it\n            // pass the handler the values from the inputs\n            const rtn = await safeCall(button.handler, this.getSelected());\n            if (rtn === false) {\n                // if the return value of the handler is false then do not dismiss\n                return false;\n            }\n        }\n        return true;\n    }\n    getSelected() {\n        const selected = {};\n        this.columns.forEach((col, index) => {\n            const selectedColumn = col.selectedIndex !== undefined ? col.options[col.selectedIndex] : undefined;\n            selected[col.name] = {\n                text: selectedColumn ? selectedColumn.text : undefined,\n                value: selectedColumn ? selectedColumn.value : undefined,\n                columnIndex: index,\n            };\n        });\n        return selected;\n    }\n    render() {\n        const { htmlAttributes } = this;\n        const mode = getIonMode(this);\n        return (h(Host, Object.assign({ key: 'cb1495acc8842c00e9f51ae792a01f769e36b0c6', \"aria-modal\": \"true\", tabindex: \"-1\" }, htmlAttributes, { style: {\n                zIndex: `${20000 + this.overlayIndex}`,\n            }, class: Object.assign({ [mode]: true,\n                // Used internally for styling\n                [`picker-${mode}`]: true, 'overlay-hidden': true }, getClassMap(this.cssClass)), onIonBackdropTap: this.onBackdropTap, onIonPickerWillDismiss: this.dispatchCancelHandler }), h(\"ion-backdrop\", { key: 'eecbcdfd474f5ab2f9962a030b1dcbf7714fe938', visible: this.showBackdrop, tappable: this.backdropDismiss }), h(\"div\", { key: '262e1d3bc916b30068f7be1edbc73283a815fc0f', tabindex: \"0\" }), h(\"div\", { key: 'a036cf789ab768428aae26a19dbd0c5cb696188c', class: \"picker-wrapper ion-overlay-wrapper\", role: \"dialog\" }, h(\"div\", { key: '6be7a8986976ead39611ce398ed6ad71f3b7427e', class: \"picker-toolbar\" }, this.buttons.map((b) => (h(\"div\", { class: buttonWrapperClass(b) }, h(\"button\", { type: \"button\", onClick: () => this.buttonClick(b), class: buttonClass(b) }, b.text))))), h(\"div\", { key: '66a1d99aebf48219cab4177d06d893fe1d458a1f', class: \"picker-columns\" }, h(\"div\", { key: 'ed7fd940c5f54453587e13ab52cbfd4122a397c6', class: \"picker-above-highlight\" }), this.presented && this.columns.map((c) => h(\"ion-picker-legacy-column\", { col: c })), h(\"div\", { key: '21c491c08bce126dde03196b21e28d903e157e1f', class: \"picker-below-highlight\" }))), h(\"div\", { key: 'bd892f74b886ae1bfd010d687a2b9741213b246c', tabindex: \"0\" })));\n    }\n    static get is() { return \"ion-picker-legacy\"; }\n    static get encapsulation() { return \"scoped\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"picker.ios.scss\"],\n            \"md\": [\"picker.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"picker.ios.css\"],\n            \"md\": [\"picker.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"overlayIndex\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number\",\n                    \"references\": {}\n                },\n                \"required\": true,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"\"\n                },\n                \"attribute\": \"overlay-index\",\n                \"reflect\": false\n            },\n            \"delegate\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"FrameworkDelegate\",\n                    \"resolved\": \"FrameworkDelegate | undefined\",\n                    \"references\": {\n                        \"FrameworkDelegate\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::FrameworkDelegate\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"\"\n                }\n            },\n            \"hasController\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"\"\n                },\n                \"attribute\": \"has-controller\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"keyboardClose\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the keyboard will be automatically dismissed when the overlay is presented.\"\n                },\n                \"attribute\": \"keyboard-close\",\n                \"reflect\": false,\n                \"defaultValue\": \"true\"\n            },\n            \"enterAnimation\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"AnimationBuilder\",\n                    \"resolved\": \"((baseEl: any, opts?: any) => Animation) | undefined\",\n                    \"references\": {\n                        \"AnimationBuilder\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::AnimationBuilder\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Animation to use when the picker is presented.\"\n                }\n            },\n            \"leaveAnimation\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"AnimationBuilder\",\n                    \"resolved\": \"((baseEl: any, opts?: any) => Animation) | undefined\",\n                    \"references\": {\n                        \"AnimationBuilder\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::AnimationBuilder\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Animation to use when the picker is dismissed.\"\n                }\n            },\n            \"buttons\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"PickerButton[]\",\n                    \"resolved\": \"PickerButton[]\",\n                    \"references\": {\n                        \"PickerButton\": {\n                            \"location\": \"import\",\n                            \"path\": \"./picker-interface\",\n                            \"id\": \"src/components/picker-legacy/picker-interface.ts::PickerButton\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Array of buttons to be displayed at the top of the picker.\"\n                },\n                \"defaultValue\": \"[]\"\n            },\n            \"columns\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"PickerColumn[]\",\n                    \"resolved\": \"PickerColumn[]\",\n                    \"references\": {\n                        \"PickerColumn\": {\n                            \"location\": \"import\",\n                            \"path\": \"./picker-interface\",\n                            \"id\": \"src/components/picker-legacy/picker-interface.ts::PickerColumn\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Array of columns to be displayed in the picker.\"\n                },\n                \"defaultValue\": \"[]\"\n            },\n            \"cssClass\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | string[]\",\n                    \"resolved\": \"string | string[] | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Additional classes to apply for custom CSS. If multiple classes are\\nprovided they should be separated by spaces.\"\n                },\n                \"attribute\": \"css-class\",\n                \"reflect\": false\n            },\n            \"duration\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Number of milliseconds to wait before dismissing the picker.\"\n                },\n                \"attribute\": \"duration\",\n                \"reflect\": false,\n                \"defaultValue\": \"0\"\n            },\n            \"showBackdrop\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, a backdrop will be displayed behind the picker.\"\n                },\n                \"attribute\": \"show-backdrop\",\n                \"reflect\": false,\n                \"defaultValue\": \"true\"\n            },\n            \"backdropDismiss\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the picker will be dismissed when the backdrop is clicked.\"\n                },\n                \"attribute\": \"backdrop-dismiss\",\n                \"reflect\": false,\n                \"defaultValue\": \"true\"\n            },\n            \"animated\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the picker will animate.\"\n                },\n                \"attribute\": \"animated\",\n                \"reflect\": false,\n                \"defaultValue\": \"true\"\n            },\n            \"htmlAttributes\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"{ [key: string]: any }\",\n                    \"resolved\": \"undefined | { [key: string]: any; }\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Additional attributes to pass to the picker.\"\n                }\n            },\n            \"isOpen\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the picker will open. If `false`, the picker will close.\\nUse this if you need finer grained control over presentation, otherwise\\njust use the pickerController or the `trigger` property.\\nNote: `isOpen` will not automatically be set back to `false` when\\nthe picker dismisses. You will need to do that in your code.\"\n                },\n                \"attribute\": \"is-open\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"trigger\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string | undefined\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"An ID corresponding to the trigger element that\\ncauses the picker to open when clicked.\"\n                },\n                \"attribute\": \"trigger\",\n                \"reflect\": false\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"presented\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"didPresent\",\n                \"name\": \"ionPickerDidPresent\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted after the picker has presented.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"willPresent\",\n                \"name\": \"ionPickerWillPresent\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted before the picker has presented.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"willDismiss\",\n                \"name\": \"ionPickerWillDismiss\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted before the picker has dismissed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"OverlayEventDetail\",\n                    \"resolved\": \"OverlayEventDetail<any>\",\n                    \"references\": {\n                        \"OverlayEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/overlays-interface\",\n                            \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"didDismiss\",\n                \"name\": \"ionPickerDidDismiss\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted after the picker has dismissed.\"\n                },\n                \"complexType\": {\n                    \"original\": \"OverlayEventDetail\",\n                    \"resolved\": \"OverlayEventDetail<any>\",\n                    \"references\": {\n                        \"OverlayEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/overlays-interface\",\n                            \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"didPresentShorthand\",\n                \"name\": \"didPresent\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted after the picker has presented.\\nShorthand for ionPickerWillDismiss.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"willPresentShorthand\",\n                \"name\": \"willPresent\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted before the picker has presented.\\nShorthand for ionPickerWillPresent.\"\n                },\n                \"complexType\": {\n                    \"original\": \"void\",\n                    \"resolved\": \"void\",\n                    \"references\": {}\n                }\n            }, {\n                \"method\": \"willDismissShorthand\",\n                \"name\": \"willDismiss\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted before the picker has dismissed.\\nShorthand for ionPickerWillDismiss.\"\n                },\n                \"complexType\": {\n                    \"original\": \"OverlayEventDetail\",\n                    \"resolved\": \"OverlayEventDetail<any>\",\n                    \"references\": {\n                        \"OverlayEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/overlays-interface\",\n                            \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"didDismissShorthand\",\n                \"name\": \"didDismiss\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted after the picker has dismissed.\\nShorthand for ionPickerDidDismiss.\"\n                },\n                \"complexType\": {\n                    \"original\": \"OverlayEventDetail\",\n                    \"resolved\": \"OverlayEventDetail<any>\",\n                    \"references\": {\n                        \"OverlayEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/overlays-interface\",\n                            \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"present\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Present the picker overlay after it has been created.\",\n                    \"tags\": []\n                }\n            },\n            \"dismiss\": {\n                \"complexType\": {\n                    \"signature\": \"(data?: any, role?: string) => Promise<boolean>\",\n                    \"parameters\": [{\n                            \"name\": \"data\",\n                            \"type\": \"any\",\n                            \"docs\": \"Any data to emit in the dismiss events.\"\n                        }, {\n                            \"name\": \"role\",\n                            \"type\": \"string | undefined\",\n                            \"docs\": \"The role of the element that is dismissing the picker.\\nThis can be useful in a button handler for determining which button was\\nclicked to dismiss the picker.\\nSome examples include: ``\\\"cancel\\\"`, `\\\"destructive\\\"`, \\\"selected\\\"`, and `\\\"backdrop\\\"`.\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<boolean>\"\n                },\n                \"docs\": {\n                    \"text\": \"Dismiss the picker overlay after it has been presented.\",\n                    \"tags\": [{\n                            \"name\": \"param\",\n                            \"text\": \"data Any data to emit in the dismiss events.\"\n                        }, {\n                            \"name\": \"param\",\n                            \"text\": \"role The role of the element that is dismissing the picker.\\nThis can be useful in a button handler for determining which button was\\nclicked to dismiss the picker.\\nSome examples include: ``\\\"cancel\\\"`, `\\\"destructive\\\"`, \\\"selected\\\"`, and `\\\"backdrop\\\"`.\"\n                        }]\n                }\n            },\n            \"onDidDismiss\": {\n                \"complexType\": {\n                    \"signature\": \"<T = any>() => Promise<OverlayEventDetail<T>>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"OverlayEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/overlays-interface\",\n                            \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n                        },\n                        \"T\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::T\"\n                        }\n                    },\n                    \"return\": \"Promise<OverlayEventDetail<T>>\"\n                },\n                \"docs\": {\n                    \"text\": \"Returns a promise that resolves when the picker did dismiss.\",\n                    \"tags\": []\n                }\n            },\n            \"onWillDismiss\": {\n                \"complexType\": {\n                    \"signature\": \"<T = any>() => Promise<OverlayEventDetail<T>>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"OverlayEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../utils/overlays-interface\",\n                            \"id\": \"src/utils/overlays-interface.ts::OverlayEventDetail\"\n                        },\n                        \"T\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::T\"\n                        }\n                    },\n                    \"return\": \"Promise<OverlayEventDetail<T>>\"\n                },\n                \"docs\": {\n                    \"text\": \"Returns a promise that resolves when the picker will dismiss.\",\n                    \"tags\": []\n                }\n            },\n            \"getColumn\": {\n                \"complexType\": {\n                    \"signature\": \"(name: string) => Promise<PickerColumn | undefined>\",\n                    \"parameters\": [{\n                            \"name\": \"name\",\n                            \"type\": \"string\",\n                            \"docs\": \"The name of the column.\"\n                        }],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"PickerColumn\": {\n                            \"location\": \"import\",\n                            \"path\": \"./picker-interface\",\n                            \"id\": \"src/components/picker-legacy/picker-interface.ts::PickerColumn\"\n                        }\n                    },\n                    \"return\": \"Promise<PickerColumn | undefined>\"\n                },\n                \"docs\": {\n                    \"text\": \"Get the column that matches the specified name.\",\n                    \"tags\": [{\n                            \"name\": \"param\",\n                            \"text\": \"name The name of the column.\"\n                        }]\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"isOpen\",\n                \"methodName\": \"onIsOpenChange\"\n            }, {\n                \"propName\": \"trigger\",\n                \"methodName\": \"triggerChanged\"\n            }];\n    }\n}\nconst buttonWrapperClass = (button) => {\n    return {\n        [`picker-toolbar-${button.role}`]: button.role !== undefined,\n        'picker-toolbar-button': true,\n    };\n};\nconst buttonClass = (button) => {\n    return Object.assign({ 'picker-button': true, 'ion-activatable': true }, getClassMap(button.cssClass));\n};\n"],"mappings":"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"}