{"file":"p-1f401935.js","mappings":";;;;AAAA;AACA;AACA;AAIY,MAAC,yBAAyB,GAAG,CAAC,EAAE,EAAE,QAAQ,KAAK;AAC3D,IAAI,IAAI,oBAAoB,CAAC;AAC7B,IAAI,IAAI,oBAAoB,CAAC;AAC7B,IAAI,MAAM,qBAAqB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,gBAAgB,KAAK;AAC9D,QAAQ,IAAI,OAAO,QAAQ,KAAK,WAAW,EAAE;AAC7C,YAAY,OAAO;AACnB,SAAS;AACT,QAAQ,MAAM,MAAM,GAAG,QAAQ,CAAC,gBAAgB,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACvD,QAAQ,IAAI,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,QAAQ,EAAE;AAC7D,YAAY,iBAAiB,EAAE,CAAC;AAChC,YAAY,OAAO;AACnB,SAAS;AACT,QAAQ,IAAI,MAAM,KAAK,oBAAoB,EAAE;AAC7C,YAAY,iBAAiB,EAAE,CAAC;AAChC,YAAY,eAAe,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;AACtD,SAAS;AACT,KAAK,CAAC;AACN,IAAI,MAAM,eAAe,GAAG,CAAC,MAAM,EAAE,gBAAgB,KAAK;AAC1D,QAAQ,oBAAoB,GAAG,MAAM,CAAC;AACtC,QAAQ,IAAI,CAAC,oBAAoB,EAAE;AACnC,YAAY,oBAAoB,GAAG,oBAAoB,CAAC;AACxD,SAAS;AACT,QAAQ,MAAM,cAAc,GAAG,oBAAoB,CAAC;AACpD,QAAQ,SAAS,CAAC,MAAM,cAAc,CAAC,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC;AACvE,QAAQ,gBAAgB,EAAE,CAAC;AAC3B,KAAK,CAAC;AACN,IAAI,MAAM,iBAAiB,GAAG,CAAC,aAAa,GAAG,KAAK,KAAK;AACzD,QAAQ,IAAI,CAAC,oBAAoB,EAAE;AACnC,YAAY,OAAO;AACnB,SAAS;AACT,QAAQ,MAAM,cAAc,GAAG,oBAAoB,CAAC;AACpD,QAAQ,SAAS,CAAC,MAAM,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,IAAI,aAAa,IAAI,oBAAoB,KAAK,oBAAoB,EAAE;AAC5E,YAAY,oBAAoB,CAAC,KAAK,EAAE,CAAC;AACzC,SAAS;AACT,QAAQ,oBAAoB,GAAG,SAAS,CAAC;AACzC,KAAK,CAAC;AACN,IAAI,OAAO,aAAa,CAAC;AACzB,QAAQ,EAAE;AACV,QAAQ,WAAW,EAAE,kBAAkB;AACvC,QAAQ,SAAS,EAAE,CAAC;AACpB,QAAQ,OAAO,EAAE,CAAC,EAAE,KAAK,qBAAqB,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,EAAE,oBAAoB,CAAC;AAC9F,QAAQ,MAAM,EAAE,CAAC,EAAE,KAAK,qBAAqB,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,EAAE,sBAAsB,CAAC;AAC/F,QAAQ,KAAK,EAAE,MAAM;AACrB,YAAY,iBAAiB,CAAC,IAAI,CAAC,CAAC;AACpC,YAAY,kBAAkB,EAAE,CAAC;AACjC,YAAY,oBAAoB,GAAG,SAAS,CAAC;AAC7C,SAAS;AACT,KAAK,CAAC,CAAC;AACP;;;;","names":[],"sources":["node_modules/@ionic/core/dist/collection/utils/gesture/button-active.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { writeTask } from \"@stencil/core\";\nimport { hapticSelectionChanged, hapticSelectionEnd, hapticSelectionStart } from \"../native/haptic\";\nimport { createGesture } from \"./index\";\nexport const createButtonActiveGesture = (el, isButton) => {\n    let currentTouchedButton;\n    let initialTouchedButton;\n    const activateButtonAtPoint = (x, y, hapticFeedbackFn) => {\n        if (typeof document === 'undefined') {\n            return;\n        }\n        const target = document.elementFromPoint(x, y);\n        if (!target || !isButton(target) || target.disabled) {\n            clearActiveButton();\n            return;\n        }\n        if (target !== currentTouchedButton) {\n            clearActiveButton();\n            setActiveButton(target, hapticFeedbackFn);\n        }\n    };\n    const setActiveButton = (button, hapticFeedbackFn) => {\n        currentTouchedButton = button;\n        if (!initialTouchedButton) {\n            initialTouchedButton = currentTouchedButton;\n        }\n        const buttonToModify = currentTouchedButton;\n        writeTask(() => buttonToModify.classList.add('ion-activated'));\n        hapticFeedbackFn();\n    };\n    const clearActiveButton = (dispatchClick = false) => {\n        if (!currentTouchedButton) {\n            return;\n        }\n        const buttonToModify = currentTouchedButton;\n        writeTask(() => buttonToModify.classList.remove('ion-activated'));\n        /**\n         * Clicking on one button, but releasing on another button\n         * does not dispatch a click event in browsers, so we\n         * need to do it manually here. Some browsers will\n         * dispatch a click if clicking on one button, dragging over\n         * another button, and releasing on the original button. In that\n         * case, we need to make sure we do not cause a double click there.\n         */\n        if (dispatchClick && initialTouchedButton !== currentTouchedButton) {\n            currentTouchedButton.click();\n        }\n        currentTouchedButton = undefined;\n    };\n    return createGesture({\n        el,\n        gestureName: 'buttonActiveDrag',\n        threshold: 0,\n        onStart: (ev) => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionStart),\n        onMove: (ev) => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionChanged),\n        onEnd: () => {\n            clearActiveButton(true);\n            hapticSelectionEnd();\n            initialTouchedButton = undefined;\n        },\n    });\n};\n"],"version":3}