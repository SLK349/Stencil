{"file":"ion-textarea.js","mappings":"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","names":[],"sources":["node_modules/@ionic/core/dist/collection/components/textarea/textarea.ios.css?tag=ion-textarea&mode=ios&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/textarea/textarea.md.css?tag=ion-textarea&mode=md&encapsulation=scoped","node_modules/@ionic/core/dist/collection/components/textarea/textarea.js"],"sourcesContent":["/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the textarea\n   *\n   * @prop --border-radius: Border radius of the textarea\n   * @prop --border-color: Color of the border below the textarea when using helper text, error text, or counter\n   * @prop --border-radius: Radius of the textarea border. A large radius may display unevenly when using fill=\"outline\"; if needed, use shape=\"round\" instead or increase --padding-start.\n   * @prop --border-style: Style of the border below the textarea when using helper text, error text, or counter\n   * @prop --border-width: Width of the border below the textarea when using helper text, error text, or counter\n   *\n   * @prop --color: Color of the text\n   *\n   * @prop --placeholder-color: Color of the placeholder text\n   * @prop --placeholder-font-style: Style of the placeholder text\n   * @prop --placeholder-font-weight: Weight of the placeholder text\n   * @prop --placeholder-opacity: Opacity of the placeholder text\n   *\n   * @prop --highlight-height: The height of the highlight on the textarea. Only applies to md mode.\n   * @prop --highlight-color-focused: The color of the highlight on the textarea when focused\n   * @prop --highlight-color-valid: The color of the highlight on the textarea when valid\n   * @prop --highlight-color-invalid: The color of the highlight on the textarea when invalid\n   *\n   * @prop --padding-top: Top padding of the textarea\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the textarea\n   * @prop --padding-bottom: Bottom padding of the textarea\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the textarea\n   */\n  --background: initial;\n  --color: initial;\n  --placeholder-color: initial;\n  --placeholder-font-style: initial;\n  --placeholder-font-weight: initial;\n  --placeholder-opacity: var(--ion-placeholder-opacity, 0.6);\n  --padding-top: 0;\n  --padding-end: 0;\n  --padding-bottom: 8px;\n  --padding-start: 0;\n  --border-radius: 0;\n  --border-style: solid;\n  --highlight-color-focused: var(--ion-color-primary, #0054e9);\n  --highlight-color-valid: var(--ion-color-success, #2dd55b);\n  --highlight-color-invalid: var(--ion-color-danger, #c5000f);\n  /**\n   * This is a private API that is used to switch\n   * out the highlight color based on the state\n   * of the component without having to write\n   * different selectors for different fill variants.\n   */\n  --highlight-color: var(--highlight-color-focused);\n  display: block;\n  position: relative;\n  width: 100%;\n  min-height: 44px;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  z-index: 2;\n  box-sizing: border-box;\n}\n\n/**\n * Since the label sits on top of the element,\n * the component needs to be taller otherwise the\n * label will appear too close to the textarea text.\n * Also, floating and stacked labels should not\n * push the label down since it it\n * sits on top of the textarea.\n */\n:host(.textarea-label-placement-floating),\n:host(.textarea-label-placement-stacked) {\n  --padding-top: 0px;\n  min-height: 56px;\n}\n\n/**\n * When the cols property is set we should\n * respect that width instead of defaulting\n * to taking up the entire line.\n * Requires both the cols and autoGrow\n * properties to be reflected as attributes\n * on the host.\n *\n * cols does not work with autoGrow because\n * autoGrow would prevent line breaks from naturally\n * occurring until the textarea takes up the entire line width.\n */\n:host([cols]:not([auto-grow])) {\n  width: fit-content;\n}\n\n:host(.ion-color) {\n  --highlight-color-focused: var(--ion-color-base);\n  background: initial;\n}\n\n:host-context(ion-item) {\n  align-self: baseline;\n}\n\n:host-context(ion-item)[slot=start],\n:host-context(ion-item)[slot=end] {\n  width: auto;\n}\n\n.native-textarea {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  display: block;\n  position: relative;\n  flex: 1;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  border: 0;\n  outline: none;\n  background: transparent;\n  white-space: pre-wrap;\n  /**\n   * This ensures the textarea\n   * remains on top of any decoration\n   * that we render (particularly the\n   * outline border when fill=\"outline\").\n   * If we did not do this then Axe would\n   * be unable to determine the color\n   * contrast of the textarea.\n   */\n  z-index: 1;\n  box-sizing: border-box;\n  resize: none;\n  appearance: none;\n}\n.native-textarea::placeholder {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  color: var(--placeholder-color);\n  font-family: inherit;\n  font-style: var(--placeholder-font-style);\n  font-weight: var(--placeholder-font-weight);\n  opacity: var(--placeholder-opacity);\n}\n\n.native-textarea {\n  color: inherit;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-align: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  grid-area: 1/1/2/2;\n  word-break: break-word;\n}\n\n.cloned-input {\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  pointer-events: none;\n}\n.cloned-input {\n  inset-inline-start: 0;\n}\n\n/**\n * The cloned input needs to be disabled on\n * Android otherwise the viewport will still\n * shift when running scroll assist.\n */\n.cloned-input:disabled {\n  opacity: 1;\n}\n\n:host([auto-grow]) .cloned-input {\n  height: 100%;\n}\n\n:host([auto-grow]) .native-textarea {\n  overflow: hidden;\n}\n\n.textarea-wrapper {\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: 0px;\n  padding-bottom: 0px;\n  border-radius: var(--border-radius);\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: flex-start;\n  height: inherit;\n  min-height: inherit;\n  transition: background-color 15ms linear;\n  background: var(--background);\n  line-height: normal;\n}\n\n.native-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n:host(.has-focus) textarea {\n  caret-color: var(--highlight-color);\n}\n\n.native-wrapper textarea {\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n}\n\n.native-wrapper {\n  display: grid;\n  min-width: inherit;\n  max-width: inherit;\n  min-height: inherit;\n  max-height: inherit;\n  /**\n   * This avoids a WebKit bug where\n   * the height of the inner textarea\n   * is incorrect and flows outside the\n   * parent container: https://bugs.webkit.org/show_bug.cgi?id=256781\n   * TODO FW-4734\n   */\n  grid-auto-rows: 100%;\n}\n.native-wrapper::after {\n  white-space: pre-wrap;\n  content: attr(data-replicated-value) \" \";\n  visibility: hidden;\n}\n\n.native-wrapper::after {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  border-radius: var(--border-radius);\n  /**\n   * Note: Do not use @include text-inherit()\n   * as that sets white-space: inherit\n   * Instead, we use white-space: pre-wrap above.\n   */\n  color: inherit;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-align: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  grid-area: 1/1/2/2;\n  word-break: break-word;\n}\n\n.textarea-wrapper-inner {\n  display: flex;\n  width: 100%;\n  min-height: inherit;\n}\n\n:host(.ion-touched.ion-invalid) {\n  --highlight-color: var(--highlight-color-invalid);\n}\n\n/**\n * The component highlight is only shown\n * on focus, so we can safely set the valid\n * color state when touched/valid. If we\n * set it when .has-focus is present then\n * the highlight color would change\n * from the valid color to the component's\n * color during the transition after the\n * component loses focus.\n */\n:host(.ion-valid) {\n  --highlight-color: var(--highlight-color-valid);\n}\n\n.textarea-bottom {\n  /**\n   * The bottom content should take on the start and end\n   * padding so it is always aligned with either the label\n   * or the start of the textarea.\n   */\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: 5px;\n  padding-bottom: 0;\n  display: flex;\n  justify-content: space-between;\n  border-top: var(--border-width) var(--border-style) var(--border-color);\n  font-size: 0.75rem;\n}\n\n/**\n * If the textarea has a validity state, the\n * border and label should reflect that as a color.\n */\n:host(.has-focus.ion-valid),\n:host(.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n/**\n * Error text should only be shown when .ion-invalid is\n * present on the textarea. Otherwise the helper text should\n * be shown.\n */\n.textarea-bottom .error-text {\n  display: none;\n  color: var(--highlight-color-invalid);\n}\n\n.textarea-bottom .helper-text {\n  display: block;\n  color: var(--ion-color-step-550, var(--ion-text-color-step-450, #737373));\n}\n\n:host(.ion-touched.ion-invalid) .textarea-bottom .error-text {\n  display: block;\n}\n\n:host(.ion-touched.ion-invalid) .textarea-bottom .helper-text {\n  display: none;\n}\n\n.textarea-bottom .counter {\n  /**\n   * Counter should always be at\n   * the end of the container even\n   * when no helper/error texts are used.\n   */\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  color: var(--ion-color-step-550, var(--ion-text-color-step-450, #737373));\n  white-space: nowrap;\n  padding-inline-start: 16px;\n}\n\n.label-text-wrapper {\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   * However, we do not set the max\n   * width to 100% because then\n   * only the label would show and users\n   * would not be able to see what they are typing.\n   */\n  max-width: 200px;\n  transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n  /**\n   * This ensures that double tapping this text\n   * clicks the <label> and focuses the textarea\n   * when a screen reader is enabled.\n   */\n  pointer-events: none;\n}\n\n/**\n * We need to use two elements instead of\n * one. The .label-text-wrapper is responsible\n * for centering the label text vertically regardless\n * of the textarea height using flexbox.\n *\n * The .label-text element is responsible for controlling\n * overflow when label-placement=\"fixed\".\n * We want the ellipses to show up when the\n * fixed label overflows, but text-overflow: ellipsis only\n * works on block-level elements. A flex item is\n * considered blockified (https://www.w3.org/TR/css-display-3/#blockify).\n */\n.label-text,\n::slotted([slot=label]) {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden,\n.textarea-outline-notch-hidden {\n  display: none;\n}\n\n.textarea-wrapper textarea {\n  /**\n   * When the floating label appears on top of the\n   * textarea, we need to fade the textarea out so that the\n   * label does not overlap with the placeholder.\n   */\n  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/**\n * Label is on the left of the textarea in LTR and\n * on the right in RTL.\n */\n:host(.textarea-label-placement-start) .textarea-wrapper {\n  flex-direction: row;\n}\n\n:host(.textarea-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the textarea should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the right of the textarea in LTR and\n * on the left in RTL.\n */\n:host(.textarea-label-placement-end) .textarea-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the textarea should be on the start\n * when the label sits at the end.\n */\n:host(.textarea-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n:host(.textarea-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the textarea should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the left of the textarea in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.textarea-label-placement-fixed) .label-text {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n/**\n * Stacked: Label sits above the textarea and is scaled down.\n * Floating: Label sits over the textarea when the textarea has no\n * value and is blurred. Label sits above the textarea and is scaled\n * down when the textarea is focused or has a value.\n *\n */\n:host(.textarea-label-placement-stacked) .textarea-wrapper,\n:host(.textarea-label-placement-floating) .textarea-wrapper {\n  flex-direction: column;\n  align-items: start;\n}\n\n/**\n * Ensures that the label animates\n * up and to the left in LTR or\n * up and to the right in RTL.\n */\n:host(.textarea-label-placement-stacked) .label-text-wrapper,\n:host(.textarea-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  max-width: 100%;\n  /**\n   * The 2 ensures the label\n   * remains on top of any browser\n   * autofill background too.\n   */\n  z-index: 2;\n}\n:host-context([dir=rtl]):host(.textarea-label-placement-stacked) .label-text-wrapper, :host-context([dir=rtl]).textarea-label-placement-stacked .label-text-wrapper, :host-context([dir=rtl]):host(.textarea-label-placement-floating) .label-text-wrapper, :host-context([dir=rtl]).textarea-label-placement-floating .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.textarea-label-placement-stacked:dir(rtl)) .label-text-wrapper, :host(.textarea-label-placement-floating:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n/**\n * Ensures the textarea does not\n * overlap the label.\n */\n:host(.textarea-label-placement-stacked) textarea,\n:host(.textarea-label-placement-floating) textarea,\n:host(.textarea-label-placement-stacked[auto-grow]) .native-wrapper::after,\n:host(.textarea-label-placement-floating[auto-grow]) .native-wrapper::after {\n  -webkit-margin-start: 0px;\n  margin-inline-start: 0px;\n  -webkit-margin-end: 0px;\n  margin-inline-end: 0px;\n  margin-top: 8px;\n  margin-bottom: 0px;\n}\n\n:host(.textarea-label-placement-stacked) ::slotted([slot=start]),\n:host(.textarea-label-placement-stacked) ::slotted([slot=end]),\n:host(.textarea-label-placement-floating) ::slotted([slot=start]),\n:host(.textarea-label-placement-floating) ::slotted([slot=end]) {\n  margin-top: 8px;\n}\n\n/**\n * This makes the label sit over the textarea\n * when the textarea is blurred and has no value.\n */\n:host(.textarea-label-placement-floating) .label-text-wrapper {\n  transform: translateY(100%) scale(1);\n}\n\n/**\n * The textarea should be hidden when the label\n * is on top of the textarea. This prevents the label\n * from overlapping any placeholder value.\n */\n:host(.textarea-label-placement-floating) textarea {\n  opacity: 0;\n}\n\n:host(.has-focus.textarea-label-placement-floating) textarea,\n:host(.has-value.textarea-label-placement-floating) textarea {\n  opacity: 1;\n}\n\n/**\n * This makes the label sit above the textarea.\n */\n:host(.label-floating) .label-text-wrapper {\n  transform: translateY(50%) scale(0.75);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n.start-slot-wrapper, .end-slot-wrapper {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  display: flex;\n  flex-shrink: 0;\n  align-self: start;\n}\n\n::slotted([slot=start]),\n::slotted([slot=end]) {\n  margin-top: 0;\n}\n\n::slotted([slot=start]:last-of-type) {\n  margin-inline-end: 16px;\n  margin-inline-start: 0;\n}\n\n::slotted([slot=end]:first-of-type) {\n  margin-inline-start: 16px;\n  margin-inline-end: 0;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  --border-width: 0.55px;\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-250, var(--ion-background-color-step-250, #c8c7cc))));\n  --padding-top: 10px;\n  --padding-end: 0px;\n  --padding-bottom: 8px;\n  --padding-start: 0px;\n  --highlight-height: 0px;\n  font-size: inherit;\n}\n\n:host(.textarea-disabled) {\n  opacity: 0.3;\n}\n\n/**\n * Slotted buttons have a lot of default padding that can\n * cause them to look misaligned from other pieces such\n * as the control's label, especially when using a clear\n * fill. We also make them circular to ensure that non-\n * clear buttons and the focus/hover state on clear ones\n * don't look too crowded.\n */\n::slotted(ion-button[slot=start].button-has-icon-only),\n::slotted(ion-button[slot=end].button-has-icon-only) {\n  --border-radius: 50%;\n  --padding-start: 0;\n  --padding-end: 0;\n  --padding-top: 0;\n  --padding-bottom: 0;\n  aspect-ratio: 1;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  /**\n   * @prop --background: Background of the textarea\n   *\n   * @prop --border-radius: Border radius of the textarea\n   * @prop --border-color: Color of the border below the textarea when using helper text, error text, or counter\n   * @prop --border-radius: Radius of the textarea border. A large radius may display unevenly when using fill=\"outline\"; if needed, use shape=\"round\" instead or increase --padding-start.\n   * @prop --border-style: Style of the border below the textarea when using helper text, error text, or counter\n   * @prop --border-width: Width of the border below the textarea when using helper text, error text, or counter\n   *\n   * @prop --color: Color of the text\n   *\n   * @prop --placeholder-color: Color of the placeholder text\n   * @prop --placeholder-font-style: Style of the placeholder text\n   * @prop --placeholder-font-weight: Weight of the placeholder text\n   * @prop --placeholder-opacity: Opacity of the placeholder text\n   *\n   * @prop --highlight-height: The height of the highlight on the textarea. Only applies to md mode.\n   * @prop --highlight-color-focused: The color of the highlight on the textarea when focused\n   * @prop --highlight-color-valid: The color of the highlight on the textarea when valid\n   * @prop --highlight-color-invalid: The color of the highlight on the textarea when invalid\n   *\n   * @prop --padding-top: Top padding of the textarea\n   * @prop --padding-end: Right padding if direction is left-to-right, and left padding if direction is right-to-left of the textarea\n   * @prop --padding-bottom: Bottom padding of the textarea\n   * @prop --padding-start: Left padding if direction is left-to-right, and right padding if direction is right-to-left of the textarea\n   */\n  --background: initial;\n  --color: initial;\n  --placeholder-color: initial;\n  --placeholder-font-style: initial;\n  --placeholder-font-weight: initial;\n  --placeholder-opacity: var(--ion-placeholder-opacity, 0.6);\n  --padding-top: 0;\n  --padding-end: 0;\n  --padding-bottom: 8px;\n  --padding-start: 0;\n  --border-radius: 0;\n  --border-style: solid;\n  --highlight-color-focused: var(--ion-color-primary, #0054e9);\n  --highlight-color-valid: var(--ion-color-success, #2dd55b);\n  --highlight-color-invalid: var(--ion-color-danger, #c5000f);\n  /**\n   * This is a private API that is used to switch\n   * out the highlight color based on the state\n   * of the component without having to write\n   * different selectors for different fill variants.\n   */\n  --highlight-color: var(--highlight-color-focused);\n  display: block;\n  position: relative;\n  width: 100%;\n  min-height: 44px;\n  color: var(--color);\n  font-family: var(--ion-font-family, inherit);\n  z-index: 2;\n  box-sizing: border-box;\n}\n\n/**\n * Since the label sits on top of the element,\n * the component needs to be taller otherwise the\n * label will appear too close to the textarea text.\n * Also, floating and stacked labels should not\n * push the label down since it it\n * sits on top of the textarea.\n */\n:host(.textarea-label-placement-floating),\n:host(.textarea-label-placement-stacked) {\n  --padding-top: 0px;\n  min-height: 56px;\n}\n\n/**\n * When the cols property is set we should\n * respect that width instead of defaulting\n * to taking up the entire line.\n * Requires both the cols and autoGrow\n * properties to be reflected as attributes\n * on the host.\n *\n * cols does not work with autoGrow because\n * autoGrow would prevent line breaks from naturally\n * occurring until the textarea takes up the entire line width.\n */\n:host([cols]:not([auto-grow])) {\n  width: fit-content;\n}\n\n:host(.ion-color) {\n  --highlight-color-focused: var(--ion-color-base);\n  background: initial;\n}\n\n:host-context(ion-item) {\n  align-self: baseline;\n}\n\n:host-context(ion-item)[slot=start],\n:host-context(ion-item)[slot=end] {\n  width: auto;\n}\n\n.native-textarea {\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  display: block;\n  position: relative;\n  flex: 1;\n  width: 100%;\n  max-width: 100%;\n  max-height: 100%;\n  border: 0;\n  outline: none;\n  background: transparent;\n  white-space: pre-wrap;\n  /**\n   * This ensures the textarea\n   * remains on top of any decoration\n   * that we render (particularly the\n   * outline border when fill=\"outline\").\n   * If we did not do this then Axe would\n   * be unable to determine the color\n   * contrast of the textarea.\n   */\n  z-index: 1;\n  box-sizing: border-box;\n  resize: none;\n  appearance: none;\n}\n.native-textarea::placeholder {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  color: var(--placeholder-color);\n  font-family: inherit;\n  font-style: var(--placeholder-font-style);\n  font-weight: var(--placeholder-font-weight);\n  opacity: var(--placeholder-opacity);\n}\n\n.native-textarea {\n  color: inherit;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-align: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  grid-area: 1/1/2/2;\n  word-break: break-word;\n}\n\n.cloned-input {\n  top: 0;\n  bottom: 0;\n  position: absolute;\n  pointer-events: none;\n}\n.cloned-input {\n  inset-inline-start: 0;\n}\n\n/**\n * The cloned input needs to be disabled on\n * Android otherwise the viewport will still\n * shift when running scroll assist.\n */\n.cloned-input:disabled {\n  opacity: 1;\n}\n\n:host([auto-grow]) .cloned-input {\n  height: 100%;\n}\n\n:host([auto-grow]) .native-textarea {\n  overflow: hidden;\n}\n\n.textarea-wrapper {\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: 0px;\n  padding-bottom: 0px;\n  border-radius: var(--border-radius);\n  display: flex;\n  position: relative;\n  flex-grow: 1;\n  align-items: flex-start;\n  height: inherit;\n  min-height: inherit;\n  transition: background-color 15ms linear;\n  background: var(--background);\n  line-height: normal;\n}\n\n.native-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n:host(.has-focus) textarea {\n  caret-color: var(--highlight-color);\n}\n\n.native-wrapper textarea {\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n}\n\n.native-wrapper {\n  display: grid;\n  min-width: inherit;\n  max-width: inherit;\n  min-height: inherit;\n  max-height: inherit;\n  /**\n   * This avoids a WebKit bug where\n   * the height of the inner textarea\n   * is incorrect and flows outside the\n   * parent container: https://bugs.webkit.org/show_bug.cgi?id=256781\n   * TODO FW-4734\n   */\n  grid-auto-rows: 100%;\n}\n.native-wrapper::after {\n  white-space: pre-wrap;\n  content: attr(data-replicated-value) \" \";\n  visibility: hidden;\n}\n\n.native-wrapper::after {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  border-radius: var(--border-radius);\n  /**\n   * Note: Do not use @include text-inherit()\n   * as that sets white-space: inherit\n   * Instead, we use white-space: pre-wrap above.\n   */\n  color: inherit;\n  font-family: inherit;\n  font-size: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n  letter-spacing: inherit;\n  text-align: inherit;\n  text-decoration: inherit;\n  text-indent: inherit;\n  text-overflow: inherit;\n  text-transform: inherit;\n  grid-area: 1/1/2/2;\n  word-break: break-word;\n}\n\n.textarea-wrapper-inner {\n  display: flex;\n  width: 100%;\n  min-height: inherit;\n}\n\n:host(.ion-touched.ion-invalid) {\n  --highlight-color: var(--highlight-color-invalid);\n}\n\n/**\n * The component highlight is only shown\n * on focus, so we can safely set the valid\n * color state when touched/valid. If we\n * set it when .has-focus is present then\n * the highlight color would change\n * from the valid color to the component's\n * color during the transition after the\n * component loses focus.\n */\n:host(.ion-valid) {\n  --highlight-color: var(--highlight-color-valid);\n}\n\n.textarea-bottom {\n  /**\n   * The bottom content should take on the start and end\n   * padding so it is always aligned with either the label\n   * or the start of the textarea.\n   */\n  -webkit-padding-start: var(--padding-start);\n  padding-inline-start: var(--padding-start);\n  -webkit-padding-end: var(--padding-end);\n  padding-inline-end: var(--padding-end);\n  padding-top: 5px;\n  padding-bottom: 0;\n  display: flex;\n  justify-content: space-between;\n  border-top: var(--border-width) var(--border-style) var(--border-color);\n  font-size: 0.75rem;\n}\n\n/**\n * If the textarea has a validity state, the\n * border and label should reflect that as a color.\n */\n:host(.has-focus.ion-valid),\n:host(.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n/**\n * Error text should only be shown when .ion-invalid is\n * present on the textarea. Otherwise the helper text should\n * be shown.\n */\n.textarea-bottom .error-text {\n  display: none;\n  color: var(--highlight-color-invalid);\n}\n\n.textarea-bottom .helper-text {\n  display: block;\n  color: var(--ion-color-step-550, var(--ion-text-color-step-450, #737373));\n}\n\n:host(.ion-touched.ion-invalid) .textarea-bottom .error-text {\n  display: block;\n}\n\n:host(.ion-touched.ion-invalid) .textarea-bottom .helper-text {\n  display: none;\n}\n\n.textarea-bottom .counter {\n  /**\n   * Counter should always be at\n   * the end of the container even\n   * when no helper/error texts are used.\n   */\n  -webkit-margin-start: auto;\n  margin-inline-start: auto;\n  color: var(--ion-color-step-550, var(--ion-text-color-step-450, #737373));\n  white-space: nowrap;\n  padding-inline-start: 16px;\n}\n\n.label-text-wrapper {\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   * However, we do not set the max\n   * width to 100% because then\n   * only the label would show and users\n   * would not be able to see what they are typing.\n   */\n  max-width: 200px;\n  transition: color 150ms cubic-bezier(0.4, 0, 0.2, 1), transform 150ms cubic-bezier(0.4, 0, 0.2, 1);\n  /**\n   * This ensures that double tapping this text\n   * clicks the <label> and focuses the textarea\n   * when a screen reader is enabled.\n   */\n  pointer-events: none;\n}\n\n/**\n * We need to use two elements instead of\n * one. The .label-text-wrapper is responsible\n * for centering the label text vertically regardless\n * of the textarea height using flexbox.\n *\n * The .label-text element is responsible for controlling\n * overflow when label-placement=\"fixed\".\n * We want the ellipses to show up when the\n * fixed label overflows, but text-overflow: ellipsis only\n * works on block-level elements. A flex item is\n * considered blockified (https://www.w3.org/TR/css-display-3/#blockify).\n */\n.label-text,\n::slotted([slot=label]) {\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n/**\n * If no label text is placed into the slot\n * then the element should be hidden otherwise\n * there will be additional margins added.\n */\n.label-text-wrapper-hidden,\n.textarea-outline-notch-hidden {\n  display: none;\n}\n\n.textarea-wrapper textarea {\n  /**\n   * When the floating label appears on top of the\n   * textarea, we need to fade the textarea out so that the\n   * label does not overlap with the placeholder.\n   */\n  transition: opacity 150ms cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n/**\n * Label is on the left of the textarea in LTR and\n * on the right in RTL.\n */\n:host(.textarea-label-placement-start) .textarea-wrapper {\n  flex-direction: row;\n}\n\n:host(.textarea-label-placement-start) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the textarea should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the right of the textarea in LTR and\n * on the left in RTL.\n */\n:host(.textarea-label-placement-end) .textarea-wrapper {\n  flex-direction: row-reverse;\n}\n\n/**\n * The margin between the label and\n * the textarea should be on the start\n * when the label sits at the end.\n */\n:host(.textarea-label-placement-end) .label-text-wrapper {\n  -webkit-margin-start: 16px;\n  margin-inline-start: 16px;\n  -webkit-margin-end: 0;\n  margin-inline-end: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n:host(.textarea-label-placement-fixed) .label-text-wrapper {\n  /**\n   * The margin between the label and\n   * the textarea should be on the end\n   * when the label sits at the start.\n   */\n  -webkit-margin-start: 0;\n  margin-inline-start: 0;\n  -webkit-margin-end: 16px;\n  margin-inline-end: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n\n/**\n * Label is on the left of the textarea in LTR and\n * on the right in RTL. Label also has a fixed width.\n */\n:host(.textarea-label-placement-fixed) .label-text {\n  flex: 0 0 100px;\n  width: 100px;\n  min-width: 100px;\n  max-width: 200px;\n}\n\n/**\n * Stacked: Label sits above the textarea and is scaled down.\n * Floating: Label sits over the textarea when the textarea has no\n * value and is blurred. Label sits above the textarea and is scaled\n * down when the textarea is focused or has a value.\n *\n */\n:host(.textarea-label-placement-stacked) .textarea-wrapper,\n:host(.textarea-label-placement-floating) .textarea-wrapper {\n  flex-direction: column;\n  align-items: start;\n}\n\n/**\n * Ensures that the label animates\n * up and to the left in LTR or\n * up and to the right in RTL.\n */\n:host(.textarea-label-placement-stacked) .label-text-wrapper,\n:host(.textarea-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n  -webkit-padding-start: 0px;\n  padding-inline-start: 0px;\n  -webkit-padding-end: 0px;\n  padding-inline-end: 0px;\n  padding-top: 0px;\n  padding-bottom: 0px;\n  max-width: 100%;\n  /**\n   * The 2 ensures the label\n   * remains on top of any browser\n   * autofill background too.\n   */\n  z-index: 2;\n}\n:host-context([dir=rtl]):host(.textarea-label-placement-stacked) .label-text-wrapper, :host-context([dir=rtl]).textarea-label-placement-stacked .label-text-wrapper, :host-context([dir=rtl]):host(.textarea-label-placement-floating) .label-text-wrapper, :host-context([dir=rtl]).textarea-label-placement-floating .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.textarea-label-placement-stacked:dir(rtl)) .label-text-wrapper, :host(.textarea-label-placement-floating:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n/**\n * Ensures the textarea does not\n * overlap the label.\n */\n:host(.textarea-label-placement-stacked) textarea,\n:host(.textarea-label-placement-floating) textarea,\n:host(.textarea-label-placement-stacked[auto-grow]) .native-wrapper::after,\n:host(.textarea-label-placement-floating[auto-grow]) .native-wrapper::after {\n  -webkit-margin-start: 0px;\n  margin-inline-start: 0px;\n  -webkit-margin-end: 0px;\n  margin-inline-end: 0px;\n  margin-top: 8px;\n  margin-bottom: 0px;\n}\n\n:host(.textarea-label-placement-stacked) ::slotted([slot=start]),\n:host(.textarea-label-placement-stacked) ::slotted([slot=end]),\n:host(.textarea-label-placement-floating) ::slotted([slot=start]),\n:host(.textarea-label-placement-floating) ::slotted([slot=end]) {\n  margin-top: 8px;\n}\n\n/**\n * This makes the label sit over the textarea\n * when the textarea is blurred and has no value.\n */\n:host(.textarea-label-placement-floating) .label-text-wrapper {\n  transform: translateY(100%) scale(1);\n}\n\n/**\n * The textarea should be hidden when the label\n * is on top of the textarea. This prevents the label\n * from overlapping any placeholder value.\n */\n:host(.textarea-label-placement-floating) textarea {\n  opacity: 0;\n}\n\n:host(.has-focus.textarea-label-placement-floating) textarea,\n:host(.has-value.textarea-label-placement-floating) textarea {\n  opacity: 1;\n}\n\n/**\n * This makes the label sit above the textarea.\n */\n:host(.label-floating) .label-text-wrapper {\n  transform: translateY(50%) scale(0.75);\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n.start-slot-wrapper, .end-slot-wrapper {\n  padding-left: 0;\n  padding-right: 0;\n  padding-top: var(--padding-top);\n  padding-bottom: var(--padding-bottom);\n  display: flex;\n  flex-shrink: 0;\n  align-self: start;\n}\n\n::slotted([slot=start]),\n::slotted([slot=end]) {\n  margin-top: 0;\n}\n\n::slotted([slot=start]:last-of-type) {\n  margin-inline-end: 16px;\n  margin-inline-start: 0;\n}\n\n::slotted([slot=end]:first-of-type) {\n  margin-inline-start: 16px;\n  margin-inline-end: 0;\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host(.textarea-fill-solid) {\n  --background: var(--ion-color-step-50, var(--ion-background-color-step-50, #f2f2f2));\n  --border-color: var(--ion-color-step-500, var(--ion-background-color-step-500, gray));\n  --border-radius: 4px;\n  --padding-start: 16px;\n  --padding-end: 16px;\n  min-height: 56px;\n}\n\n/**\n * The solid fill style has a border\n * at the bottom of the textarea wrapper.\n * As a result, the border on the \"bottom\n * content\" is not needed.\n */\n:host(.textarea-fill-solid) .textarea-wrapper {\n  border-bottom: var(--border-width) var(--border-style) var(--border-color);\n}\n\n/**\n * If the textarea has a validity state, the\n * border should reflect that as a color.\n */\n:host(.has-focus.textarea-fill-solid.ion-valid),\n:host(.textarea-fill-solid.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n:host(.textarea-fill-solid) .textarea-bottom {\n  border-top: none;\n}\n\n/**\n * Background and border should be\n * slightly darker on hover.\n */\n@media (any-hover: hover) {\n  :host(.textarea-fill-solid:hover) {\n    --background: var(--ion-color-step-100, var(--ion-background-color-step-100, #e6e6e6));\n    --border-color: var(--ion-color-step-750, var(--ion-background-color-step-750, #404040));\n  }\n}\n/**\n * Background and border should be\n * much darker on focus.\n */\n:host(.textarea-fill-solid.has-focus) {\n  --background: var(--ion-color-step-150, var(--ion-background-color-step-150, #d9d9d9));\n  --border-color: var(--ion-color-step-750, var(--ion-background-color-step-750, #404040));\n}\n\n:host(.textarea-fill-solid) .textarea-wrapper {\n  /**\n   * Only the top left and top right borders should.\n   * have a radius when using a solid fill.\n   */\n  border-start-start-radius: var(--border-radius);\n  border-start-end-radius: var(--border-radius);\n  border-end-end-radius: 0px;\n  border-end-start-radius: 0px;\n}\n\n:host(.label-floating.textarea-fill-solid) .label-text-wrapper {\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   */\n  max-width: calc(100% / 0.75);\n}\n\n/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host(.textarea-fill-outline) {\n  --border-color: var(--ion-color-step-300, var(--ion-background-color-step-300, #b3b3b3));\n  --border-radius: 4px;\n  --padding-start: 16px;\n  --padding-end: 16px;\n  min-height: 56px;\n}\n\n:host(.textarea-fill-outline.textarea-shape-round) {\n  --border-radius: 28px;\n  --padding-start: 32px;\n  --padding-end: 32px;\n}\n\n/**\n * If the textarea has a validity state, the\n * border should reflect that as a color.\n */\n:host(.has-focus.textarea-fill-outline.ion-valid),\n:host(.textarea-fill-outline.ion-touched.ion-invalid) {\n  --border-color: var(--highlight-color);\n}\n\n/**\n * Border should be\n * slightly darker on hover.\n */\n@media (any-hover: hover) {\n  :host(.textarea-fill-outline:hover) {\n    --border-color: var(--ion-color-step-750, var(--ion-background-color-step-750, #404040));\n  }\n}\n/**\n * The border should get thicker\n * and take on component color when\n * the textarea is focused.\n */\n:host(.textarea-fill-outline.has-focus) {\n  --border-width: var(--highlight-height);\n  --border-color: var(--highlight-color);\n}\n\n/**\n * The bottom content should never have\n * a border with the outline style.\n */\n:host(.textarea-fill-outline) .textarea-bottom {\n  border-top: none;\n}\n\n/**\n * Outline textarea do not have a bottom border.\n * Instead, they have a border that wraps the\n * textarea + label.\n */\n:host(.textarea-fill-outline) .textarea-wrapper {\n  border-bottom: none;\n}\n\n:host(.textarea-fill-outline.textarea-label-placement-stacked) .label-text-wrapper,\n:host(.textarea-fill-outline.textarea-label-placement-floating) .label-text-wrapper {\n  transform-origin: left top;\n  position: absolute;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   */\n  max-width: calc(100% - var(--padding-start) - var(--padding-end));\n}\n:host-context([dir=rtl]):host(.textarea-fill-outline.textarea-label-placement-stacked) .label-text-wrapper, :host-context([dir=rtl]).textarea-fill-outline.textarea-label-placement-stacked .label-text-wrapper, :host-context([dir=rtl]):host(.textarea-fill-outline.textarea-label-placement-floating) .label-text-wrapper, :host-context([dir=rtl]).textarea-fill-outline.textarea-label-placement-floating .label-text-wrapper {\n  transform-origin: right top;\n}\n\n@supports selector(:dir(rtl)) {\n  :host(.textarea-fill-outline.textarea-label-placement-stacked:dir(rtl)) .label-text-wrapper, :host(.textarea-fill-outline.textarea-label-placement-floating:dir(rtl)) .label-text-wrapper {\n    transform-origin: right top;\n  }\n}\n\n/**\n * The label should appear on top of an outline\n * container that overlaps it so it is always clickable.\n */\n:host(.textarea-fill-outline) .label-text-wrapper,\n:host(.textarea-fill-outline) .label-text-wrapper {\n  position: relative;\n}\n\n/**\n * This makes the label sit above the textarea.\n */\n:host(.label-floating.textarea-fill-outline) .label-text-wrapper {\n  transform: translateY(-32%) scale(0.75);\n  margin-left: 0;\n  margin-right: 0;\n  margin-top: 0;\n  margin-bottom: 0;\n  /**\n   * Label text should not extend\n   * beyond the bounds of the textarea.\n   */\n  max-width: calc(\n    (100% - var(--padding-start) - var(--padding-end) - 8px) / 0.75\n  );\n}\n\n/**\n * This ensures that the textarea does not\n * overlap the floating label while still\n * remaining visually centered.\n */\n:host(.textarea-fill-outline.textarea-label-placement-stacked) textarea,\n:host(.textarea-fill-outline.textarea-label-placement-floating) textarea,\n:host(.textarea-fill-outline.textarea-label-placement-stacked[auto-grow]) .native-wrapper::after,\n:host(.textarea-fill-outline.textarea-label-placement-floating[auto-grow]) .native-wrapper::after {\n  -webkit-margin-start: 0px;\n  margin-inline-start: 0px;\n  -webkit-margin-end: 0px;\n  margin-inline-end: 0px;\n  margin-top: 12px;\n  margin-bottom: 0px;\n}\n\n:host(.textarea-fill-outline.textarea-label-placement-stacked) ::slotted([slot=start]),\n:host(.textarea-fill-outline.textarea-label-placement-stacked) ::slotted([slot=end]),\n:host(.textarea-fill-outline.textarea-label-placement-floating) ::slotted([slot=start]),\n:host(.textarea-fill-outline.textarea-label-placement-floating) ::slotted([slot=end]) {\n  margin-top: 12px;\n}\n\n:host(.textarea-fill-outline) .textarea-outline-container {\n  left: 0;\n  right: 0;\n  top: 0;\n  bottom: 0;\n  display: flex;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n\n:host(.textarea-fill-outline) .textarea-outline-start,\n:host(.textarea-fill-outline) .textarea-outline-end {\n  pointer-events: none;\n}\n\n/**\n * By default, each piece of the container should have\n * a top and bottom border. This gives the appearance\n * of a unified container with a border.\n */\n:host(.textarea-fill-outline) .textarea-outline-start,\n:host(.textarea-fill-outline) .textarea-outline-notch,\n:host(.textarea-fill-outline) .textarea-outline-end {\n  border-top: var(--border-width) var(--border-style) var(--border-color);\n  border-bottom: var(--border-width) var(--border-style) var(--border-color);\n}\n\n/**\n * Ensures long labels do not cause the notch to flow\n * out of bounds.\n */\n:host(.textarea-fill-outline) .textarea-outline-notch {\n  max-width: calc(100% - var(--padding-start) - var(--padding-end));\n}\n\n/**\n * This element ensures that the notch used\n * the size of the scaled text so that the\n * border cut out is the correct width.\n * The text in this element should not\n * be interactive.\n */\n:host(.textarea-fill-outline) .notch-spacer {\n  /**\n   * We need $textarea-md-floating-label-padding of padding on the right.\n   * However, we also subtracted $textarea-md-floating-label-padding from\n   * the width of .textarea-outline-start\n   * to create space, so we need to take\n   * that into consideration here.\n   */\n  -webkit-padding-end: 8px;\n  padding-inline-end: 8px;\n  font-size: calc(1em * 0.75);\n  opacity: 0;\n  pointer-events: none;\n  /**\n   * The spacer currently inherits\n   * border-box sizing from the Ionic reset styles.\n   * However, we do not want to include padding in\n   * the calculation of the element dimensions.\n   * This code can be removed if textarea is updated\n   * to use the Shadow DOM.\n   */\n  box-sizing: content-box;\n}\n\n:host(.textarea-fill-outline) .textarea-outline-start {\n  border-start-start-radius: var(--border-radius);\n  border-start-end-radius: 0px;\n  border-end-end-radius: 0px;\n  border-end-start-radius: var(--border-radius);\n  -webkit-border-start: var(--border-width) var(--border-style) var(--border-color);\n  border-inline-start: var(--border-width) var(--border-style) var(--border-color);\n  /**\n   * There should be spacing between the translated text\n   * and .textarea-outline-start. However, we can't add this\n   * spacing onto the notch because it would cause the\n   * label to look like it is not aligned with the\n   * text textarea. Instead, we subtract a few pixels from\n   * this element.\n   */\n  width: calc(var(--padding-start) - 4px);\n}\n\n:host(.textarea-fill-outline) .textarea-outline-end {\n  -webkit-border-end: var(--border-width) var(--border-style) var(--border-color);\n  border-inline-end: var(--border-width) var(--border-style) var(--border-color);\n  border-start-start-radius: 0px;\n  border-start-end-radius: var(--border-radius);\n  border-end-end-radius: var(--border-radius);\n  border-end-start-radius: 0px;\n  /**\n   * The ending outline fragment\n   * should take up the remaining free space.\n   */\n  flex-grow: 1;\n}\n\n/**\n * When the textarea either has focus or a value,\n * there should be a \"cut out\" at the top for\n * the floating/stacked label. We simulate this \"cut out\"\n * by removing the top border from the notch fragment.\n */\n:host(.label-floating.textarea-fill-outline) .textarea-outline-notch {\n  border-top: none;\n}\n\n:host {\n  --border-width: 1px;\n  --border-color: var(--ion-item-border-color, var(--ion-border-color, var(--ion-color-step-150, var(--ion-background-color-step-150, rgba(0, 0, 0, 0.13)))));\n  --padding-top: 18px;\n  --padding-end: 0px;\n  --padding-bottom: 8px;\n  --padding-start: 0px;\n  --highlight-height: 2px;\n  font-size: inherit;\n}\n\n.textarea-bottom .counter {\n  letter-spacing: 0.0333333333em;\n}\n\n/**\n * When the textarea is focused the label should\n * take on the highlight color. This should\n * only apply to floating or stacked labels.\n */\n:host(.textarea-label-placement-floating.has-focus) .label-text-wrapper,\n:host(.textarea-label-placement-stacked.has-focus) .label-text-wrapper {\n  color: var(--highlight-color);\n}\n\n:host(.has-focus.textarea-label-placement-floating.ion-valid) .label-text-wrapper,\n:host(.textarea-label-placement-floating.ion-touched.ion-invalid) .label-text-wrapper,\n:host(.has-focus.textarea-label-placement-stacked.ion-valid) .label-text-wrapper,\n:host(.textarea-label-placement-stacked.ion-touched.ion-invalid) .label-text-wrapper {\n  color: var(--highlight-color);\n}\n\n:host(.textarea-disabled) {\n  opacity: 0.38;\n}\n\n.textarea-highlight {\n  bottom: -1px;\n  position: absolute;\n  width: 100%;\n  height: var(--highlight-height);\n  transform: scale(0);\n  transition: transform 200ms;\n  background: var(--highlight-color);\n}\n.textarea-highlight {\n  inset-inline-start: 0;\n}\n\n:host(.has-focus) .textarea-highlight {\n  transform: scale(1);\n}\n\n/**\n * Adjust the highlight up by 1px\n * so it is not cut off by the\n * the item's line (if one is present).\n */\n:host(.in-item) .textarea-highlight {\n  bottom: 0;\n}\n:host(.in-item) .textarea-highlight {\n  inset-inline-start: 0;\n}\n\n:host(.textarea-shape-round) {\n  --border-radius: 16px;\n}\n\n/**\n * Slotted buttons have a lot of default padding that can\n * cause them to look misaligned from other pieces such\n * as the control's label, especially when using a clear\n * fill. We also make them circular to ensure that non-\n * clear buttons and the focus/hover state on clear ones\n * don't look too crowded.\n */\n::slotted(ion-button[slot=start].button-has-icon-only),\n::slotted(ion-button[slot=end].button-has-icon-only) {\n  --border-radius: 50%;\n  --padding-start: 8px;\n  --padding-end: 8px;\n  --padding-top: 8px;\n  --padding-bottom: 8px;\n  aspect-ratio: 1;\n  min-height: 40px;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Build, Host, forceUpdate, h, writeTask, } from \"@stencil/core\";\nimport { createNotchController } from \"../../utils/forms/index\";\nimport { inheritAriaAttributes, debounceEvent, inheritAttributes, componentOnReady } from \"../../utils/helpers\";\nimport { createSlotMutationController } from \"../../utils/slot-mutation-controller\";\nimport { createColorClasses, hostContext } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\nimport { getCounterText } from \"../input/input.utils\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n * @slot label - The label text to associate with the textarea. Use the `labelPlacement` property to control where the label is placed relative to the textarea. Use this if you need to render a label with custom HTML. (EXPERIMENTAL)\n * @slot start - Content to display at the leading edge of the textarea. (EXPERIMENTAL)\n * @slot end - Content to display at the trailing edge of the textarea. (EXPERIMENTAL)\n */\nexport class Textarea {\n    constructor() {\n        this.inputId = `ion-textarea-${textareaIds++}`;\n        /**\n         * `true` if the textarea was cleared as a result of the user typing\n         * with `clearOnEdit` enabled.\n         *\n         * Resets when the textarea loses focus.\n         */\n        this.didTextareaClearOnEdit = false;\n        this.inheritedAttributes = {};\n        // `Event` type is used instead of `InputEvent`\n        // since the types from Stencil are not derived\n        // from the element (e.g. textarea and input\n        // should be InputEvent, but all other elements\n        // should be Event).\n        this.onInput = (ev) => {\n            const input = ev.target;\n            if (input) {\n                this.value = input.value || '';\n            }\n            this.emitInputChange(ev);\n        };\n        this.onChange = (ev) => {\n            this.emitValueChange(ev);\n        };\n        this.onFocus = (ev) => {\n            this.hasFocus = true;\n            this.focusedValue = this.value;\n            this.ionFocus.emit(ev);\n        };\n        this.onBlur = (ev) => {\n            this.hasFocus = false;\n            if (this.focusedValue !== this.value) {\n                /**\n                 * Emits the `ionChange` event when the textarea value\n                 * is different than the value when the textarea was focused.\n                 */\n                this.emitValueChange(ev);\n            }\n            this.didTextareaClearOnEdit = false;\n            this.ionBlur.emit(ev);\n        };\n        this.onKeyDown = (ev) => {\n            this.checkClearOnEdit(ev);\n        };\n        this.hasFocus = false;\n        this.color = undefined;\n        this.autocapitalize = 'none';\n        this.autofocus = false;\n        this.clearOnEdit = false;\n        this.debounce = undefined;\n        this.disabled = false;\n        this.fill = undefined;\n        this.inputmode = undefined;\n        this.enterkeyhint = undefined;\n        this.maxlength = undefined;\n        this.minlength = undefined;\n        this.name = this.inputId;\n        this.placeholder = undefined;\n        this.readonly = false;\n        this.required = false;\n        this.spellcheck = false;\n        this.cols = undefined;\n        this.rows = undefined;\n        this.wrap = undefined;\n        this.autoGrow = false;\n        this.value = '';\n        this.counter = false;\n        this.counterFormatter = undefined;\n        this.errorText = undefined;\n        this.helperText = undefined;\n        this.label = undefined;\n        this.labelPlacement = 'start';\n        this.shape = undefined;\n    }\n    debounceChanged() {\n        const { ionInput, debounce, originalIonInput } = this;\n        /**\n         * If debounce is undefined, we have to manually revert the ionInput emitter in case\n         * debounce used to be set to a number. Otherwise, the event would stay debounced.\n         */\n        this.ionInput = debounce === undefined ? originalIonInput !== null && originalIonInput !== void 0 ? originalIonInput : ionInput : debounceEvent(ionInput, debounce);\n    }\n    /**\n     * Update the native input element when the value changes\n     */\n    valueChanged() {\n        const nativeInput = this.nativeInput;\n        const value = this.getValue();\n        if (nativeInput && nativeInput.value !== value) {\n            nativeInput.value = value;\n        }\n        this.runAutoGrow();\n    }\n    connectedCallback() {\n        const { el } = this;\n        this.slotMutationController = createSlotMutationController(el, ['label', 'start', 'end'], () => forceUpdate(this));\n        this.notchController = createNotchController(el, () => this.notchSpacerEl, () => this.labelSlot);\n        this.debounceChanged();\n        if (Build.isBrowser) {\n            document.dispatchEvent(new CustomEvent('ionInputDidLoad', {\n                detail: el,\n            }));\n        }\n    }\n    disconnectedCallback() {\n        if (Build.isBrowser) {\n            document.dispatchEvent(new CustomEvent('ionInputDidUnload', {\n                detail: this.el,\n            }));\n        }\n        if (this.slotMutationController) {\n            this.slotMutationController.destroy();\n            this.slotMutationController = undefined;\n        }\n        if (this.notchController) {\n            this.notchController.destroy();\n            this.notchController = undefined;\n        }\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = Object.assign(Object.assign({}, inheritAriaAttributes(this.el)), inheritAttributes(this.el, ['data-form-type', 'title', 'tabindex']));\n    }\n    componentDidLoad() {\n        this.originalIonInput = this.ionInput;\n        this.runAutoGrow();\n    }\n    componentDidRender() {\n        var _a;\n        (_a = this.notchController) === null || _a === void 0 ? void 0 : _a.calculateNotchWidth();\n    }\n    /**\n     * Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global\n     * `textarea.focus()`.\n     *\n     * See [managing focus](/docs/developing/managing-focus) for more information.\n     */\n    async setFocus() {\n        if (this.nativeInput) {\n            this.nativeInput.focus();\n        }\n    }\n    /**\n     * Returns the native `<textarea>` element used under the hood.\n     */\n    async getInputElement() {\n        /**\n         * If this gets called in certain early lifecycle hooks (ex: Vue onMounted),\n         * nativeInput won't be defined yet with the custom elements build, so wait for it to load in.\n         */\n        if (!this.nativeInput) {\n            await new Promise((resolve) => componentOnReady(this.el, resolve));\n        }\n        return Promise.resolve(this.nativeInput);\n    }\n    /**\n     * Emits an `ionChange` event.\n     *\n     * This API should be called for user committed changes.\n     * This API should not be used for external value changes.\n     */\n    emitValueChange(event) {\n        const { value } = this;\n        // Checks for both null and undefined values\n        const newValue = value == null ? value : value.toString();\n        // Emitting a value change should update the internal state for tracking the focused value\n        this.focusedValue = newValue;\n        this.ionChange.emit({ value: newValue, event });\n    }\n    /**\n     * Emits an `ionInput` event.\n     */\n    emitInputChange(event) {\n        const { value } = this;\n        this.ionInput.emit({ value, event });\n    }\n    runAutoGrow() {\n        if (this.nativeInput && this.autoGrow) {\n            writeTask(() => {\n                var _a;\n                if (this.textareaWrapper) {\n                    // Replicated value is an attribute to be used in the stylesheet\n                    // to set the inner contents of a pseudo element.\n                    this.textareaWrapper.dataset.replicatedValue = (_a = this.value) !== null && _a !== void 0 ? _a : '';\n                }\n            });\n        }\n    }\n    /**\n     * Check if we need to clear the text input if clearOnEdit is enabled\n     */\n    checkClearOnEdit(ev) {\n        if (!this.clearOnEdit) {\n            return;\n        }\n        /**\n         * The following keys do not modify the\n         * contents of the input. As a result, pressing\n         * them should not edit the textarea.\n         *\n         * We can't check to see if the value of the textarea\n         * was changed because we call checkClearOnEdit\n         * in a keydown listener, and the key has not yet\n         * been added to the textarea.\n         *\n         * Unlike ion-input, the \"Enter\" key does modify the\n         * textarea by adding a new line, so \"Enter\" is not\n         * included in the IGNORED_KEYS array.\n         */\n        const IGNORED_KEYS = ['Tab', 'Shift', 'Meta', 'Alt', 'Control'];\n        const pressedIgnoredKey = IGNORED_KEYS.includes(ev.key);\n        /**\n         * Clear the textarea if the control has not been previously cleared\n         * during focus.\n         */\n        if (!this.didTextareaClearOnEdit && this.hasValue() && !pressedIgnoredKey) {\n            this.value = '';\n            this.emitInputChange(ev);\n        }\n        /**\n         * Pressing an IGNORED_KEYS first and\n         * then an allowed key will cause the input to not\n         * be cleared.\n         */\n        if (!pressedIgnoredKey) {\n            this.didTextareaClearOnEdit = true;\n        }\n    }\n    hasValue() {\n        return this.getValue() !== '';\n    }\n    getValue() {\n        return this.value || '';\n    }\n    renderLabel() {\n        const { label } = this;\n        return (h(\"div\", { class: {\n                'label-text-wrapper': true,\n                'label-text-wrapper-hidden': !this.hasLabel,\n            } }, label === undefined ? h(\"slot\", { name: \"label\" }) : h(\"div\", { class: \"label-text\" }, label)));\n    }\n    /**\n     * Gets any content passed into the `label` slot,\n     * not the <slot> definition.\n     */\n    get labelSlot() {\n        return this.el.querySelector('[slot=\"label\"]');\n    }\n    /**\n     * Returns `true` if label content is provided\n     * either by a prop or a content. If you want\n     * to get the plaintext value of the label use\n     * the `labelText` getter instead.\n     */\n    get hasLabel() {\n        return this.label !== undefined || this.labelSlot !== null;\n    }\n    /**\n     * Renders the border container when fill=\"outline\".\n     */\n    renderLabelContainer() {\n        const mode = getIonMode(this);\n        const hasOutlineFill = mode === 'md' && this.fill === 'outline';\n        if (hasOutlineFill) {\n            /**\n             * The outline fill has a special outline\n             * that appears around the textarea and the label.\n             * Certain stacked and floating label placements cause the\n             * label to translate up and create a \"cut out\"\n             * inside of that border by using the notch-spacer element.\n             */\n            return [\n                h(\"div\", { class: \"textarea-outline-container\" }, h(\"div\", { class: \"textarea-outline-start\" }), h(\"div\", { class: {\n                        'textarea-outline-notch': true,\n                        'textarea-outline-notch-hidden': !this.hasLabel,\n                    } }, h(\"div\", { class: \"notch-spacer\", \"aria-hidden\": \"true\", ref: (el) => (this.notchSpacerEl = el) }, this.label)), h(\"div\", { class: \"textarea-outline-end\" })),\n                this.renderLabel(),\n            ];\n        }\n        /**\n         * If not using the outline style,\n         * we can render just the label.\n         */\n        return this.renderLabel();\n    }\n    /**\n     * Renders the helper text or error text values\n     */\n    renderHintText() {\n        const { helperText, errorText } = this;\n        return [h(\"div\", { class: \"helper-text\" }, helperText), h(\"div\", { class: \"error-text\" }, errorText)];\n    }\n    renderCounter() {\n        const { counter, maxlength, counterFormatter, value } = this;\n        if (counter !== true || maxlength === undefined) {\n            return;\n        }\n        return h(\"div\", { class: \"counter\" }, getCounterText(value, maxlength, counterFormatter));\n    }\n    /**\n     * Responsible for rendering helper text,\n     * error text, and counter. This element should only\n     * be rendered if hint text is set or counter is enabled.\n     */\n    renderBottomContent() {\n        const { counter, helperText, errorText, maxlength } = this;\n        /**\n         * undefined and empty string values should\n         * be treated as not having helper/error text.\n         */\n        const hasHintText = !!helperText || !!errorText;\n        const hasCounter = counter === true && maxlength !== undefined;\n        if (!hasHintText && !hasCounter) {\n            return;\n        }\n        return (h(\"div\", { class: \"textarea-bottom\" }, this.renderHintText(), this.renderCounter()));\n    }\n    render() {\n        const { inputId, disabled, fill, shape, labelPlacement, el, hasFocus } = this;\n        const mode = getIonMode(this);\n        const value = this.getValue();\n        const inItem = hostContext('ion-item', this.el);\n        const shouldRenderHighlight = mode === 'md' && fill !== 'outline' && !inItem;\n        const hasValue = this.hasValue();\n        const hasStartEndSlots = el.querySelector('[slot=\"start\"], [slot=\"end\"]') !== null;\n        /**\n         * If the label is stacked, it should always sit above the textarea.\n         * For floating labels, the label should move above the textarea if\n         * the textarea has a value, is focused, or has anything in either\n         * the start or end slot.\n         *\n         * If there is content in the start slot, the label would overlap\n         * it if not forced to float. This is also applied to the end slot\n         * because with the default or solid fills, the textarea is not\n         * vertically centered in the container, but the label is. This\n         * causes the slots and label to appear vertically offset from each\n         * other when the label isn't floating above the input. This doesn't\n         * apply to the outline fill, but this was not accounted for to keep\n         * things consistent.\n         *\n         * TODO(FW-5592): Remove hasStartEndSlots condition\n         */\n        const labelShouldFloat = labelPlacement === 'stacked' || (labelPlacement === 'floating' && (hasValue || hasFocus || hasStartEndSlots));\n        return (h(Host, { key: 'b4cf1f37cacdd1775fefb874b87b30ba753fdc3a', class: createColorClasses(this.color, {\n                [mode]: true,\n                'has-value': hasValue,\n                'has-focus': hasFocus,\n                'label-floating': labelShouldFloat,\n                [`textarea-fill-${fill}`]: fill !== undefined,\n                [`textarea-shape-${shape}`]: shape !== undefined,\n                [`textarea-label-placement-${labelPlacement}`]: true,\n                'textarea-disabled': disabled,\n            }) }, h(\"label\", { key: '71673192cf9d61dd072d9c0c3caefad313ed7129', class: \"textarea-wrapper\", htmlFor: inputId }, this.renderLabelContainer(), h(\"div\", { key: '6ecfbc046cf6e14f0d58dca1bff7db2093620f01', class: \"textarea-wrapper-inner\" }, h(\"div\", { key: '7d2410de5dd971f74406ab8a321d87709873fa22', class: \"start-slot-wrapper\" }, h(\"slot\", { key: '061cc0dd516b2f3a4ad7199790028e5d525a3ab2', name: \"start\" })), h(\"div\", { key: 'f75309006f7c4e835f346cecf243f104e37bd477', class: \"native-wrapper\", ref: (el) => (this.textareaWrapper = el) }, h(\"textarea\", Object.assign({ key: 'ba47358352fcd30e659b7ac684ce2e5b83744150', class: \"native-textarea\", ref: (el) => (this.nativeInput = el), id: inputId, disabled: disabled, autoCapitalize: this.autocapitalize, autoFocus: this.autofocus, enterKeyHint: this.enterkeyhint, inputMode: this.inputmode, minLength: this.minlength, maxLength: this.maxlength, name: this.name, placeholder: this.placeholder || '', readOnly: this.readonly, required: this.required, spellcheck: this.spellcheck, cols: this.cols, rows: this.rows, wrap: this.wrap, onInput: this.onInput, onChange: this.onChange, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeyDown }, this.inheritedAttributes), value)), h(\"div\", { key: 'bebb8b585bc4e7adb9192665679cd7073e23240c', class: \"end-slot-wrapper\" }, h(\"slot\", { key: '734f40dcc6a57771c00f7528fb19544bb68fc563', name: \"end\" }))), shouldRenderHighlight && h(\"div\", { key: 'e5a1bbebc2e16cb1b3f2bce312494447a0b36957', class: \"textarea-highlight\" })), this.renderBottomContent()));\n    }\n    static get is() { return \"ion-textarea\"; }\n    static get encapsulation() { return \"scoped\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"textarea.ios.scss\"],\n            \"md\": [\"textarea.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"textarea.ios.css\"],\n            \"md\": [\"textarea.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"autocapitalize\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\\nAvailable options: `\\\"off\\\"`, `\\\"none\\\"`, `\\\"on\\\"`, `\\\"sentences\\\"`, `\\\"words\\\"`, `\\\"characters\\\"`.\"\n                },\n                \"attribute\": \"autocapitalize\",\n                \"reflect\": false,\n                \"defaultValue\": \"'none'\"\n            },\n            \"autofocus\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Sets the [`autofocus` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/autofocus) on the native input element.\\n\\nThis may not be sufficient for the element to be focused on page load. See [managing focus](/docs/developing/managing-focus) for more information.\"\n                },\n                \"attribute\": \"autofocus\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"clearOnEdit\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the value will be cleared after focus upon edit.\"\n                },\n                \"attribute\": \"clear-on-edit\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"debounce\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Set the amount of time, in milliseconds, to wait to trigger the `ionInput` event after each keystroke.\"\n                },\n                \"attribute\": \"debounce\",\n                \"reflect\": false\n            },\n            \"disabled\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot interact with the textarea.\"\n                },\n                \"attribute\": \"disabled\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"fill\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'outline' | 'solid'\",\n                    \"resolved\": \"\\\"outline\\\" | \\\"solid\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The fill for the item. If `\\\"solid\\\"` the item will have a background. If\\n`\\\"outline\\\"` the item will be transparent with a border. Only available in `md` mode.\"\n                },\n                \"attribute\": \"fill\",\n                \"reflect\": false\n            },\n            \"inputmode\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search'\",\n                    \"resolved\": \"\\\"decimal\\\" | \\\"email\\\" | \\\"none\\\" | \\\"numeric\\\" | \\\"search\\\" | \\\"tel\\\" | \\\"text\\\" | \\\"url\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A hint to the browser for which keyboard to display.\\nPossible values: `\\\"none\\\"`, `\\\"text\\\"`, `\\\"tel\\\"`, `\\\"url\\\"`,\\n`\\\"email\\\"`, `\\\"numeric\\\"`, `\\\"decimal\\\"`, and `\\\"search\\\"`.\"\n                },\n                \"attribute\": \"inputmode\",\n                \"reflect\": false\n            },\n            \"enterkeyhint\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send'\",\n                    \"resolved\": \"\\\"done\\\" | \\\"enter\\\" | \\\"go\\\" | \\\"next\\\" | \\\"previous\\\" | \\\"search\\\" | \\\"send\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A hint to the browser for which enter key to display.\\nPossible values: `\\\"enter\\\"`, `\\\"done\\\"`, `\\\"go\\\"`, `\\\"next\\\"`,\\n`\\\"previous\\\"`, `\\\"search\\\"`, and `\\\"send\\\"`.\"\n                },\n                \"attribute\": \"enterkeyhint\",\n                \"reflect\": false\n            },\n            \"maxlength\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"This attribute specifies the maximum number of characters that the user can enter.\"\n                },\n                \"attribute\": \"maxlength\",\n                \"reflect\": false\n            },\n            \"minlength\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"This attribute specifies the minimum number of characters that the user can enter.\"\n                },\n                \"attribute\": \"minlength\",\n                \"reflect\": false\n            },\n            \"name\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The name of the control, which is submitted with the form data.\"\n                },\n                \"attribute\": \"name\",\n                \"reflect\": false,\n                \"defaultValue\": \"this.inputId\"\n            },\n            \"placeholder\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Instructional text that shows before the input has a value.\"\n                },\n                \"attribute\": \"placeholder\",\n                \"reflect\": false\n            },\n            \"readonly\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user cannot modify the value.\"\n                },\n                \"attribute\": \"readonly\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"required\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the user must fill in a value before submitting a form.\"\n                },\n                \"attribute\": \"required\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"spellcheck\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the element will have its spelling and grammar checked.\"\n                },\n                \"attribute\": \"spellcheck\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"cols\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The visible width of the text control, in average character widths. If it is specified, it must be a positive integer.\"\n                },\n                \"attribute\": \"cols\",\n                \"reflect\": true\n            },\n            \"rows\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The number of visible text lines for the control.\"\n                },\n                \"attribute\": \"rows\",\n                \"reflect\": false\n            },\n            \"wrap\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'hard' | 'soft' | 'off'\",\n                    \"resolved\": \"\\\"hard\\\" | \\\"off\\\" | \\\"soft\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Indicates how the control wraps text.\"\n                },\n                \"attribute\": \"wrap\",\n                \"reflect\": false\n            },\n            \"autoGrow\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, the textarea container will grow and shrink based\\non the contents of the textarea.\"\n                },\n                \"attribute\": \"auto-grow\",\n                \"reflect\": true,\n                \"defaultValue\": \"false\"\n            },\n            \"value\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"string | null\",\n                    \"resolved\": \"null | string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The value of the textarea.\"\n                },\n                \"attribute\": \"value\",\n                \"reflect\": false,\n                \"defaultValue\": \"''\"\n            },\n            \"counter\": {\n                \"type\": \"boolean\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"boolean\",\n                    \"resolved\": \"boolean\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"If `true`, a character counter will display the ratio of characters used and the total character limit.\\nDevelopers must also set the `maxlength` property for the counter to be calculated correctly.\"\n                },\n                \"attribute\": \"counter\",\n                \"reflect\": false,\n                \"defaultValue\": \"false\"\n            },\n            \"counterFormatter\": {\n                \"type\": \"unknown\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"(inputLength: number, maxLength: number) => string\",\n                    \"resolved\": \"((inputLength: number, maxLength: number) => string) | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"A callback used to format the counter text.\\nBy default the counter text is set to \\\"itemLength / maxLength\\\".\\n\\nSee https://ionicframework.com/docs/troubleshooting/runtime#accessing-this\\nif you need to access `this` from within the callback.\"\n                }\n            },\n            \"errorText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Text that is placed under the textarea and displayed when an error is detected.\"\n                },\n                \"attribute\": \"error-text\",\n                \"reflect\": false\n            },\n            \"helperText\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Text that is placed under the textarea and displayed when no error is detected.\"\n                },\n                \"attribute\": \"helper-text\",\n                \"reflect\": false\n            },\n            \"label\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The visible label associated with the textarea.\\n\\nUse this if you need to render a plaintext label.\\n\\nThe `label` property will take priority over the `label` slot if both are used.\"\n                },\n                \"attribute\": \"label\",\n                \"reflect\": false\n            },\n            \"labelPlacement\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'start' | 'end' | 'floating' | 'stacked' | 'fixed'\",\n                    \"resolved\": \"\\\"end\\\" | \\\"fixed\\\" | \\\"floating\\\" | \\\"stacked\\\" | \\\"start\\\"\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Where to place the label relative to the textarea.\\n`\\\"start\\\"`: The label will appear to the left of the textarea in LTR and to the right in RTL.\\n`\\\"end\\\"`: The label will appear to the right of the textarea in LTR and to the left in RTL.\\n`\\\"floating\\\"`: The label will appear smaller and above the textarea when the textarea is focused or it has a value. Otherwise it will appear on top of the textarea.\\n`\\\"stacked\\\"`: The label will appear smaller and above the textarea regardless even when the textarea is blurred or has no value.\\n`\\\"fixed\\\"`: The label has the same behavior as `\\\"start\\\"` except it also has a fixed width. Long text will be truncated with ellipses (\\\"...\\\").\"\n                },\n                \"attribute\": \"label-placement\",\n                \"reflect\": false,\n                \"defaultValue\": \"'start'\"\n            },\n            \"shape\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"'round'\",\n                    \"resolved\": \"\\\"round\\\" | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The shape of the textarea. If \\\"round\\\" it will have an increased border radius.\"\n                },\n                \"attribute\": \"shape\",\n                \"reflect\": false\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"hasFocus\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionChange\",\n                \"name\": \"ionChange\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The `ionChange` event is fired when the user modifies the textarea's value.\\nUnlike the `ionInput` event, the `ionChange` event is fired when\\nthe element loses focus after its value has been modified.\"\n                },\n                \"complexType\": {\n                    \"original\": \"TextareaChangeEventDetail\",\n                    \"resolved\": \"TextareaChangeEventDetail\",\n                    \"references\": {\n                        \"TextareaChangeEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./textarea-interface\",\n                            \"id\": \"src/components/textarea/textarea-interface.ts::TextareaChangeEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionInput\",\n                \"name\": \"ionInput\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The `ionInput` event is fired each time the user modifies the textarea's value.\\nUnlike the `ionChange` event, the `ionInput` event is fired for each alteration\\nto the textarea's value. This typically happens for each keystroke as the user types.\\n\\nWhen `clearOnEdit` is enabled, the `ionInput` event will be fired when\\nthe user clears the textarea by performing a keydown event.\"\n                },\n                \"complexType\": {\n                    \"original\": \"TextareaInputEventDetail\",\n                    \"resolved\": \"TextareaInputEventDetail\",\n                    \"references\": {\n                        \"TextareaInputEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"./textarea-interface\",\n                            \"id\": \"src/components/textarea/textarea-interface.ts::TextareaInputEventDetail\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionBlur\",\n                \"name\": \"ionBlur\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the input loses focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"FocusEvent\",\n                    \"resolved\": \"FocusEvent\",\n                    \"references\": {\n                        \"FocusEvent\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::FocusEvent\"\n                        }\n                    }\n                }\n            }, {\n                \"method\": \"ionFocus\",\n                \"name\": \"ionFocus\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the input has focus.\"\n                },\n                \"complexType\": {\n                    \"original\": \"FocusEvent\",\n                    \"resolved\": \"FocusEvent\",\n                    \"references\": {\n                        \"FocusEvent\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::FocusEvent\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get methods() {\n        return {\n            \"setFocus\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<void>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        }\n                    },\n                    \"return\": \"Promise<void>\"\n                },\n                \"docs\": {\n                    \"text\": \"Sets focus on the native `textarea` in `ion-textarea`. Use this method instead of the global\\n`textarea.focus()`.\\n\\nSee [managing focus](/docs/developing/managing-focus) for more information.\",\n                    \"tags\": []\n                }\n            },\n            \"getInputElement\": {\n                \"complexType\": {\n                    \"signature\": \"() => Promise<HTMLTextAreaElement>\",\n                    \"parameters\": [],\n                    \"references\": {\n                        \"Promise\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::Promise\"\n                        },\n                        \"HTMLTextAreaElement\": {\n                            \"location\": \"global\",\n                            \"id\": \"global::HTMLTextAreaElement\"\n                        }\n                    },\n                    \"return\": \"Promise<HTMLTextAreaElement>\"\n                },\n                \"docs\": {\n                    \"text\": \"Returns the native `<textarea>` element used under the hood.\",\n                    \"tags\": []\n                }\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"debounce\",\n                \"methodName\": \"debounceChanged\"\n            }, {\n                \"propName\": \"value\",\n                \"methodName\": \"valueChanged\"\n            }];\n    }\n}\nlet textareaIds = 0;\n"],"version":3}