{"file":"ion-input-password-toggle.js","mappings":"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","names":[],"sources":["node_modules/@ionic/core/dist/collection/components/input-password-toggle/input-password-toggle.css?tag=ion-input-password-toggle&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/input-password-toggle/input-password-toggle.css?tag=ion-input-password-toggle&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/input-password-toggle/input-password-toggle.js"],"sourcesContent":["","","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { printIonWarning } from \"../../utils/logging/index\";\nimport { createColorClasses } from \"../../utils/theme\";\nimport { eyeOff, eye } from \"ionicons/icons\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n */\nexport class InputPasswordToggle {\n    constructor() {\n        this.togglePasswordVisibility = () => {\n            const { inputElRef } = this;\n            if (!inputElRef) {\n                return;\n            }\n            inputElRef.type = inputElRef.type === 'text' ? 'password' : 'text';\n        };\n        this.color = undefined;\n        this.showIcon = undefined;\n        this.hideIcon = undefined;\n        this.type = 'password';\n    }\n    /**\n     * Whenever the input type changes we need to re-run validation to ensure the password\n     * toggle is being used with the correct input type. If the application changes the type\n     * outside of this component we also need to re-render so the correct icon is shown.\n     */\n    onTypeChange(newValue) {\n        if (newValue !== 'text' && newValue !== 'password') {\n            printIonWarning(`ion-input-password-toggle only supports inputs of type \"text\" or \"password\". Input of type \"${newValue}\" is not compatible.`, this.el);\n            return;\n        }\n    }\n    connectedCallback() {\n        const { el } = this;\n        const inputElRef = (this.inputElRef = el.closest('ion-input'));\n        if (!inputElRef) {\n            printIonWarning('No ancestor ion-input found for ion-input-password-toggle. This component must be slotted inside of an ion-input.', el);\n            return;\n        }\n        /**\n         * Important: Set the type in connectedCallback because the default value\n         * of this.type may not always be accurate. Usually inputs have the \"password\" type\n         * but it is possible to have the input to initially have the \"text\" type. In that scenario\n         * the wrong icon will show briefly before switching to the correct icon. Setting the\n         * type here allows us to avoid that flicker.\n         */\n        this.type = inputElRef.type;\n    }\n    disconnectedCallback() {\n        this.inputElRef = null;\n    }\n    render() {\n        var _a, _b;\n        const { color, type } = this;\n        const mode = getIonMode(this);\n        const showPasswordIcon = (_a = this.showIcon) !== null && _a !== void 0 ? _a : eye;\n        const hidePasswordIcon = (_b = this.hideIcon) !== null && _b !== void 0 ? _b : eyeOff;\n        const isPasswordVisible = type === 'text';\n        return (h(Host, { key: 'd9811e25bfeb2aa197352bb9be852e9e420739d5', class: createColorClasses(color, {\n                [mode]: true,\n            }) }, h(\"ion-button\", { key: '1eaea1442b248fb2b8d61538b27274e647a07804', mode: mode, color: color, fill: \"clear\", shape: \"round\", \"aria-checked\": isPasswordVisible ? 'true' : 'false', \"aria-label\": \"show password\", role: \"switch\", type: \"button\", onPointerDown: (ev) => {\n                /**\n                 * This prevents mobile browsers from\n                 * blurring the input when the password toggle\n                 * button is activated.\n                 */\n                ev.preventDefault();\n            }, onClick: this.togglePasswordVisibility }, h(\"ion-icon\", { key: '9c88de8f4631d9bde222ce2edf6950d639e04773', slot: \"icon-only\", \"aria-hidden\": \"true\", icon: isPasswordVisible ? hidePasswordIcon : showPasswordIcon }))));\n    }\n    static get is() { return \"ion-input-password-toggle\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"input-password-toggle.scss\"],\n            \"md\": [\"input-password-toggle.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"input-password-toggle.css\"],\n            \"md\": [\"input-password-toggle.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"showIcon\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The icon that can be used to represent showing a password. If not set, the \\\"eye\\\" Ionicon will be used.\"\n                },\n                \"attribute\": \"show-icon\",\n                \"reflect\": false\n            },\n            \"hideIcon\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"string\",\n                    \"resolved\": \"string | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The icon that can be used to represent hiding a password. If not set, the \\\"eyeOff\\\" Ionicon will be used.\"\n                },\n                \"attribute\": \"hide-icon\",\n                \"reflect\": false\n            },\n            \"type\": {\n                \"type\": \"string\",\n                \"mutable\": true,\n                \"complexType\": {\n                    \"original\": \"TextFieldTypes\",\n                    \"resolved\": \"\\\"date\\\" | \\\"datetime-local\\\" | \\\"email\\\" | \\\"month\\\" | \\\"number\\\" | \\\"password\\\" | \\\"search\\\" | \\\"tel\\\" | \\\"text\\\" | \\\"time\\\" | \\\"url\\\" | \\\"week\\\"\",\n                    \"references\": {\n                        \"TextFieldTypes\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::TextFieldTypes\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [{\n                            \"name\": \"internal\",\n                            \"text\": undefined\n                        }],\n                    \"text\": \"\"\n                },\n                \"attribute\": \"type\",\n                \"reflect\": false,\n                \"defaultValue\": \"'password'\"\n            }\n        };\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"type\",\n                \"methodName\": \"onTypeChange\"\n            }];\n    }\n}\n"],"version":3}