{"file":"ion-breadcrumbs.js","mappings":";;;;AAAA,MAAM,iBAAiB,GAAG,shBAAshB,CAAC;AACjjB,gCAAe,iBAAiB;;ACDhC,MAAM,gBAAgB,GAAG,2fAA2f,CAAC;AACrhB,+BAAe,gBAAgB;;MCSlB,WAAW;IACpB;;;;;QACI,IAAI,CAAC,eAAe,GAAG;YACnB,IAAI,CAAC,sBAAsB,EAAE,CAAC;YAC9B,IAAI,CAAC,WAAW,EAAE,CAAC;SACtB,CAAC;QACF,IAAI,CAAC,qBAAqB,GAAG;YACzB,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;;;YAG1C,MAAM,gBAAgB,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,UAAU,KAAK,UAAU,CAAC,MAAM,CAAC,CAAC;YAC7E,IAAI,gBAAgB,IAAI,IAAI,CAAC,aAAa,EAAE;gBACxC,gBAAgB,CAAC,MAAM,GAAG,KAAK,CAAC;aACnC;SACJ,CAAC;QACF,IAAI,CAAC,WAAW,GAAG;YACf,MAAM,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;YACnE,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;YAC1C,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;gBAClC,UAAU,CAAC,sBAAsB,GAAG,KAAK,CAAC;gBAC1C,UAAU,CAAC,SAAS,GAAG,KAAK,CAAC;aAChC;;;;YAID,MAAM,cAAc,GAAG,QAAQ,KAAK,SAAS,IAAI,WAAW,CAAC,MAAM,GAAG,QAAQ,IAAI,mBAAmB,GAAG,kBAAkB,IAAI,QAAQ,CAAC;YACvI,IAAI,cAAc,EAAE;;gBAEhB,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,KAAK;oBAClC,IAAI,KAAK,KAAK,mBAAmB,EAAE;wBAC/B,UAAU,CAAC,sBAAsB,GAAG,IAAI,CAAC;qBAC5C;;;;oBAID,IAAI,KAAK,IAAI,mBAAmB,IAAI,KAAK,GAAG,WAAW,CAAC,MAAM,GAAG,kBAAkB,EAAE;wBACjF,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC;qBAC/B;iBACJ,CAAC,CAAC;aACN;SACJ,CAAC;QACF,IAAI,CAAC,sBAAsB,GAAG;YAC1B,MAAM,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;YACnE,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;;YAE1C,MAAM,MAAM,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,UAAU,KAAK,UAAU,CAAC,MAAM,CAAC,CAAC;;YAEnE,KAAK,MAAM,UAAU,IAAI,WAAW,EAAE;;;;gBAIlC,MAAM,IAAI,GAAG,QAAQ,KAAK,SAAS,IAAI,kBAAkB,KAAK,CAAC;sBACzD,UAAU,KAAK,WAAW,CAAC,mBAAmB,CAAC;sBAC/C,UAAU,KAAK,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;gBACzD,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC;;;;gBAIvB,MAAM,SAAS,GAAG,UAAU,CAAC,SAAS,KAAK,SAAS,GAAG,UAAU,CAAC,SAAS,GAAG,IAAI,GAAG,SAAS,GAAG,IAAI,CAAC;gBACtG,UAAU,CAAC,SAAS,GAAG,SAAS,CAAC;;;gBAGjC,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;oBACjB,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC;oBACzB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;iBAC7B;aACJ;SACJ,CAAC;QACF,IAAI,CAAC,cAAc,GAAG;YAClB,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,CAAC;SACjE,CAAC;QACF,IAAI,CAAC,WAAW,GAAG;YACf,IAAI,CAAC,qBAAqB,EAAE,CAAC;YAC7B,IAAI,CAAC,eAAe,EAAE,CAAC;SAC1B,CAAC;QACF,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;QAC/B,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC1B,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;QAC7B,IAAI,CAAC,kBAAkB,GAAG,CAAC,CAAC;KAC/B;IACD,gBAAgB,CAAC,EAAE;QACf,MAAM,WAAW,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAC1C,MAAM,oBAAoB,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,UAAU,KAAK,UAAU,CAAC,SAAS,CAAC,CAAC;QACtF,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,EAAE,EAAE,oBAAoB,EAAE,CAAC,CAAC,CAAC;KACtG;IACD,eAAe;QACX,IAAI,CAAC,qBAAqB,EAAE,CAAC;QAC7B,IAAI,CAAC,eAAe,EAAE,CAAC;KAC1B;IACD,iBAAiB;QACb,IAAI,CAAC,eAAe,EAAE,CAAC;KAC1B;IACD,MAAM;QACF,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC;QAClC,MAAM,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;QAC9B,QAAQ,CAAC,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,0CAA0C,EAAE,KAAK,EAAE,kBAAkB,CAAC,KAAK,EAAE;gBAC5F,CAAC,IAAI,GAAG,IAAI;gBACZ,YAAY,EAAE,WAAW,CAAC,aAAa,EAAE,IAAI,CAAC,EAAE,CAAC;gBACjD,kBAAkB,EAAE,WAAW,CAAC,oBAAoB,EAAE,IAAI,CAAC,EAAE,CAAC;gBAC9D,uBAAuB,EAAE,SAAS;aACrC,CAAC,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,0CAA0C,EAAE,YAAY,EAAE,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE;KAC9G;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["node_modules/@ionic/core/dist/collection/components/breadcrumbs/breadcrumbs.ios.css?tag=ion-breadcrumbs&mode=ios&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/breadcrumbs/breadcrumbs.md.css?tag=ion-breadcrumbs&mode=md&encapsulation=shadow","node_modules/@ionic/core/dist/collection/components/breadcrumbs/breadcrumbs.js"],"sourcesContent":["/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n}\n\n:host(.in-toolbar-color),\n:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator ion-icon {\n  color: var(--ion-color-contrast);\n}\n\n:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator {\n  background: rgba(var(--ion-color-contrast-rgb), 0.11);\n}\n\n:host(.in-toolbar) {\n  -webkit-padding-start: 20px;\n  padding-inline-start: 20px;\n  -webkit-padding-end: 20px;\n  padding-inline-end: 20px;\n  padding-top: 0;\n  padding-bottom: 0;\n  justify-content: center;\n}","/**\n * Convert a font size to a dynamic font size.\n * Fonts that participate in Dynamic Type should use\n * dynamic font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param unit (optional) - The unit to convert to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a maximum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * a minimum font size.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * Convert a font size to a dynamic font size but impose\n * maximum and minimum font sizes.\n * @param size - The initial font size including the unit (i.e. px or pt)\n * @param minScale - The minimum scale of the font (i.e. 0.8 for a minimum 80% scale).\n * @param maxScale - The maximum scale of the font (i.e. 2.5 for a maximum 250% scale).\n * @param unit (optional) - The unit to convert the initial font size to. Use this if you want to\n * convert to a unit other than $baselineUnit.\n */\n/**\n * A heuristic that applies CSS to tablet\n * viewports.\n *\n * Usage:\n * @include tablet-viewport() {\n *   :host {\n *     background-color: green;\n *   }\n * }\n */\n/**\n * A heuristic that applies CSS to mobile\n * viewports (i.e. phones, not tablets).\n *\n * Usage:\n * @include mobile-viewport() {\n *   :host {\n *     background-color: blue;\n *   }\n * }\n */\n:host {\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n}\n\n:host(.in-toolbar-color),\n:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator ion-icon {\n  color: var(--ion-color-contrast);\n}\n\n:host(.in-toolbar-color) .breadcrumbs-collapsed-indicator {\n  background: rgba(var(--ion-color-contrast-rgb), 0.11);\n}\n\n:host(.in-toolbar) {\n  -webkit-padding-start: 8px;\n  padding-inline-start: 8px;\n  -webkit-padding-end: 8px;\n  padding-inline-end: 8px;\n  padding-top: 0;\n  padding-bottom: 0;\n}","/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { Host, h } from \"@stencil/core\";\nimport { createColorClasses, hostContext } from \"../../utils/theme\";\nimport { getIonMode } from \"../../global/ionic-global\";\n/**\n * @virtualProp {\"ios\" | \"md\"} mode - The mode determines which platform styles to use.\n *\n */\nexport class Breadcrumbs {\n    constructor() {\n        this.breadcrumbsInit = () => {\n            this.setBreadcrumbSeparator();\n            this.setMaxItems();\n        };\n        this.resetActiveBreadcrumb = () => {\n            const breadcrumbs = this.getBreadcrumbs();\n            // Only reset the active breadcrumb if we were the ones to change it\n            // otherwise use the one set on the component\n            const activeBreadcrumb = breadcrumbs.find((breadcrumb) => breadcrumb.active);\n            if (activeBreadcrumb && this.activeChanged) {\n                activeBreadcrumb.active = false;\n            }\n        };\n        this.setMaxItems = () => {\n            const { itemsAfterCollapse, itemsBeforeCollapse, maxItems } = this;\n            const breadcrumbs = this.getBreadcrumbs();\n            for (const breadcrumb of breadcrumbs) {\n                breadcrumb.showCollapsedIndicator = false;\n                breadcrumb.collapsed = false;\n            }\n            // If the number of breadcrumbs exceeds the maximum number of items\n            // that should show and the items before / after collapse do not\n            // exceed the maximum items then we need to collapse the breadcrumbs\n            const shouldCollapse = maxItems !== undefined && breadcrumbs.length > maxItems && itemsBeforeCollapse + itemsAfterCollapse <= maxItems;\n            if (shouldCollapse) {\n                // Show the collapsed indicator in the first breadcrumb that collapses\n                breadcrumbs.forEach((breadcrumb, index) => {\n                    if (index === itemsBeforeCollapse) {\n                        breadcrumb.showCollapsedIndicator = true;\n                    }\n                    // Collapse all breadcrumbs that have an index greater than or equal to\n                    // the number before collapse and an index less than the total number\n                    // of breadcrumbs minus the items that should show after the collapse\n                    if (index >= itemsBeforeCollapse && index < breadcrumbs.length - itemsAfterCollapse) {\n                        breadcrumb.collapsed = true;\n                    }\n                });\n            }\n        };\n        this.setBreadcrumbSeparator = () => {\n            const { itemsAfterCollapse, itemsBeforeCollapse, maxItems } = this;\n            const breadcrumbs = this.getBreadcrumbs();\n            // Check if an active breadcrumb exists already\n            const active = breadcrumbs.find((breadcrumb) => breadcrumb.active);\n            // Set the separator on all but the last breadcrumb\n            for (const breadcrumb of breadcrumbs) {\n                // The only time the last breadcrumb changes is when\n                // itemsAfterCollapse is set to 0, in this case the\n                // last breadcrumb will be the collapsed indicator\n                const last = maxItems !== undefined && itemsAfterCollapse === 0\n                    ? breadcrumb === breadcrumbs[itemsBeforeCollapse]\n                    : breadcrumb === breadcrumbs[breadcrumbs.length - 1];\n                breadcrumb.last = last;\n                // If the breadcrumb has defined whether or not to show the\n                // separator then use that value, otherwise check if it's the\n                // last breadcrumb\n                const separator = breadcrumb.separator !== undefined ? breadcrumb.separator : last ? undefined : true;\n                breadcrumb.separator = separator;\n                // If there is not an active breadcrumb already\n                // set the last one to active\n                if (!active && last) {\n                    breadcrumb.active = true;\n                    this.activeChanged = true;\n                }\n            }\n        };\n        this.getBreadcrumbs = () => {\n            return Array.from(this.el.querySelectorAll('ion-breadcrumb'));\n        };\n        this.slotChanged = () => {\n            this.resetActiveBreadcrumb();\n            this.breadcrumbsInit();\n        };\n        this.collapsed = undefined;\n        this.activeChanged = undefined;\n        this.color = undefined;\n        this.maxItems = undefined;\n        this.itemsBeforeCollapse = 1;\n        this.itemsAfterCollapse = 1;\n    }\n    onCollapsedClick(ev) {\n        const breadcrumbs = this.getBreadcrumbs();\n        const collapsedBreadcrumbs = breadcrumbs.filter((breadcrumb) => breadcrumb.collapsed);\n        this.ionCollapsedClick.emit(Object.assign(Object.assign({}, ev.detail), { collapsedBreadcrumbs }));\n    }\n    maxItemsChanged() {\n        this.resetActiveBreadcrumb();\n        this.breadcrumbsInit();\n    }\n    componentWillLoad() {\n        this.breadcrumbsInit();\n    }\n    render() {\n        const { color, collapsed } = this;\n        const mode = getIonMode(this);\n        return (h(Host, { key: '18ffba1642f10cc2bc31440e84f23aa6f042e501', class: createColorClasses(color, {\n                [mode]: true,\n                'in-toolbar': hostContext('ion-toolbar', this.el),\n                'in-toolbar-color': hostContext('ion-toolbar[color]', this.el),\n                'breadcrumbs-collapsed': collapsed,\n            }) }, h(\"slot\", { key: '3db6d31590e3047889ce554d57d155c8ea2e1455', onSlotchange: this.slotChanged })));\n    }\n    static get is() { return \"ion-breadcrumbs\"; }\n    static get encapsulation() { return \"shadow\"; }\n    static get originalStyleUrls() {\n        return {\n            \"ios\": [\"breadcrumbs.ios.scss\"],\n            \"md\": [\"breadcrumbs.md.scss\"]\n        };\n    }\n    static get styleUrls() {\n        return {\n            \"ios\": [\"breadcrumbs.ios.css\"],\n            \"md\": [\"breadcrumbs.md.css\"]\n        };\n    }\n    static get properties() {\n        return {\n            \"color\": {\n                \"type\": \"string\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"Color\",\n                    \"resolved\": \"\\\"danger\\\" | \\\"dark\\\" | \\\"light\\\" | \\\"medium\\\" | \\\"primary\\\" | \\\"secondary\\\" | \\\"success\\\" | \\\"tertiary\\\" | \\\"warning\\\" | string & Record<never, never> | undefined\",\n                    \"references\": {\n                        \"Color\": {\n                            \"location\": \"import\",\n                            \"path\": \"../../interface\",\n                            \"id\": \"src/interface.d.ts::Color\"\n                        }\n                    }\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The color to use from your application's color palette.\\nDefault options are: `\\\"primary\\\"`, `\\\"secondary\\\"`, `\\\"tertiary\\\"`, `\\\"success\\\"`, `\\\"warning\\\"`, `\\\"danger\\\"`, `\\\"light\\\"`, `\\\"medium\\\"`, and `\\\"dark\\\"`.\\nFor more information on colors, see [theming](/docs/theming/basics).\"\n                },\n                \"attribute\": \"color\",\n                \"reflect\": true\n            },\n            \"maxItems\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number | undefined\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The maximum number of breadcrumbs to show before collapsing.\"\n                },\n                \"attribute\": \"max-items\",\n                \"reflect\": false\n            },\n            \"itemsBeforeCollapse\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The number of breadcrumbs to show before the collapsed indicator.\\nIf `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`,\\nthe breadcrumbs will not be collapsed.\"\n                },\n                \"attribute\": \"items-before-collapse\",\n                \"reflect\": false,\n                \"defaultValue\": \"1\"\n            },\n            \"itemsAfterCollapse\": {\n                \"type\": \"number\",\n                \"mutable\": false,\n                \"complexType\": {\n                    \"original\": \"number\",\n                    \"resolved\": \"number\",\n                    \"references\": {}\n                },\n                \"required\": false,\n                \"optional\": false,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"The number of breadcrumbs to show after the collapsed indicator.\\nIf `itemsBeforeCollapse` + `itemsAfterCollapse` is greater than `maxItems`,\\nthe breadcrumbs will not be collapsed.\"\n                },\n                \"attribute\": \"items-after-collapse\",\n                \"reflect\": false,\n                \"defaultValue\": \"1\"\n            }\n        };\n    }\n    static get states() {\n        return {\n            \"collapsed\": {},\n            \"activeChanged\": {}\n        };\n    }\n    static get events() {\n        return [{\n                \"method\": \"ionCollapsedClick\",\n                \"name\": \"ionCollapsedClick\",\n                \"bubbles\": true,\n                \"cancelable\": true,\n                \"composed\": true,\n                \"docs\": {\n                    \"tags\": [],\n                    \"text\": \"Emitted when the collapsed indicator is clicked on.\"\n                },\n                \"complexType\": {\n                    \"original\": \"BreadcrumbCollapsedClickEventDetail\",\n                    \"resolved\": \"BreadcrumbCollapsedClickEventDetail\",\n                    \"references\": {\n                        \"BreadcrumbCollapsedClickEventDetail\": {\n                            \"location\": \"import\",\n                            \"path\": \"../breadcrumb/breadcrumb-interface\",\n                            \"id\": \"src/components/breadcrumb/breadcrumb-interface.ts::BreadcrumbCollapsedClickEventDetail\"\n                        }\n                    }\n                }\n            }];\n    }\n    static get elementRef() { return \"el\"; }\n    static get watchers() {\n        return [{\n                \"propName\": \"maxItems\",\n                \"methodName\": \"maxItemsChanged\"\n            }, {\n                \"propName\": \"itemsBeforeCollapse\",\n                \"methodName\": \"maxItemsChanged\"\n            }, {\n                \"propName\": \"itemsAfterCollapse\",\n                \"methodName\": \"maxItemsChanged\"\n            }];\n    }\n    static get listeners() {\n        return [{\n                \"name\": \"collapsedClick\",\n                \"method\": \"onCollapsedClick\",\n                \"target\": undefined,\n                \"capture\": false,\n                \"passive\": false\n            }];\n    }\n}\n"],"version":3}